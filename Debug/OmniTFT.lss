
OmniTFT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000538a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  0000538a  0000541e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000cb  0080008a  0080008a  00005448  2**0
                  ALLOC
  3 .stab         00005214  00000000  00000000  00005448  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001f44  00000000  00000000  0000a65c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 80 10 	jmp	0x2100	; 0x2100 <__ctors_end>
       4:	0c 94 9d 10 	jmp	0x213a	; 0x213a <__bad_interrupt>
       8:	0c 94 9d 10 	jmp	0x213a	; 0x213a <__bad_interrupt>
       c:	0c 94 9d 10 	jmp	0x213a	; 0x213a <__bad_interrupt>
      10:	0c 94 9d 10 	jmp	0x213a	; 0x213a <__bad_interrupt>
      14:	0c 94 9d 10 	jmp	0x213a	; 0x213a <__bad_interrupt>
      18:	0c 94 9d 10 	jmp	0x213a	; 0x213a <__bad_interrupt>
      1c:	0c 94 9d 10 	jmp	0x213a	; 0x213a <__bad_interrupt>
      20:	0c 94 9d 10 	jmp	0x213a	; 0x213a <__bad_interrupt>
      24:	0c 94 9d 10 	jmp	0x213a	; 0x213a <__bad_interrupt>
      28:	0c 94 9d 10 	jmp	0x213a	; 0x213a <__bad_interrupt>
      2c:	0c 94 9d 10 	jmp	0x213a	; 0x213a <__bad_interrupt>
      30:	0c 94 9d 10 	jmp	0x213a	; 0x213a <__bad_interrupt>
      34:	0c 94 9f 10 	jmp	0x213e	; 0x213e <__vector_13>
      38:	0c 94 9d 10 	jmp	0x213a	; 0x213a <__bad_interrupt>
      3c:	0c 94 9d 10 	jmp	0x213a	; 0x213a <__bad_interrupt>
      40:	0c 94 9d 10 	jmp	0x213a	; 0x213a <__bad_interrupt>
      44:	0c 94 9d 10 	jmp	0x213a	; 0x213a <__bad_interrupt>
      48:	0c 94 9d 10 	jmp	0x213a	; 0x213a <__bad_interrupt>
      4c:	0c 94 9d 10 	jmp	0x213a	; 0x213a <__bad_interrupt>
      50:	0c 94 9d 10 	jmp	0x213a	; 0x213a <__bad_interrupt>

00000054 <OCR_A_Extended_M>:
      54:	10 18 20 5f 00 00 00 00 00 00 00 00 00 00 00 00     .. _............
	...
      88:	00 00 03 80 03 80 03 80 03 80 03 80 03 80 01 80     ................
      98:	01 80 01 80 01 80 01 80 01 80 00 00 00 00 00 00     ................
      a8:	03 80 03 80 03 80 00 00 00 00 00 00 00 00 00 00     ................
      b8:	00 00 1f f8 1f f8 1e 78 1e 78 0e 70 0c 30 0c 30     .......x.x.p.0.0
      c8:	0c 30 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .0..............
	...
      e8:	00 00 06 60 06 60 06 60 06 60 1f f8 1f f8 06 60     ...`.`.`.`.....`
      f8:	06 60 06 60 1f f8 1f f8 06 60 06 60 06 60 06 60     .`.`.....`.`.`.`
	...
     118:	00 00 01 80 01 80 01 80 01 80 1f f8 1f f8 18 00     ................
     128:	18 00 1f f8 1f f8 00 18 00 18 1f f8 1f f8 01 80     ................
     138:	01 80 01 80 01 80 00 00 00 00 00 00 00 00 00 00     ................
     148:	00 00 1c 00 1c 18 1c 18 00 30 00 30 00 60 00 e0     .........0.0.`..
     158:	00 c0 01 80 01 80 03 00 07 00 06 00 0c 00 0c 00     ................
     168:	18 38 18 38 00 38 00 00 00 00 00 00 00 00 00 00     .8.8.8..........
     178:	00 00 00 00 00 00 0f c0 0f c0 18 60 18 60 18 60     ...........`.`.`
     188:	18 60 0c c0 07 80 07 00 0f 80 1d c8 18 f8 18 70     .`.............p
     198:	18 f0 0f d8 0f 98 00 00 00 00 00 00 00 00 00 00     ................
     1a8:	00 00 03 c0 03 c0 03 c0 03 80 03 80 03 80 03 80     ................
     1b8:	03 00 03 00 03 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     1d8:	00 00 00 30 00 60 00 c0 01 80 03 80 03 00 03 00     ...0.`..........
     1e8:	03 00 03 00 03 00 03 00 03 00 03 00 03 80 01 80     ................
     1f8:	00 c0 00 60 00 30 00 00 00 00 00 00 00 00 00 00     ...`.0..........
     208:	00 00 0c 00 06 00 03 00 01 80 01 c0 00 c0 00 c0     ................
     218:	00 c0 00 c0 00 c0 00 c0 00 c0 00 c0 01 c0 01 80     ................
     228:	03 00 06 00 0c 00 00 00 00 00 00 00 00 00 00 00     ................
     238:	00 00 00 00 00 00 01 80 01 80 19 88 19 98 0f f0     ................
     248:	07 e0 03 c0 03 c0 07 e0 0f f0 1d b8 11 98 01 80     ................
     258:	01 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     270:	00 00 01 80 01 80 01 80 01 80 1f f8 1f f8 01 80     ................
     280:	01 80 01 80 01 80 00 00 00 00 00 00 00 00 00 00     ................
	...
     2ac:	00 00 07 e0 07 e0 00 60 00 60 00 60 00 60 00 60     .......`.`.`.`.`
     2bc:	00 60 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .`..............
	...
     2dc:	1f f8 1f f8 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     310:	00 00 03 80 03 80 03 80 00 00 00 00 00 00 00 00     ................
	...
     328:	00 00 00 18 00 18 00 30 00 30 00 60 00 60 00 c0     .......0.0.`.`..
     338:	00 c0 01 80 01 80 03 00 03 00 06 00 06 00 0c 00     ................
     348:	0c 00 18 00 18 00 00 00 00 00 00 00 00 00 00 00     ................
     358:	00 00 0f f0 1f f8 18 18 18 18 18 18 18 18 18 18     ................
     368:	18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18     ................
     378:	18 18 1f f8 0f f0 00 00 00 00 00 00 00 00 00 00     ................
     388:	00 00 1f 80 1f 80 01 80 01 80 01 80 01 80 01 80     ................
     398:	01 80 01 80 01 80 01 98 01 98 01 98 01 98 01 98     ................
     3a8:	01 98 1f f8 1f f8 00 00 00 00 00 00 00 00 00 00     ................
     3b8:	00 00 1f f0 1f f8 00 18 00 18 00 18 00 18 00 18     ................
     3c8:	00 18 0f f8 1f f0 18 00 18 00 18 00 18 00 18 00     ................
     3d8:	18 00 1f f8 1f f8 00 00 00 00 00 00 00 00 00 00     ................
     3e8:	00 00 1f f8 1f fc 00 0c 00 0c 00 0c 00 0c 00 0c     ................
     3f8:	00 0c 07 f8 07 f8 00 0c 00 0c 00 0c 00 0c 00 0c     ................
     408:	00 0c 1f fc 1f f8 00 00 00 00 00 00 00 00 00 00     ................
     418:	00 00 18 00 18 00 18 30 18 30 18 30 18 30 18 30     .......0.0.0.0.0
     428:	18 30 18 30 18 30 1f f8 1f f8 00 30 00 30 00 30     .0.0.0.....0.0.0
     438:	00 30 00 30 00 30 00 00 00 00 00 00 00 00 00 00     .0.0.0..........
     448:	00 00 07 f8 07 f8 06 00 06 00 06 00 06 00 06 00     ................
     458:	06 00 07 f0 07 f8 00 18 00 18 00 18 00 18 00 18     ................
     468:	18 18 1f f8 07 f0 00 00 00 00 00 00 00 00 00 00     ................
     478:	00 00 1c 00 1c 00 18 00 18 00 18 00 18 00 18 00     ................
     488:	18 00 18 00 18 00 1f f8 1f f8 18 18 18 18 18 18     ................
     498:	18 18 1f f8 1f f8 00 00 00 00 00 00 00 00 00 00     ................
     4a8:	00 00 1f f8 1f f8 18 18 00 18 00 18 00 18 00 18     ................
     4b8:	00 18 00 30 00 60 00 c0 01 80 01 80 01 80 01 80     ...0.`..........
     4c8:	01 80 01 80 01 80 00 00 00 00 00 00 00 00 00 00     ................
     4d8:	00 00 07 e0 07 e0 06 60 06 60 06 60 06 60 06 60     .......`.`.`.`.`
     4e8:	06 60 0f f0 1f f8 18 18 18 18 18 18 18 18 18 18     .`..............
     4f8:	18 18 1f f8 0f f0 00 00 00 00 00 00 00 00 00 00     ................
     508:	00 00 1f f8 1f f8 18 18 18 18 18 18 18 18 1f f8     ................
     518:	1f f8 00 18 00 18 00 18 00 18 00 18 00 18 00 18     ................
     528:	00 18 00 38 00 38 00 00 00 00 00 00 00 00 00 00     ...8.8..........
	...
     540:	00 00 03 80 03 80 03 80 00 00 00 00 00 00 00 00     ................
     550:	03 80 03 80 03 80 00 00 00 00 00 00 00 00 00 00     ................
	...
     570:	07 00 07 00 07 00 00 00 00 00 00 00 00 00 07 e0     ................
     580:	07 e0 00 60 00 60 00 60 00 60 00 60 00 60 00 00     ...`.`.`.`.`.`..
	...
     5a0:	00 18 00 78 00 e0 01 c0 07 00 0e 00 1c 00 0e 00     ...x............
     5b0:	07 00 01 c0 00 e0 00 78 00 18 00 00 00 00 00 00     .......x........
	...
     5d4:	1f f8 1f f8 00 00 00 00 00 00 1f f8 1f f8 00 00     ................
	...
     600:	18 00 1e 00 07 00 03 80 00 e0 00 70 00 38 00 70     ...........p.8.p
     610:	00 e0 03 80 07 00 1e 00 18 00 00 00 00 00 00 00     ................
	...
     628:	00 00 00 20 00 60 01 f0 03 98 07 18 0e 18 18 70     ... .`.........p
     638:	10 e0 01 c0 03 80 06 00 06 00 06 00 06 00 00 00     ................
     648:	00 00 06 00 06 00 00 00 00 00 00 00 00 00 00 00     ................
     658:	00 00 07 e0 0f f0 18 18 18 18 00 18 00 18 00 18     ................
     668:	0f 98 0f 98 19 98 19 98 19 98 19 98 19 98 19 98     ................
     678:	19 98 0f f0 0f f0 00 00 00 00 00 00 00 00 00 00     ................
     688:	00 00 01 80 01 80 01 80 03 c0 03 c0 03 c0 03 c0     ................
     698:	06 60 06 60 06 60 06 60 0c 30 0f f0 0f f0 0c 30     .`.`.`.`.0.....0
     6a8:	18 18 18 18 18 18 00 00 00 00 00 00 00 00 00 00     ................
     6b8:	00 00 1f f0 1f f8 18 1c 18 0c 18 0c 18 0c 18 0c     ................
     6c8:	18 1c 1f f8 1f f8 18 1c 18 0c 18 0c 18 0c 18 0c     ................
     6d8:	18 1c 1f f8 1f f0 00 00 00 00 00 00 00 00 00 00     ................
     6e8:	00 00 01 fc 03 fc 03 00 06 00 06 00 0c 00 0c 00     ................
     6f8:	18 00 18 00 18 00 18 00 1c 00 0c 00 0e 00 06 00     ................
     708:	07 00 03 fc 01 fc 00 00 00 00 00 00 00 00 00 00     ................
     718:	00 00 1f c0 1f e0 06 70 06 30 06 30 06 18 06 18     .......p.0.0....
     728:	06 0c 06 0c 06 0c 06 0c 06 1c 06 18 06 38 06 30     .............8.0
     738:	06 70 1f e0 1f c0 00 00 00 00 00 00 00 00 00 00     .p..............
     748:	00 00 1f fc 1f fc 18 00 18 00 18 00 18 00 18 00     ................
     758:	18 00 1f c0 1f c0 18 00 18 00 18 00 18 00 18 00     ................
     768:	18 00 1f fc 1f fc 00 00 00 00 00 00 00 00 00 00     ................
     778:	00 00 1f fc 1f fc 18 00 18 00 18 00 18 00 1f f0     ................
     788:	1f f0 18 00 18 00 18 00 18 00 18 00 18 00 18 00     ................
     798:	18 00 18 00 18 00 00 00 00 00 00 00 00 00 00 00     ................
     7a8:	00 00 01 f8 03 f8 03 00 06 00 0e 00 0c 00 18 00     ................
     7b8:	18 00 18 00 18 00 18 f8 18 f8 18 18 18 18 18 18     ................
     7c8:	18 18 0f f8 0f f0 00 00 00 00 00 00 00 00 00 00     ................
     7d8:	00 00 18 18 18 18 18 18 18 18 18 18 18 18 18 18     ................
     7e8:	18 18 1f f8 1f f8 18 18 18 18 18 18 18 18 18 18     ................
     7f8:	18 18 18 18 18 18 00 00 00 00 00 00 00 00 00 00     ................
     808:	00 00 1f f8 1f f8 01 80 01 80 01 80 01 80 01 80     ................
     818:	01 80 01 80 01 80 01 80 01 80 01 80 01 80 01 80     ................
     828:	01 80 1f f8 1f f8 00 00 00 00 00 00 00 00 00 00     ................
     838:	00 00 00 18 00 18 00 18 00 18 00 18 00 18 00 18     ................
     848:	00 18 00 18 00 18 0c 18 0c 18 0c 18 0c 18 0c 18     ................
     858:	0c 18 07 f0 03 e0 00 00 00 00 00 00 00 00 00 00     ................
     868:	00 00 18 0c 18 18 18 30 18 60 18 c0 19 80 1b 00     .......0.`......
     878:	1e 00 1c 00 1e 00 1f 00 1b 80 19 c0 18 e0 18 70     ...............p
     888:	18 30 18 18 18 0c 00 00 00 00 00 00 00 00 00 00     .0..............
     898:	00 00 18 00 18 00 18 00 18 00 18 00 18 00 18 00     ................
     8a8:	18 00 18 00 18 00 18 00 18 00 18 00 18 00 18 00     ................
     8b8:	18 00 1f f8 1f f8 00 00 00 00 00 00 00 00 00 00     ................
     8c8:	00 00 1c 38 1c 38 1e 78 1e f8 1b d8 19 98 19 98     ...8.8.x........
     8d8:	19 98 18 18 18 18 18 18 18 18 18 18 18 18 18 18     ................
     8e8:	18 18 18 18 18 18 00 00 00 00 00 00 00 00 00 00     ................
     8f8:	00 00 1c 18 1c 18 1e 18 1e 18 1e 18 1b 18 1b 18     ................
     908:	1b 18 19 98 19 98 18 d8 18 d8 18 d8 18 78 18 78     .............x.x
     918:	18 78 18 38 18 38 00 00 00 00 00 00 00 00 00 00     .x.8.8..........
     928:	00 00 03 c0 03 c0 06 60 06 60 0e 70 0c 30 0c 30     .......`.`.p.0.0
     938:	18 18 18 18 18 18 18 18 0c 30 0c 30 0e 70 06 60     .........0.0.p.`
     948:	06 60 03 c0 01 c0 00 00 00 00 00 00 00 00 00 00     .`..............
     958:	00 00 1f f0 1f f0 18 18 18 18 18 18 18 18 18 18     ................
     968:	18 18 18 18 1f f0 1f f0 18 00 18 00 18 00 18 00     ................
     978:	18 00 18 00 18 00 00 00 00 00 00 00 00 00 00 00     ................
     988:	00 00 00 70 00 f8 01 d8 03 98 07 18 0c 18 18 18     ...p............
     998:	18 18 18 18 18 18 19 98 19 98 19 f0 18 e0 19 c0     ................
     9a8:	1b e0 1f 78 0e 78 00 00 00 00 00 00 00 00 00 00     ...x.x..........
     9b8:	00 00 1f f0 1f f8 18 18 18 18 18 18 18 18 1f f8     ................
     9c8:	1f f0 19 80 19 80 18 c0 18 c0 18 60 18 60 18 30     ...........`.`.0
     9d8:	18 30 18 18 18 18 00 00 00 00 00 00 00 00 00 00     .0..............
     9e8:	00 00 0f f0 1f f8 18 18 18 18 0c 00 06 00 06 00     ................
     9f8:	03 00 01 80 01 80 00 c0 00 60 00 60 00 30 18 18     .........`.`.0..
     a08:	18 18 1f f8 0f f0 00 00 00 00 00 00 00 00 00 00     ................
     a18:	00 00 1f f8 1f f8 19 98 19 98 01 80 01 80 01 80     ................
     a28:	01 80 01 80 01 80 01 80 01 80 01 80 01 80 01 80     ................
     a38:	01 80 01 80 01 80 00 00 00 00 00 00 00 00 00 00     ................
     a48:	00 00 18 18 18 18 18 18 18 18 18 18 18 18 18 18     ................
     a58:	18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18     ................
     a68:	18 18 0f f0 0f f0 00 00 00 00 00 00 00 00 00 00     ................
     a78:	00 00 18 18 18 18 18 18 18 18 18 18 18 18 18 18     ................
     a88:	0c 30 0c 30 0e 70 06 60 06 60 07 e0 03 c0 03 c0     .0.0.p.`.`......
     a98:	03 c0 01 80 01 80 00 00 00 00 00 00 00 00 00 00     ................
     aa8:	00 00 18 18 18 18 18 18 18 18 18 18 18 18 19 98     ................
     ab8:	19 98 19 98 19 98 19 98 19 98 19 98 19 98 19 98     ................
     ac8:	19 98 0f f0 0f f0 00 00 00 00 00 00 00 00 00 00     ................
     ad8:	00 00 18 18 18 18 0c 30 0c 30 06 60 06 60 03 c0     .......0.0.`.`..
     ae8:	03 c0 01 80 01 80 03 c0 03 c0 06 60 06 60 0c 30     ...........`.`.0
     af8:	0c 30 18 18 18 18 00 00 00 00 00 00 00 00 00 00     .0..............
     b08:	00 00 18 18 18 18 18 18 18 18 0c 30 0e 60 07 e0     ...........0.`..
     b18:	03 c0 01 80 01 80 01 80 01 80 01 80 01 80 01 80     ................
     b28:	01 80 01 80 01 80 00 00 00 00 00 00 00 00 00 00     ................
     b38:	00 00 1f f8 1f f8 00 30 00 30 00 60 00 60 00 c0     .......0.0.`.`..
     b48:	00 c0 01 80 01 80 03 00 03 00 06 00 06 00 0c 00     ................
     b58:	0c 00 1f f8 1f f8 00 00 00 00 00 00 00 00 00 00     ................
     b68:	00 00 1f f8 1f f8 1b 00 1b 00 1b 00 1b 00 1b 00     ................
     b78:	1b 00 1b 00 1b 00 1b 00 1b 00 1b 00 1b 00 1b 00     ................
     b88:	1b 00 1f f8 1f f8 00 00 00 00 00 00 00 00 00 00     ................
     b98:	00 00 18 00 18 00 0c 00 0c 00 06 00 07 00 03 00     ................
     ba8:	01 80 01 80 00 c0 00 c0 00 60 00 70 00 30 00 18     .........`.p.0..
     bb8:	00 18 00 0c 00 0c 00 00 00 00 00 00 00 00 00 00     ................
     bc8:	00 00 1f f8 1f f8 00 d8 00 d8 00 d8 00 d8 00 d8     ................
     bd8:	00 d8 00 d8 00 d8 00 d8 00 d8 00 d8 00 d8 00 d8     ................
     be8:	00 d8 1f f8 1f f8 00 00 00 00 00 00 00 00 00 00     ................
	...
     c00:	00 00 01 80 01 80 03 c0 03 c0 07 e0 07 e0 0e 70     ...............p
     c10:	0e 70 1c 30 1c 38 18 18 00 00 00 00 00 00 00 00     .p.0.8..........
	...
     c50:	ff ff ff ff 00 00 00 00 00 00 06 00 07 c0 03 e0     ................
     c60:	00 60 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .`..............
	...
     c94:	07 f0 07 f0 00 18 00 18 00 18 0f f8 0f f8 18 18     ................
     ca4:	18 18 18 18 18 38 1f f8 0f d8 00 00 00 00 00 00     .....8..........
     cb4:	00 00 00 00 00 00 18 00 18 00 18 00 18 00 18 00     ................
     cc4:	1b e0 1f f0 1e 38 1c 18 18 18 18 18 18 18 18 18     .....8..........
     cd4:	18 18 1c 18 1e 38 1f f0 1b e0 00 00 00 00 00 00     .....8..........
	...
     cf4:	03 fc 07 fc 0e 00 1c 00 18 00 18 00 18 00 18 00     ................
     d04:	18 00 1c 00 0e 00 07 fc 03 fc 00 00 00 00 00 00     ................
     d14:	00 00 00 00 00 00 00 18 00 18 00 18 00 18 00 18     ................
     d24:	07 d8 0f f8 1c 78 18 38 18 18 18 18 18 18 18 18     .....x.8........
     d34:	18 18 18 38 1c 78 0f f8 07 d8 00 00 00 00 00 00     ...8.x..........
	...
     d54:	07 e0 0f f0 1c 38 18 18 18 18 18 18 1f f8 1f f8     .....8..........
     d64:	18 00 18 00 1c 00 0f f8 07 f8 00 00 00 00 00 00     ................
     d74:	00 00 00 00 00 00 00 fc 01 fc 03 80 03 00 03 00     ................
     d84:	0f f0 0f f0 03 00 03 00 03 00 03 00 03 00 03 00     ................
     d94:	03 00 03 00 03 00 03 00 03 00 00 00 00 00 00 00     ................
	...
     db4:	07 d8 0f f8 1c 78 18 38 18 18 18 18 18 18 18 18     .....x.8........
     dc4:	18 38 1c 78 0f f8 07 d8 00 18 00 18 00 18 00 38     .8.x...........8
     dd4:	0f f0 0f e0 00 00 18 00 18 00 18 00 18 00 18 00     ................
     de4:	19 f0 1b f0 1f 18 1c 18 18 18 18 18 18 18 18 18     ................
     df4:	18 18 18 18 18 18 18 18 18 18 00 00 00 00 00 00     ................
     e04:	00 00 00 00 03 80 03 80 03 80 00 00 00 00 00 00     ................
     e14:	0f 80 0f 80 01 80 01 80 01 80 01 80 01 80 01 80     ................
     e24:	01 80 01 80 01 80 0f f0 0f f0 00 00 00 00 00 00     ................
     e34:	00 00 00 00 00 38 00 38 00 38 00 00 00 00 00 00     .....8.8.8......
     e44:	03 f8 03 f8 00 18 00 18 00 18 00 18 00 18 00 18     ................
     e54:	00 18 00 18 00 18 00 18 00 18 00 18 0c 18 0c 18     ................
     e64:	07 f0 03 e0 00 00 18 00 18 00 18 00 18 00 18 00     ................
     e74:	18 30 18 60 18 c0 19 80 1b 80 1f 00 1e 00 1f 00     .0.`............
     e84:	19 80 18 c0 18 60 18 30 18 18 00 00 00 00 00 00     .....`.0........
     e94:	00 00 00 00 00 00 0f 80 0f 80 01 80 01 80 01 80     ................
     ea4:	01 80 01 80 01 80 01 80 01 80 01 80 01 80 01 80     ................
     eb4:	01 80 01 80 01 80 0f f0 0f f0 00 00 00 00 00 00     ................
	...
     ed4:	3f 78 3f fc 39 cc 31 8c 31 8c 31 8c 31 8c 31 8c     ?x?.9.1.1.1.1.1.
     ee4:	31 8c 31 8c 31 8c 31 8c 31 8c 00 00 00 00 00 00     1.1.1.1.1.......
	...
     f04:	19 f0 1b f0 1f 18 1c 18 18 18 18 18 18 18 18 18     ................
     f14:	18 18 18 18 18 18 18 18 18 18 00 00 00 00 00 00     ................
	...
     f34:	07 e0 0f f0 1c 38 18 18 18 18 18 18 18 18 18 18     .....8..........
     f44:	18 18 18 18 1c 38 0f f0 07 e0 00 00 00 00 00 00     .....8..........
	...
     f64:	1b c0 1f e0 1e 70 1c 38 18 18 18 18 18 18 18 18     .....p.8........
     f74:	18 18 1c 38 1e 70 1f e0 1b c0 18 00 18 00 18 00     ...8.p..........
     f84:	18 00 18 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     f94:	07 d8 0f f8 1c 78 18 38 18 18 18 18 18 18 18 18     .....x.8........
     fa4:	18 18 18 38 1c 78 0f f8 07 d8 00 18 00 18 00 18     ...8.x..........
     fb4:	00 18 00 18 00 00 00 00 00 00 00 00 00 00 00 00     ................
     fc4:	19 f0 1b f8 1f 0c 1c 0c 18 0c 18 00 18 00 18 00     ................
     fd4:	18 00 18 00 18 00 18 00 18 00 00 00 00 00 00 00     ................
	...
     ff4:	0f f0 1f f8 18 18 18 00 1e 00 07 80 01 f0 00 70     ...............p
    1004:	00 18 00 18 18 18 1f f0 0f f0 00 00 00 00 00 00     ................
	...
    101c:	06 00 06 00 06 00 06 00 1f f8 1f f8 06 00 06 00     ................
    102c:	06 00 06 00 06 00 06 00 06 00 06 0c 06 1c 03 f8     ................
    103c:	01 f0 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1054:	18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18     ................
    1064:	18 18 18 38 18 f8 0f d8 07 98 00 00 00 00 00 00     ...8............
	...
    1084:	30 18 30 18 30 18 30 18 38 38 18 30 18 30 0c 60     0.0.0.0.88.0.0.`
    1094:	0c 60 06 c0 06 c0 03 80 03 80 00 00 00 00 00 00     .`..............
	...
    10b4:	30 0c 30 0c 30 0c 30 0c 31 8c 31 8c 31 8c 31 8c     0.0.0.0.1.1.1.1.
    10c4:	31 8c 33 cc 1f f8 1e 78 1c 30 00 00 00 00 00 00     1.3....x.0......
	...
    10e4:	18 18 1c 38 0c 30 06 60 03 c0 03 c0 01 80 03 c0     ...8.0.`........
    10f4:	06 e0 0e 70 0c 30 18 18 18 18 00 00 00 00 00 00     ...p.0..........
	...
    1114:	30 18 30 18 30 18 30 18 38 38 18 30 18 30 0c 60     0.0.0.0.88.0.0.`
    1124:	0c 60 06 c0 07 c0 07 80 01 80 03 80 03 00 03 00     .`..............
    1134:	3e 00 3e 00 00 00 00 00 00 00 00 00 00 00 00 00     >.>.............
    1144:	1f f8 1f f8 00 38 00 30 00 60 00 c0 01 80 03 00     .....8.0.`......
    1154:	06 00 0c 00 1c 00 1f f8 1f f8 00 00 00 00 00 00     ................
    1164:	00 00 00 00 00 00 00 f8 01 f8 01 80 01 80 01 80     ................
    1174:	01 80 01 80 01 80 1f 00 1f 00 01 80 01 80 01 80     ................
    1184:	01 80 01 80 01 80 01 f8 00 f8 00 00 00 00 00 00     ................
    1194:	00 00 00 00 00 00 01 80 01 80 01 80 01 80 01 80     ................
    11a4:	01 80 01 80 01 80 01 80 01 80 01 80 01 80 01 80     ................
    11b4:	01 80 01 80 01 80 01 80 01 80 00 00 00 00 00 00     ................
    11c4:	00 00 00 00 00 00 1f 00 1f 80 01 80 01 80 01 80     ................
    11d4:	01 80 01 80 01 80 00 f8 00 f8 01 80 01 80 01 80     ................
    11e4:	01 80 01 80 01 80 1f 80 1f 00 00 00 00 00 00 00     ................
	...
    1208:	00 00 07 8c 1f fc 18 f0 00 00 00 00 00 00 00 00     ................
	...

00001228 <Orbitron_Light_16Bitmaps>:
    1228:	00 ff 20 99 04 20 84 08 47 ff 10 c1 08 10 8f fe     .. .. ..G.......
    1238:	21 02 10 63 00 04 00 81 ff 42 18 41 08 21 03 fe     !..c.....B.A.!..
    1248:	04 20 84 10 c2 17 fc 08 00 00 01 c0 28 81 a2 0c     . ..........(...
    1258:	88 61 c6 00 30 01 8e 0c 44 c1 16 04 50 0e 3f c1     .a..0...D...P.?.
    1268:	01 84 00 10 00 60 02 60 08 62 20 68 80 62 00 e7     .....`.`.b h.b..
    1278:	fc 40 c0 52 49 24 91 00 44 92 49 25 00 10 23 f9     .@.RI$..D.I%..#.
    1288:	c2 8d 80 00 10 4f c4 10 40 e0 fc 80 00 01 01 02     .....O..@.......
    1298:	04 08 18 30 20 40 80 00 7f d0 0e 03 c0 d8 33 1c     ...0 @........3.
    12a8:	66 0d 81 e0 38 05 ff 00 19 da 10 84 21 08 42 7f     f...8.......!.B.
    12b8:	d0 04 00 80 10 02 ff a0 04 00 80 10 03 ff 80 7f     ................
    12c8:	c8 02 00 20 02 00 23 fe 00 10 01 00 18 01 7f e0     ... ..#.........
    12d8:	01 80 70 1a 06 41 88 61 30 27 ff 00 80 10 02 00     ..p..A.a0'......
    12e8:	ff f0 02 00 40 08 01 ff 80 08 01 00 30 05 ff 00     ....@.......0...
    12f8:	7f 90 02 00 40 08 01 ff a0 0c 01 80 30 05 ff 00     ....@.......0...
    1308:	7f 80 10 04 01 00 40 10 04 01 00 40 10 04 7f d0     ......@....@....
    1318:	06 00 c0 18 03 ff e0 0c 01 80 30 05 ff 00 7f e8     ..........0.....
    1328:	01 80 18 01 80 17 ff 00 10 01 00 10 01 ff e0 80     ................
    1338:	80 81 c0 02 1c e7 08 0c 0e 07 02 ff 00 00 ff 81     ................
    1348:	c0 c0 e0 63 9c 60 80 ff 80 10 04 01 00 47 e2 00     ...c.`.......G..
    1358:	80 00 00 02 00 7f d0 06 00 c7 99 0b 21 64 2c 7f     ............!d,.
    1368:	80 10 01 ff 80 7f d0 06 00 c0 18 03 00 7f fc 01     ................
    1378:	80 30 06 00 80 ff d0 06 00 c0 18 03 ff e0 0c 01     .0..............
    1388:	80 30 07 ff 00 7f e8 00 80 08 00 80 08 00 80 08     .0..............
    1398:	00 80 08 00 7f e0 ff d0 06 00 c0 18 03 00 60 0c     ..............`.
    13a8:	01 80 30 07 ff 00 ff d0 02 00 40 08 01 fe 20 04     ..0.......@... .
    13b8:	00 80 10 03 ff 00 ff d0 02 00 40 08 01 fe 20 04     ..........@... .
    13c8:	00 80 10 02 00 00 7f d0 06 00 40 08 01 03 e0 0c     ..........@.....
    13d8:	01 80 30 05 ff 00 80 18 01 80 18 01 80 1f ff 80     ..0.............
    13e8:	18 01 80 18 01 80 10 ff e0 00 20 04 00 80 10 02     .......... .....
    13f8:	00 40 08 01 80 30 05 ff 00 80 50 12 04 41 88 61     .@...0....P..A.a
    1408:	f8 21 84 18 81 10 12 01 00 80 08 00 80 08 00 80     .!..............
    1418:	08 00 80 08 00 80 08 00 ff e0 c0 1f 01 ec 1b 31     ...............1
    1428:	98 d8 c3 86 08 30 01 80 0c 00 60 02 c0 3c 06 c0     .....0....`..<..
    1438:	cc 18 83 08 60 8c 19 81 b0 1e 01 80 7f d0 06 00     ....`...........
    1448:	c0 18 03 00 60 0c 01 80 30 05 ff 00 ff d0 06 00     ....`...0.......
    1458:	c0 18 03 00 7f f4 00 80 10 02 00 00 7f c4 01 20     ............... 
    1468:	09 00 48 02 40 12 00 90 04 80 24 01 1f fe ff d0     ..H.@.....$.....
    1478:	06 00 c0 18 03 00 7f f4 18 81 90 1a 01 80 7f d0     ................
    1488:	06 00 40 08 00 ff 80 08 01 00 30 05 ff 00 ff f0     ..@.......0.....
    1498:	40 04 00 40 04 00 40 04 00 40 04 00 40 04 00 80     @..@..@..@..@...
    14a8:	30 06 00 c0 18 03 00 60 0c 01 80 30 05 ff 00 40     0......`...0...@
    14b8:	02 60 06 30 0c 10 08 18 18 08 10 04 20 06 60 02     .`.0........ .`.
    14c8:	40 03 c0 01 80 40 c0 4c 1c 18 82 82 10 d8 43 11     @....@.L......C.
    14d8:	18 22 22 04 c6 c0 d0 58 0e 0a 01 81 c0 10 10 00     .""....X........
    14e8:	60 31 83 06 30 1b 00 70 01 00 1c 01 b0 18 c1 83     `1..0..p........
    14f8:	18 0c 60 31 01 04 10 31 80 d8 03 80 08 00 40 02     ..`1...1......@.
    1508:	00 10 00 80 ff f0 03 00 60 1c 03 00 60 0c 03 80     ........`...`...
    1518:	60 0c 00 ff f0 d2 49 24 93 00 00 80 80 40 20 10     `.....I$.....@ .
    1528:	18 0c 04 02 01 00 64 92 49 25 80 00 ff f0 48 ff     ......d.I%....H.
    1538:	00 40 20 1f fc 06 03 01 7f 80 80 40 20 1f e8 0c     .@ ........@ ...
    1548:	06 03 01 80 c0 60 3f e0 7f a0 08 02 00 80 20 08     .....`?....... .
    1558:	02 00 7f 80 00 80 40 2f f8 0c 06 03 01 80 c0 60     ......@/.......`
    1568:	2f f0 7f 40 60 30 1f fc 02 01 00 7f 80 7a 08 3e     /..@`0.......z.>
    1578:	82 08 20 82 08 20 7f 40 60 30 18 0c 06 03 01 7f     .. .. .@`0......
    1588:	80 40 20 17 f0 80 40 20 1f e8 0c 06 03 01 80 c0     .@ ...@ ........
    1598:	60 30 10 9f f0 04 00 01 04 10 41 04 10 41 04 10     `0........A..A..
    15a8:	7e 80 40 20 10 28 34 32 31 f0 8c 43 20 d0 20 88     ~.@ .(421..C . .
    15b8:	88 88 88 88 86 ff fd 02 06 04 0c 08 18 10 30 20     ..............0 
    15c8:	60 40 c0 81 81 02 ff 40 60 30 18 0c 06 03 01 80     `@.....@`0......
    15d8:	80 7f 40 60 30 18 0c 06 03 01 7f 00 ff 40 60 30     ..@`0........@`0
    15e8:	18 0c 06 03 01 ff 40 20 10 08 00 7f c0 60 30 18     ......@ .....`0.
    15f8:	0c 06 03 01 7f 80 40 20 10 08 7f 02 04 08 10 20     ......@ ....... 
    1608:	40 80 7f 40 60 10 07 f0 04 03 01 7f 00 82 08 3e     @..@`..........>
    1618:	82 08 20 82 08 1e 80 c0 60 30 18 0c 06 03 01 7f     .. .....`0......
    1628:	00 40 33 01 08 18 60 81 0c 0c c0 34 00 e0 06 00     .@3...`....4....
    1638:	40 c1 b0 e0 88 58 c4 64 43 23 20 b1 b0 70 70 18     @....X.dC# ..pp.
    1648:	38 0c 08 00 60 c6 30 6c 07 00 40 14 06 c1 8c 60     8...`.0l..@....`
    1658:	c0 80 c0 60 30 18 0c 06 03 01 7f 80 40 20 17 f0     ...`0.......@ ..
    1668:	ff 80 c0 c0 c0 81 81 81 80 ff 80 24 44 48 44 44     ...........$DHDD
    1678:	20 ff fe 42 22 21 32 22 40                           ..B"!2"@

00001681 <Orbitron_Light_16Glyphs>:
    1681:	00 00 01 01 05 00 00 01 00 01 0b 04 01 f5 03 00     ................
    1691:	04 02 07 01 f5 04 00 0c 0b 0f 01 f5 15 00 0b 0e     ................
    16a1:	0e 01 f3 29 00 0e 0c 11 01 f4 3e 00 0e 0b 11 01     ...)......>.....
    16b1:	f5 52 00 01 02 04 01 f5 53 00 03 0b 05 01 f5 58     .R......S......X
    16c1:	00 03 0b 05 00 f5 5d 00 07 07 08 00 f5 64 00 06     ......]......d..
    16d1:	06 09 01 f8 69 00 01 04 04 01 ff 6a 00 06 01 09     ....i......j....
    16e1:	01 fb 6b 00 01 01 04 01 ff 6c 00 08 0c 0b 01 f4     ..k......l......
    16f1:	78 00 0b 0b 0e 01 f5 88 00 05 0b 06 ff f5 8f 00     x...............
    1701:	0b 0b 0e 01 f5 9f 00 0c 0b 0f 01 f5 b0 00 0b 0b     ................
    1711:	0e 01 f5 c0 00 0b 0b 0e 01 f5 d0 00 0b 0b 0e 01     ................
    1721:	f5 e0 00 0a 0b 0b ff f5 ee 00 0b 0b 0e 01 f5 fe     ................
    1731:	00 0c 0b 0f 01 f5 0f 01 01 09 04 01 f7 11 01 01     ................
    1741:	0b 04 01 f7 13 01 07 09 0a 01 f7 1b 01 08 04 0b     ................
    1751:	01 fa 1f 01 07 09 09 01 f7 27 01 0a 0b 0c 00 f5     .........'......
    1761:	35 01 0b 0b 0e 01 f5 45 01 0b 0b 0e 01 f5 55 01     5......E......U.
    1771:	0b 0b 0e 01 f5 65 01 0c 0b 0e 01 f5 76 01 0b 0b     .....e......v...
    1781:	0e 01 f5 86 01 0b 0b 0d 01 f5 96 01 0b 0b 0c 01     ................
    1791:	f5 a6 01 0b 0b 0e 01 f5 b6 01 0c 0b 0f 01 f5 c7     ................
    17a1:	01 01 0b 04 01 f5 c9 01 0b 0b 0e 01 f5 d9 01 0b     ................
    17b1:	0b 0e 01 f5 e9 01 0c 0b 0d 01 f5 fa 01 0d 0b 10     ................
    17c1:	01 f5 0c 02 0b 0b 0e 01 f5 1c 02 0b 0b 0e 01 f5     ................
    17d1:	2c 02 0b 0b 0e 01 f5 3c 02 0d 0b 0f 01 f5 4e 02     ,......<......N.
    17e1:	0b 0b 0e 01 f5 5e 02 0b 0b 0e 01 f5 6e 02 0c 0b     .....^......n...
    17f1:	0f 01 f5 7f 02 0b 0b 0e 01 f5 8f 02 10 0b 11 00     ................
    1801:	f5 a5 02 13 0b 14 00 f5 c0 02 0d 0b 0e 00 f5 d2     ................
    1811:	02 0d 0b 0e 00 f5 e4 02 0c 0b 0f 01 f5 f5 02 03     ................
    1821:	0b 05 01 f5 fa 02 08 0c 0b 01 f4 06 03 03 0b 05     ................
    1831:	00 f5 0b 03 01 01 01 00 00 0c 03 0c 01 0f 01 00     ................
    1841:	0e 03 03 02 04 00 f0 0f 03 09 09 0c 01 f7 1a 03     ................
    1851:	09 0c 0c 01 f4 28 03 0a 09 0c 01 f7 34 03 09 0c     .....(......4...
    1861:	0c 01 f4 42 03 09 09 0c 01 f7 4d 03 06 0c 07 01     ...B......M.....
    1871:	f4 56 03 09 0d 0c 01 f7 65 03 09 0c 0c 01 f4 73     .V......e......s
    1881:	03 01 0c 04 01 f4 75 03 06 10 05 fd f4 81 03 09     ......u.........
    1891:	0c 0b 01 f4 8f 03 04 0c 06 01 f4 95 03 0f 09 12     ................
    18a1:	01 f7 a6 03 09 09 0c 01 f7 b1 03 09 09 0c 01 f7     ................
    18b1:	bc 03 09 0d 0c 01 f7 cb 03 09 0d 0c 01 f7 da 03     ................
    18c1:	07 09 09 01 f7 e2 03 09 09 0c 01 f7 ed 03 06 0c     ................
    18d1:	07 01 f4 f6 03 09 09 0c 01 f7 01 04 0d 09 0e 00     ................
    18e1:	f7 10 04 11 09 12 00 f7 24 04 0b 09 0c 00 f7 31     ........$......1
    18f1:	04 09 0d 0c 01 f7 40 04 09 09 0c 01 f7 4b 04 04     ......@......K..
    1901:	0b 05 00 f5 51 04 01 0f 04 01 f3 53 04 04 0b 06     ....Q......S....
    1911:	00 f5                                               ..

00001913 <Orbitron_Light_16>:
    1913:	28 12 81 16 20 7e 10                                (... ~.

0000191a <font>:
    191a:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
    192a:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
    193a:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
    194a:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
    195a:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
    196a:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
    197a:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
    198a:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
    199a:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
    19aa:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
    19ba:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
    19ca:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
    19da:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
    19ea:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
    19fa:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
    1a0a:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
    1a1a:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
    1a2a:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
    1a3a:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
    1a4a:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
    1a5a:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
    1a6a:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
    1a7a:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
    1a8a:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
    1a9a:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
    1aaa:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
    1aba:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
    1aca:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
    1ada:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
    1aea:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
    1afa:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
    1b0a:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
    1b1a:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
    1b2a:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
    1b3a:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
    1b4a:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
    1b5a:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
    1b6a:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
    1b7a:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
    1b8a:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
    1b9a:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
    1baa:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
    1bba:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
    1bca:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
    1bda:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
    1bea:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
    1bfa:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
    1c0a:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
    1c1a:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
    1c2a:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
    1c3a:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
    1c4a:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
    1c5a:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
    1c6a:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
    1c7a:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
    1c8a:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
    1c9a:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
    1caa:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
    1cba:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
    1cca:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
    1cda:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
    1cea:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
    1cfa:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
    1d0a:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
    1d1a:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
    1d2a:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
    1d3a:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
    1d4a:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
    1d5a:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
    1d6a:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
    1d7a:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
    1d8a:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
    1d9a:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
    1daa:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
    1dba:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
    1dca:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
    1dda:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
    1dea:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
    1dfa:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
    1e0a:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

00001e1a <ILI932x_regValues>:
    1e1a:	00 00 01 00 ff 00 32 00 01 00 00 01 02 00 00 07     ......2.........
    1e2a:	03 00 30 10 04 00 00 00 08 00 02 02 09 00 00 00     ..0.............
    1e3a:	0a 00 00 00 0c 00 00 00 0d 00 00 00 0f 00 00 00     ................
    1e4a:	10 00 00 00 11 00 07 00 12 00 00 00 13 00 00 00     ................
    1e5a:	ff 00 c8 00 10 00 90 16 11 00 27 02 ff 00 32 00     ..........'...2.
    1e6a:	12 00 1a 00 ff 00 32 00 13 00 00 18 29 00 2a 00     ......2.....).*.
    1e7a:	ff 00 32 00 30 00 00 00 31 00 00 00 32 00 00 00     ..2.0...1...2...
    1e8a:	35 00 06 02 36 00 08 08 37 00 07 00 38 00 01 02     5...6...7...8...
    1e9a:	39 00 00 00 3c 00 00 00 3d 00 00 00 20 00 00 00     9...<...=... ...
    1eaa:	21 00 00 00 50 00 00 00 51 00 ef 00 52 00 00 00     !...P...Q...R...
    1eba:	53 00 3f 01 60 00 00 a7 61 00 03 00 6a 00 00 00     S.?.`...a...j...
    1eca:	90 00 10 00 92 00 00 00 93 00 03 00 95 00 00 11     ................
    1eda:	97 00 00 00 98 00 00 00 07 00 33 01                 ..........3.

00001ee6 <ILI9341_regValues>:
    1ee6:	01 00 cb 05 39 2c 00 34 02 cf 03 00 c1 30 e8 03     ....9,.4.....0..
    1ef6:	85 00 78 ea 02 00 00 ed 04 64 03 12 81 f7 01 20     ..x......d..... 
    1f06:	c0 01 23 c1 01 10 c5 02 3e 28 c7 01 86 36 01 48     ..#.....>(...6.H
    1f16:	3a 01 55 b1 02 00 18 b6 03 08 82 27 f2 01 00 26     :.U........'...&
    1f26:	01 01 e0 0f 0f 31 2b 0c 0e 08 4e f1 37 07 10 03     .....1+...N.7...
    1f36:	0e 09 00 e1 0f 00 0e 14 03 11 07 31 c1 48 08 0f     ...........1.H..
    1f46:	0c 31 36 0f 11 00 ff 96 29 00 2c 00                 .16.....).,.

00001f52 <HX8347G_regValues>:
    1f52:	2e 89 29 8f 2b 02 e2 00 e4 01 e5 10 e6 01 e7 10     ..).+...........
    1f62:	e8 70 f2 00 ea 00 eb 20 ec 3c ed c8 e9 38 f1 01     .p..... .<...8..
    1f72:	1b 1a 1a 02 24 61 25 5c 18 36 19 01 1f 88 ff 05     ....$a%\.6......
    1f82:	1f 80 ff 05 1f 90 ff 05 1f d4 ff 05 17 05 36 09     ..............6.
    1f92:	28 38 ff 28 28 3c 02 00 03 00 04 00 05 ef 06 00     (8.((<..........
    1fa2:	07 00 08 01 09 3f                                   .....?

00001fa8 <HX8357D_regValues>:
    1fa8:	01 00 b9 03 ff 83 57 ff fa b3 04 00 00 06 06 b6     ......W.........
    1fb8:	01 25 b0 01 68 cc 01 05 b1 06 00 15 1c 1c 83 aa     .%..h...........
    1fc8:	c0 06 50 50 01 3c 1e 08 b4 07 02 40 00 2a 2a 0d     ..PP.<.....@.**.
    1fd8:	78 3a 01 55 36 01 c0 35 01 00 44 02 00 02 11 00     x:.U6..5..D.....
    1fe8:	ff 96 29 00 ff 32                                   ..)..2

00001fee <ILI9327_regValues>:
    1fee:	01 00 e9 01 20 11 00 ff 64 d1 03 00 71 19 d0 03     .... ...d...q...
    1ffe:	07 01 08 36 01 48 3a 01 05 c1 04 10 10 02 02 c0     ...6.H:.........
    200e:	06 00 31 00 00 01 02 c5 01 04 d2 02 01 44 c8 0f     ..1..........D..
    201e:	04 67 35 04 08 06 24 01 37 40 03 10 08 80 00 2a     .g5...$.7@.....*
    202e:	04 00 00 00 ef 2b 05 00 00 01 3f 8f 29 00 2c 00     .....+....?.).,.

0000203e <ILI9488_regValues>:
    203e:	01 00 e0 0f 00 07 10 09 17 0b 40 8a 4b 0a 0d 0f     ..........@.K...
    204e:	15 16 0f e1 0f 00 1a 1b 02 0d 05 30 35 43 02 0a     ...........05C..
    205e:	09 32 36 0f b1 01 a0 b4 01 02 c0 02 17 15 c1 01     .26.............
    206e:	41 c5 03 00 0a 80 b6 01 02 36 01 48 3a 01 55 e9     A........6.H:.U.
    207e:	01 00 f7 04 a9 51 2c 82 11 00 ff 78 29 00           .....Q,....x).

0000208c <S6D0154_regValues>:
    208c:	11 00 1a 00 12 00 21 31 13 00 6c 00 14 00 49 42     ......!1..l...IB
    209c:	10 00 00 08 ff 00 0a 00 11 00 1a 01 ff 00 0a 00     ................
    20ac:	11 00 1a 03 ff 00 0a 00 11 00 1a 07 ff 00 0a 00     ................
    20bc:	11 00 1a 0f ff 00 14 00 11 00 3a 0f ff 00 1e 00     ..........:.....
    20cc:	01 00 28 01 02 00 00 01 03 00 30 10 07 00 12 10     ..(.......0.....
    20dc:	08 00 03 03 0b 00 00 11 0c 00 00 00 0f 00 01 18     ................
    20ec:	15 00 20 00 07 00 12 00 ff 00 28 00 07 00 13 00     .. .......(.....
    20fc:	07 00 17 00                                         ....

00002100 <__ctors_end>:
    2100:	11 24       	eor	r1, r1
    2102:	1f be       	out	0x3f, r1	; 63
    2104:	cf e5       	ldi	r28, 0x5F	; 95
    2106:	d8 e0       	ldi	r29, 0x08	; 8
    2108:	de bf       	out	0x3e, r29	; 62
    210a:	cd bf       	out	0x3d, r28	; 61

0000210c <__do_copy_data>:
    210c:	10 e0       	ldi	r17, 0x00	; 0
    210e:	a0 e6       	ldi	r26, 0x60	; 96
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	ea e8       	ldi	r30, 0x8A	; 138
    2114:	f3 e5       	ldi	r31, 0x53	; 83
    2116:	02 c0       	rjmp	.+4      	; 0x211c <.do_copy_data_start>

00002118 <.do_copy_data_loop>:
    2118:	05 90       	lpm	r0, Z+
    211a:	0d 92       	st	X+, r0

0000211c <.do_copy_data_start>:
    211c:	aa 38       	cpi	r26, 0x8A	; 138
    211e:	b1 07       	cpc	r27, r17
    2120:	d9 f7       	brne	.-10     	; 0x2118 <.do_copy_data_loop>

00002122 <__do_clear_bss>:
    2122:	11 e0       	ldi	r17, 0x01	; 1
    2124:	aa e8       	ldi	r26, 0x8A	; 138
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	01 c0       	rjmp	.+2      	; 0x212c <.do_clear_bss_start>

0000212a <.do_clear_bss_loop>:
    212a:	1d 92       	st	X+, r1

0000212c <.do_clear_bss_start>:
    212c:	a5 35       	cpi	r26, 0x55	; 85
    212e:	b1 07       	cpc	r27, r17
    2130:	e1 f7       	brne	.-8      	; 0x212a <.do_clear_bss_loop>
    2132:	0e 94 8d 11 	call	0x231a	; 0x231a <main>
    2136:	0c 94 c3 29 	jmp	0x5386	; 0x5386 <_exit>

0000213a <__bad_interrupt>:
    213a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000213e <__vector_13>:




ISR (USART_RXC_vect)
{
    213e:	1f 92       	push	r1
    2140:	0f 92       	push	r0
    2142:	0f b6       	in	r0, 0x3f	; 63
    2144:	0f 92       	push	r0
    2146:	11 24       	eor	r1, r1
    2148:	8f 93       	push	r24
    214a:	9f 93       	push	r25
    214c:	ef 93       	push	r30
    214e:	ff 93       	push	r31
	  uart_busy = 50;
    2150:	82 e3       	ldi	r24, 0x32	; 50
    2152:	80 93 88 00 	sts	0x0088, r24
	  uart_cache[uart_byte_count++] = UDR;
    2156:	80 91 99 00 	lds	r24, 0x0099
    215a:	e8 2f       	mov	r30, r24
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	9c b1       	in	r25, 0x0c	; 12
    2160:	e8 50       	subi	r30, 0x08	; 8
    2162:	ff 4f       	sbci	r31, 0xFF	; 255
    2164:	90 83       	st	Z, r25
    2166:	8f 5f       	subi	r24, 0xFF	; 255
    2168:	80 93 99 00 	sts	0x0099, r24
	  if( uart_byte_count == UART_PKTSIZE ) {
    216c:	80 91 99 00 	lds	r24, 0x0099
    2170:	80 31       	cpi	r24, 0x10	; 16
    2172:	29 f4       	brne	.+10     	; 0x217e <__vector_13+0x40>
          uart_byte_count = 0;
    2174:	10 92 99 00 	sts	0x0099, r1
          uart_pkt_rdy = 1;
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	80 93 9b 00 	sts	0x009B, r24
      }  // the last byte of packet received
}
    217e:	ff 91       	pop	r31
    2180:	ef 91       	pop	r30
    2182:	9f 91       	pop	r25
    2184:	8f 91       	pop	r24
    2186:	0f 90       	pop	r0
    2188:	0f be       	out	0x3f, r0	; 63
    218a:	0f 90       	pop	r0
    218c:	1f 90       	pop	r1
    218e:	18 95       	reti

00002190 <read_adc>:
{
#ifdef __TST
  uint16_t v = 0, i = 0;
  while(i < 5) {
#endif
cli();
    2190:	f8 94       	cli
  ADMUX = adc_input | (ADC_VREF_TYPE & 0xff);
    2192:	80 64       	ori	r24, 0x40	; 64
    2194:	87 b9       	out	0x07, r24	; 7
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2196:	85 e0       	ldi	r24, 0x05	; 5
    2198:	8a 95       	dec	r24
    219a:	f1 f7       	brne	.-4      	; 0x2198 <read_adc+0x8>
  _delay_us(10);            // Delay needed for the stabilization of the ADC input voltage
  ADCSRA |= 0x40;           // Start the AD conversion
    219c:	36 9a       	sbi	0x06, 6	; 6
  while ((ADCSRA & 0x10) == 0);    // Wait for the AD conversion to complete
    219e:	34 9b       	sbis	0x06, 4	; 6
    21a0:	fe cf       	rjmp	.-4      	; 0x219e <read_adc+0xe>
  ADCSRA |= 0x10;
    21a2:	34 9a       	sbi	0x06, 4	; 6
sei();
    21a4:	78 94       	sei
         break;
        }
	      }
   return v;
#else
   return ADCW;
    21a6:	24 b1       	in	r18, 0x04	; 4
    21a8:	35 b1       	in	r19, 0x05	; 5
#endif
}
    21aa:	c9 01       	movw	r24, r18
    21ac:	08 95       	ret

000021ae <touchRestore>:
//*****************************************************

// reset touchpad
static  void touchRestore(void)
{
          TOUCHPIN_D  |=  XM | YP;
    21ae:	24 b3       	in	r18, 0x14	; 20
    21b0:	80 91 81 00 	lds	r24, 0x0081
    21b4:	90 91 82 00 	lds	r25, 0x0082
    21b8:	89 2b       	or	r24, r25
    21ba:	28 2b       	or	r18, r24
    21bc:	24 bb       	out	0x14, r18	; 20
          TOUCHPORT_D |=  XM | YP;
    21be:	95 b3       	in	r25, 0x15	; 21
    21c0:	89 2b       	or	r24, r25
    21c2:	85 bb       	out	0x15, r24	; 21
          TOUCHPIN_A  |=  XP | YM;
    21c4:	2a b3       	in	r18, 0x1a	; 26
    21c6:	80 91 84 00 	lds	r24, 0x0084
    21ca:	90 91 83 00 	lds	r25, 0x0083
    21ce:	89 2b       	or	r24, r25
    21d0:	28 2b       	or	r18, r24
    21d2:	2a bb       	out	0x1a, r18	; 26
          TOUCHPORT_A |=  XP | YM;
    21d4:	9b b3       	in	r25, 0x1b	; 27
    21d6:	89 2b       	or	r24, r25
    21d8:	8b bb       	out	0x1b, r24	; 27
}
    21da:	08 95       	ret

000021dc <presets_apply>:
}
//*****************************************************

//         event forwarding (sorta)
static void presets_apply(uint16_t p_keyword) 
{
    21dc:	ef 92       	push	r14
    21de:	ff 92       	push	r15
    21e0:	0f 93       	push	r16
    21e2:	1f 93       	push	r17
    21e4:	cf 93       	push	r28
    21e6:	df 93       	push	r29
    21e8:	7c 01       	movw	r14, r24
    21ea:	c0 e0       	ldi	r28, 0x00	; 0
    21ec:	d0 e0       	ldi	r29, 0x00	; 0
  uint16_t i, x; 
	  for (i = 0; i < 16; i++)   {
           // check single bit value in the keyword with a bitmask
		   x = (p_keyword >>  i) & 1;   
		   if(x == 0) continue;
    21ee:	c7 01       	movw	r24, r14
    21f0:	0c 2e       	mov	r0, r28
    21f2:	02 c0       	rjmp	.+4      	; 0x21f8 <presets_apply+0x1c>
    21f4:	96 95       	lsr	r25
    21f6:	87 95       	ror	r24
    21f8:	0a 94       	dec	r0
    21fa:	e2 f7       	brpl	.-8      	; 0x21f4 <presets_apply+0x18>
    21fc:	80 ff       	sbrs	r24, 0
    21fe:	55 c0       	rjmp	.+170    	; 0x22aa <presets_apply+0xce>
		   else x = i;
		 // then call the appropriate event
	switch (x) {
    2200:	c2 30       	cpi	r28, 0x02	; 2
    2202:	d1 05       	cpc	r29, r1
    2204:	71 f1       	breq	.+92     	; 0x2262 <presets_apply+0x86>
    2206:	c3 30       	cpi	r28, 0x03	; 3
    2208:	d1 05       	cpc	r29, r1
    220a:	38 f4       	brcc	.+14     	; 0x221a <presets_apply+0x3e>
    220c:	20 97       	sbiw	r28, 0x00	; 0
    220e:	69 f0       	breq	.+26     	; 0x222a <presets_apply+0x4e>
    2210:	c1 30       	cpi	r28, 0x01	; 1
    2212:	d1 05       	cpc	r29, r1
    2214:	09 f0       	breq	.+2      	; 0x2218 <presets_apply+0x3c>
    2216:	49 c0       	rjmp	.+146    	; 0x22aa <presets_apply+0xce>
    2218:	11 c0       	rjmp	.+34     	; 0x223c <presets_apply+0x60>
    221a:	c4 30       	cpi	r28, 0x04	; 4
    221c:	d1 05       	cpc	r29, r1
    221e:	31 f1       	breq	.+76     	; 0x226c <presets_apply+0x90>
    2220:	c5 30       	cpi	r28, 0x05	; 5
    2222:	d1 05       	cpc	r29, r1
    2224:	09 f0       	breq	.+2      	; 0x2228 <presets_apply+0x4c>
    2226:	41 c0       	rjmp	.+130    	; 0x22aa <presets_apply+0xce>
    2228:	34 c0       	rjmp	.+104    	; 0x2292 <presets_apply+0xb6>
		case 0:
				 setCursor(RIGHT, 130); print("8-bit");
    222a:	8f e0       	ldi	r24, 0x0F	; 15
    222c:	97 e2       	ldi	r25, 0x27	; 39
    222e:	62 e8       	ldi	r22, 0x82	; 130
    2230:	70 e0       	ldi	r23, 0x00	; 0
    2232:	0e 94 10 14 	call	0x2820	; 0x2820 <setCursor>
    2236:	80 e6       	ldi	r24, 0x60	; 96
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	10 c0       	rjmp	.+32     	; 0x225c <presets_apply+0x80>
				 break;
		case 1:   
				setColor(WHITE); 
    223c:	8f ef       	ldi	r24, 0xFF	; 255
    223e:	9f ef       	ldi	r25, 0xFF	; 255
    2240:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <setColor>
                _setFont(OCR_A_Extended_M);
    2244:	84 e5       	ldi	r24, 0x54	; 84
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <_setFont>
				setCursor( 35, 195); print("UTFT library");
    224c:	83 e2       	ldi	r24, 0x23	; 35
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	63 ec       	ldi	r22, 0xC3	; 195
    2252:	70 e0       	ldi	r23, 0x00	; 0
    2254:	0e 94 10 14 	call	0x2820	; 0x2820 <setCursor>
    2258:	86 e6       	ldi	r24, 0x66	; 102
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	0e 94 0a 1b 	call	0x3614	; 0x3614 <print>
    2260:	24 c0       	rjmp	.+72     	; 0x22aa <presets_apply+0xce>
				 break;
		case 2:   
				 fillScreen(BLACK);
    2262:	80 e0       	ldi	r24, 0x00	; 0
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	0e 94 21 27 	call	0x4e42	; 0x4e42 <fillScreen>
    226a:	1f c0       	rjmp	.+62     	; 0x22aa <presets_apply+0xce>
				 break;
		case 3:
				 /* take action according to preset #3 etc... */ 
				 break;
		case 4: 
		    		setAddrWindow(0, 0, 240, 320);
    226c:	80 e0       	ldi	r24, 0x00	; 0
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	60 e0       	ldi	r22, 0x00	; 0
    2272:	70 e0       	ldi	r23, 0x00	; 0
    2274:	40 ef       	ldi	r20, 0xF0	; 240
    2276:	50 e0       	ldi	r21, 0x00	; 0
    2278:	20 e4       	ldi	r18, 0x40	; 64
    227a:	31 e0       	ldi	r19, 0x01	; 1
    227c:	0e 94 0e 24 	call	0x481c	; 0x481c <setAddrWindow>
                    		flood(WHITE, 9000);
    2280:	8f ef       	ldi	r24, 0xFF	; 255
    2282:	9f ef       	ldi	r25, 0xFF	; 255
    2284:	48 e2       	ldi	r20, 0x28	; 40
    2286:	53 e2       	ldi	r21, 0x23	; 35
    2288:	60 e0       	ldi	r22, 0x00	; 0
    228a:	70 e0       	ldi	r23, 0x00	; 0
    228c:	0e 94 40 22 	call	0x4480	; 0x4480 <flood>
    2290:	0c c0       	rjmp	.+24     	; 0x22aa <presets_apply+0xce>
		 		 break; 
		case 5:
		   		fillRect(10, 10, 100, 100, BLUE);
    2292:	8a e0       	ldi	r24, 0x0A	; 10
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	6a e0       	ldi	r22, 0x0A	; 10
    2298:	70 e0       	ldi	r23, 0x00	; 0
    229a:	44 e6       	ldi	r20, 0x64	; 100
    229c:	50 e0       	ldi	r21, 0x00	; 0
    229e:	24 e6       	ldi	r18, 0x64	; 100
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	0f e1       	ldi	r16, 0x1F	; 31
    22a4:	10 e0       	ldi	r17, 0x00	; 0
    22a6:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <fillRect>

//         event forwarding (sorta)
static void presets_apply(uint16_t p_keyword) 
{
  uint16_t i, x; 
	  for (i = 0; i < 16; i++)   {
    22aa:	21 96       	adiw	r28, 0x01	; 1
    22ac:	c0 31       	cpi	r28, 0x10	; 16
    22ae:	d1 05       	cpc	r29, r1
    22b0:	09 f0       	breq	.+2      	; 0x22b4 <presets_apply+0xd8>
    22b2:	9d cf       	rjmp	.-198    	; 0x21ee <presets_apply+0x12>
		case 15:
				 break;
            }
	}
		  
}
    22b4:	df 91       	pop	r29
    22b6:	cf 91       	pop	r28
    22b8:	1f 91       	pop	r17
    22ba:	0f 91       	pop	r16
    22bc:	ff 90       	pop	r15
    22be:	ef 90       	pop	r14
    22c0:	08 95       	ret

000022c2 <numprint>:
           stage = 0;
       } // do nothing for next n iterations                
}
//*****************************************************

 static void numprint( uint32_t num, uint8_t base) {
    22c2:	0f 93       	push	r16
    22c4:	1f 93       	push	r17
    22c6:	df 93       	push	r29
    22c8:	cf 93       	push	r28
    22ca:	cd b7       	in	r28, 0x3d	; 61
    22cc:	de b7       	in	r29, 0x3e	; 62
    22ce:	29 97       	sbiw	r28, 0x09	; 9
    22d0:	0f b6       	in	r0, 0x3f	; 63
    22d2:	f8 94       	cli
    22d4:	de bf       	out	0x3e, r29	; 62
    22d6:	0f be       	out	0x3f, r0	; 63
    22d8:	cd bf       	out	0x3d, r28	; 61
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
 char buf[9] = {0}; 
    22de:	8e 01       	movw	r16, r28
    22e0:	0f 5f       	subi	r16, 0xFF	; 255
    22e2:	1f 4f       	sbci	r17, 0xFF	; 255
    22e4:	29 e0       	ldi	r18, 0x09	; 9
    22e6:	f8 01       	movw	r30, r16
    22e8:	11 92       	st	Z+, r1
    22ea:	2a 95       	dec	r18
    22ec:	e9 f7       	brne	.-6      	; 0x22e8 <numprint+0x26>
 itoa(num, buf + 1, base);
    22ee:	be 01       	movw	r22, r28
    22f0:	6e 5f       	subi	r22, 0xFE	; 254
    22f2:	7f 4f       	sbci	r23, 0xFF	; 255
    22f4:	50 e0       	ldi	r21, 0x00	; 0
    22f6:	0e 94 92 29 	call	0x5324	; 0x5324 <itoa>
 buf[0] = ' ';      
    22fa:	80 e2       	ldi	r24, 0x20	; 32
    22fc:	89 83       	std	Y+1, r24	; 0x01
 print(buf);
    22fe:	c8 01       	movw	r24, r16
    2300:	0e 94 0a 1b 	call	0x3614	; 0x3614 <print>
}
    2304:	29 96       	adiw	r28, 0x09	; 9
    2306:	0f b6       	in	r0, 0x3f	; 63
    2308:	f8 94       	cli
    230a:	de bf       	out	0x3e, r29	; 62
    230c:	0f be       	out	0x3f, r0	; 63
    230e:	cd bf       	out	0x3d, r28	; 61
    2310:	cf 91       	pop	r28
    2312:	df 91       	pop	r29
    2314:	1f 91       	pop	r17
    2316:	0f 91       	pop	r16
    2318:	08 95       	ret

0000231a <main>:
	}
		  
}
//*****************************************************
 /* */
int main(void) {
    231a:	bf 92       	push	r11
    231c:	cf 92       	push	r12
    231e:	df 92       	push	r13
    2320:	ef 92       	push	r14
    2322:	ff 92       	push	r15
    2324:	0f 93       	push	r16
    2326:	1f 93       	push	r17
    2328:	cf 93       	push	r28
    232a:	df 93       	push	r29
//*****************************************************

static void init_io(void) 
{
	/* first set all pins to input */
    PORTA = 0xFF;   													/* activate all pull-ups */
    232c:	8f ef       	ldi	r24, 0xFF	; 255
    232e:	8b bb       	out	0x1b, r24	; 27
    DDRA  = 0xFF;    														/* all pins are output */
    2330:	8a bb       	out	0x1a, r24	; 26
    PORTB = 0xFF;   													/* activate all pull-ups */
    2332:	88 bb       	out	0x18, r24	; 24
    DDRB  = 0x00;       													/* all pins input */
    2334:	17 ba       	out	0x17, r1	; 23
    PORTC = 0xFF;   													/* activate all pull-ups */
    2336:	85 bb       	out	0x15, r24	; 21
    DDRC  = 0xFF;   													/* pins are output */
    2338:	84 bb       	out	0x14, r24	; 20
    PORTD = 0xFF;   													/* activate all pull-ups */
    233a:	82 bb       	out	0x12, r24	; 18
    DDRD  = 0;    														/* all pins input */
    233c:	11 ba       	out	0x11, r1	; 17
	
      ADMUX |= (1 << REFS0);  
    233e:	3e 9a       	sbi	0x07, 6	; 7
       // ADC Enable and prescaler of 128 
       // 16000000/128 = 125000 
      ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); 
    2340:	87 e8       	ldi	r24, 0x87	; 135
    2342:	86 b9       	out	0x06, r24	; 6

//*****************************************************

static void timer_init (void)
{
cli();
    2344:	f8 94       	cli
    TCCR1B |= (1 << CS11);
    2346:	8e b5       	in	r24, 0x2e	; 46
    2348:	82 60       	ori	r24, 0x02	; 2
    234a:	8e bd       	out	0x2e, r24	; 46
    // initialize counter
    TCNT1 = 0;
    234c:	1d bc       	out	0x2d, r1	; 45
    234e:	1c bc       	out	0x2c, r1	; 44
    // enable overflow interrupt
    // initialize overflow counter variable
    ttl_overflows = 0;
    2350:	10 92 a0 00 	sts	0x00A0, r1
    2354:	10 92 9f 00 	sts	0x009F, r1
	TCCR2 |= (1 << WGM21) | (1 << CS21);
    2358:	85 b5       	in	r24, 0x25	; 37
    235a:	8a 60       	ori	r24, 0x0A	; 10
    235c:	85 bd       	out	0x25, r24	; 37
	// initialize counter
    OCR2   =   8;  // Set CTC compare value to 250 kHz
    235e:	88 e0       	ldi	r24, 0x08	; 8
    2360:	83 bd       	out	0x23, r24	; 35
 // enable global interrupts
sei();
    2362:	78 94       	sei


static void uart_init(void) 
{
 // Set baudrate 
    UBRRH = (BAUDRATE >> 8);
    2364:	10 bc       	out	0x20, r1	; 32
    UBRRL = BAUDRATE;
    2366:	89 b9       	out	0x09, r24	; 9
    UCSRB |= (1 << RXEN) | (1 << TXEN);      // Enable receiver and transmitter
    2368:	8a b1       	in	r24, 0x0a	; 10
    236a:	88 61       	ori	r24, 0x18	; 24
    236c:	8a b9       	out	0x0a, r24	; 10
    UCSRB |= (1 << RXCIE);                   // Enable the receiver interrupt
    236e:	57 9a       	sbi	0x0a, 7	; 10
    UCSRC |= (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);    // Set frame: 8data, 1 stp
    2370:	80 b5       	in	r24, 0x20	; 32
    2372:	86 68       	ori	r24, 0x86	; 134
    2374:	80 bd       	out	0x20, r24	; 32
   init_io();
   timer_init();
   uart_init();
    
	 //TFT:
    reset();
    2376:	0e 94 0c 22 	call	0x4418	; 0x4418 <reset>
#ifndef TSTOUCH
	 tft_init();
    237a:	0e 94 b8 21 	call	0x4370	; 0x4370 <tft_init>
     begin();
    237e:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <begin>
}
//*****************************************************

static void TSinit(void) 
 {
	  if(id == 0x0154 || id == 0x9328 || forceAltTouchPin)  { // driver == ID_S6D0154
    2382:	80 91 8a 00 	lds	r24, 0x008A
    2386:	90 91 8b 00 	lds	r25, 0x008B
    238a:	a0 91 8c 00 	lds	r26, 0x008C
    238e:	b0 91 8d 00 	lds	r27, 0x008D
    2392:	84 35       	cpi	r24, 0x54	; 84
    2394:	21 e0       	ldi	r18, 0x01	; 1
    2396:	92 07       	cpc	r25, r18
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	a2 07       	cpc	r26, r18
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	b2 07       	cpc	r27, r18
    23a0:	49 f0       	breq	.+18     	; 0x23b4 <main+0x9a>
    23a2:	88 52       	subi	r24, 0x28	; 40
    23a4:	93 49       	sbci	r25, 0x93	; 147
    23a6:	a0 40       	sbci	r26, 0x00	; 0
    23a8:	b0 40       	sbci	r27, 0x00	; 0
    23aa:	21 f0       	breq	.+8      	; 0x23b4 <main+0x9a>
    23ac:	80 91 86 00 	lds	r24, 0x0086
    23b0:	88 23       	and	r24, r24
    23b2:	91 f0       	breq	.+36     	; 0x23d8 <main+0xbe>
      	   YP  =  (1 << PC3);     
    23b4:	88 e0       	ldi	r24, 0x08	; 8
    23b6:	80 93 81 00 	sts	0x0081, r24
	   XM  =  (1 << PC4);  
    23ba:	80 e1       	ldi	r24, 0x10	; 16
    23bc:	80 93 82 00 	sts	0x0082, r24
	   XP  =  (1 << PA7);   
    23c0:	80 e8       	ldi	r24, 0x80	; 128
    23c2:	80 93 83 00 	sts	0x0083, r24
	   YM  =  (1 << PA6);  
    23c6:	80 e4       	ldi	r24, 0x40	; 64
    23c8:	80 93 84 00 	sts	0x0084, r24
	   CH0 =  6;     
    23cc:	86 e0       	ldi	r24, 0x06	; 6
    23ce:	80 93 8f 00 	sts	0x008F, r24
	   CH1 =  7;  
    23d2:	87 e0       	ldi	r24, 0x07	; 7
    23d4:	80 93 85 00 	sts	0x0085, r24
#ifndef TSTOUCH
	 tft_init();
     begin();
#endif
     TSinit();
     setRotation(3); //
    23d8:	83 e0       	ldi	r24, 0x03	; 3
    23da:	0e 94 fc 24 	call	0x49f8	; 0x49f8 <setRotation>
     fillScreen(BLACK); fillScreen(WHITE);
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	0e 94 21 27 	call	0x4e42	; 0x4e42 <fillScreen>
    23e6:	8f ef       	ldi	r24, 0xFF	; 255
    23e8:	9f ef       	ldi	r25, 0xFF	; 255
    23ea:	0e 94 21 27 	call	0x4e42	; 0x4e42 <fillScreen>
    23ee:	14 e0       	ldi	r17, 0x04	; 4
    23f0:	b1 2e       	mov	r11, r17
static void draw_btns(uint8_t y, uint16_t color_0, uint16_t color_1)
{
 uint8_t i, x = 4;
     if(!y) y = 4;
	for(i = 0; i < 3; i++)     {
	fillRoundRect(x, y, 102, 75, 7, color_1);
    23f2:	cb 2c       	mov	r12, r11
    23f4:	dd 24       	eor	r13, r13
    23f6:	84 e0       	ldi	r24, 0x04	; 4
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	b6 01       	movw	r22, r12
    23fc:	46 e6       	ldi	r20, 0x66	; 102
    23fe:	50 e0       	ldi	r21, 0x00	; 0
    2400:	2b e4       	ldi	r18, 0x4B	; 75
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	07 e0       	ldi	r16, 0x07	; 7
    2406:	10 e0       	ldi	r17, 0x00	; 0
    2408:	b8 e1       	ldi	r27, 0x18	; 24
    240a:	eb 2e       	mov	r14, r27
    240c:	b6 ec       	ldi	r27, 0xC6	; 198
    240e:	fb 2e       	mov	r15, r27
    2410:	0e 94 cd 19 	call	0x339a	; 0x339a <fillRoundRect>
	drawRoundRect(x, y, 102, 75, 7, color_0);
    2414:	84 e0       	ldi	r24, 0x04	; 4
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	b6 01       	movw	r22, r12
    241a:	46 e6       	ldi	r20, 0x66	; 102
    241c:	50 e0       	ldi	r21, 0x00	; 0
    241e:	2b e4       	ldi	r18, 0x4B	; 75
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	ee 24       	eor	r14, r14
    2424:	ff 24       	eor	r15, r15
    2426:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <drawRoundRect>
static void draw_btns(uint8_t y, uint16_t color_0, uint16_t color_1)
{
 uint8_t i, x = 4;
     if(!y) y = 4;
	for(i = 0; i < 3; i++)     {
	fillRoundRect(x, y, 102, 75, 7, color_1);
    242a:	8d e6       	ldi	r24, 0x6D	; 109
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	b6 01       	movw	r22, r12
    2430:	46 e6       	ldi	r20, 0x66	; 102
    2432:	50 e0       	ldi	r21, 0x00	; 0
    2434:	2b e4       	ldi	r18, 0x4B	; 75
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	a8 e1       	ldi	r26, 0x18	; 24
    243a:	ea 2e       	mov	r14, r26
    243c:	a6 ec       	ldi	r26, 0xC6	; 198
    243e:	fa 2e       	mov	r15, r26
    2440:	0e 94 cd 19 	call	0x339a	; 0x339a <fillRoundRect>
	drawRoundRect(x, y, 102, 75, 7, color_0);
    2444:	8d e6       	ldi	r24, 0x6D	; 109
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	b6 01       	movw	r22, r12
    244a:	46 e6       	ldi	r20, 0x66	; 102
    244c:	50 e0       	ldi	r21, 0x00	; 0
    244e:	2b e4       	ldi	r18, 0x4B	; 75
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	ee 24       	eor	r14, r14
    2454:	ff 24       	eor	r15, r15
    2456:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <drawRoundRect>
static void draw_btns(uint8_t y, uint16_t color_0, uint16_t color_1)
{
 uint8_t i, x = 4;
     if(!y) y = 4;
	for(i = 0; i < 3; i++)     {
	fillRoundRect(x, y, 102, 75, 7, color_1);
    245a:	86 ed       	ldi	r24, 0xD6	; 214
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	b6 01       	movw	r22, r12
    2460:	46 e6       	ldi	r20, 0x66	; 102
    2462:	50 e0       	ldi	r21, 0x00	; 0
    2464:	2b e4       	ldi	r18, 0x4B	; 75
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	f8 e1       	ldi	r31, 0x18	; 24
    246a:	ef 2e       	mov	r14, r31
    246c:	f6 ec       	ldi	r31, 0xC6	; 198
    246e:	ff 2e       	mov	r15, r31
    2470:	0e 94 cd 19 	call	0x339a	; 0x339a <fillRoundRect>
	drawRoundRect(x, y, 102, 75, 7, color_0);
    2474:	86 ed       	ldi	r24, 0xD6	; 214
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	b6 01       	movw	r22, r12
    247a:	46 e6       	ldi	r20, 0x66	; 102
    247c:	50 e0       	ldi	r21, 0x00	; 0
    247e:	2b e4       	ldi	r18, 0x4B	; 75
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	ee 24       	eor	r14, r14
    2484:	ff 24       	eor	r15, r15
    2486:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <drawRoundRect>
	x += 105;
	}
         i = 78;
	 if(y < i * 2)
    248a:	8c e9       	ldi	r24, 0x9C	; 156
    248c:	c8 16       	cp	r12, r24
    248e:	d1 04       	cpc	r13, r1
    2490:	2c f4       	brge	.+10     	; 0x249c <main+0x182>
	 draw_btns( y + i, color_0, color_1 );
    2492:	2e e4       	ldi	r18, 0x4E	; 78
    2494:	b2 0e       	add	r11, r18
#endif
// draw buttons recursively
static void draw_btns(uint8_t y, uint16_t color_0, uint16_t color_1)
{
 uint8_t i, x = 4;
     if(!y) y = 4;
    2496:	09 f0       	breq	.+2      	; 0x249a <main+0x180>
    2498:	ac cf       	rjmp	.-168    	; 0x23f2 <main+0xd8>
    249a:	a9 cf       	rjmp	.-174    	; 0x23ee <main+0xd4>
#endif
     TSinit();
     setRotation(3); //
     fillScreen(BLACK); fillScreen(WHITE);
     draw_btns(0, VGA_BLACK, VGA_SILVER);
     presets_apply(1); 
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	0e 94 ee 10 	call	0x21dc	; 0x21dc <presets_apply>
	       write('I'); write('D');
           setCursor(30, 30);
#endif

  
     setColor(WHITE);
    24a4:	8f ef       	ldi	r24, 0xFF	; 255
    24a6:	9f ef       	ldi	r25, 0xFF	; 255
    24a8:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <setColor>
     setBackColor(VGA_TRANSPARENT);
    24ac:	6f ef       	ldi	r22, 0xFF	; 255
    24ae:	7f ef       	ldi	r23, 0xFF	; 255
    24b0:	8f ef       	ldi	r24, 0xFF	; 255
    24b2:	9f ef       	ldi	r25, 0xFF	; 255
    24b4:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <setBackColor>
     _setFont(OCR_A_Extended_M);
    24b8:	84 e5       	ldi	r24, 0x54	; 84
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <_setFont>

     setCursor(15, 15);
    24c0:	8f e0       	ldi	r24, 0x0F	; 15
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	6f e0       	ldi	r22, 0x0F	; 15
    24c6:	70 e0       	ldi	r23, 0x00	; 0
    24c8:	0e 94 10 14 	call	0x2820	; 0x2820 <setCursor>
	 print("ID");   //
    24cc:	83 e7       	ldi	r24, 0x73	; 115
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	0e 94 0a 1b 	call	0x3614	; 0x3614 <print>
     setCursor(35, 15);
    24d4:	83 e2       	ldi	r24, 0x23	; 35
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	6f e0       	ldi	r22, 0x0F	; 15
    24da:	70 e0       	ldi	r23, 0x00	; 0
    24dc:	0e 94 10 14 	call	0x2820	; 0x2820 <setCursor>
     numprint(readID(), 16); //
    24e0:	0e 94 77 23 	call	0x46ee	; 0x46ee <readID>
    24e4:	a0 e0       	ldi	r26, 0x00	; 0
    24e6:	b0 e0       	ldi	r27, 0x00	; 0
    24e8:	bc 01       	movw	r22, r24
    24ea:	cd 01       	movw	r24, r26
    24ec:	40 e1       	ldi	r20, 0x10	; 16
    24ee:	0e 94 61 11 	call	0x22c2	; 0x22c2 <numprint>
     setCursor(80, 30); 
    24f2:	80 e5       	ldi	r24, 0x50	; 80
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	6e e1       	ldi	r22, 0x1E	; 30
    24f8:	70 e0       	ldi	r23, 0x00	; 0
    24fa:	0e 94 10 14 	call	0x2820	; 0x2820 <setCursor>
     numprint( _height, 10);
     write(' ');
     write('X');
     numprint( _width, 10);  
#endif
     presets_apply(1);
    24fe:	81 e0       	ldi	r24, 0x01	; 1
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	0e 94 ee 10 	call	0x21dc	; 0x21dc <presets_apply>
     fillRoundRect(100, 80, 190, 30, 7, RED); 
    2506:	84 e6       	ldi	r24, 0x64	; 100
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	60 e5       	ldi	r22, 0x50	; 80
    250c:	70 e0       	ldi	r23, 0x00	; 0
    250e:	4e eb       	ldi	r20, 0xBE	; 190
    2510:	50 e0       	ldi	r21, 0x00	; 0
    2512:	2e e1       	ldi	r18, 0x1E	; 30
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	07 e0       	ldi	r16, 0x07	; 7
    2518:	10 e0       	ldi	r17, 0x00	; 0
    251a:	e1 2c       	mov	r14, r1
    251c:	e8 ef       	ldi	r30, 0xF8	; 248
    251e:	fe 2e       	mov	r15, r30
    2520:	0e 94 cd 19 	call	0x339a	; 0x339a <fillRoundRect>
     drawRoundRect(100, 80, 190, 30, 7, BLACK);
    2524:	84 e6       	ldi	r24, 0x64	; 100
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	60 e5       	ldi	r22, 0x50	; 80
    252a:	70 e0       	ldi	r23, 0x00	; 0
    252c:	4e eb       	ldi	r20, 0xBE	; 190
    252e:	50 e0       	ldi	r21, 0x00	; 0
    2530:	2e e1       	ldi	r18, 0x1E	; 30
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	ee 24       	eor	r14, r14
    2536:	ff 24       	eor	r15, r15
    2538:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <drawRoundRect>
     setColor(BLACK);
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <setColor>
     setBackColor(RED);
    2544:	60 e0       	ldi	r22, 0x00	; 0
    2546:	78 ef       	ldi	r23, 0xF8	; 248
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <setBackColor>
    2550:	c0 e0       	ldi	r28, 0x00	; 0
    2552:	d0 e0       	ldi	r29, 0x00	; 0
//*****************************************************
/**/
while(1) {           
          // primary tick routine
	if(TIFR & (1 << OCF2))  {
        TIFR = (1 << OCF2);     // 250 kHz
    2554:	40 e8       	ldi	r20, 0x80	; 128
    2556:	d4 2e       	mov	r13, r20
else 
if(y > 370 && y < 600) col = 2;
else 
if(y > 600 && y < 800) col = 3;

if(x > 170 && x < 400) row = 1;
    2558:	bb 24       	eor	r11, r11
    255a:	b3 94       	inc	r11

//*****************************************************
/**/
while(1) {           
          // primary tick routine
	if(TIFR & (1 << OCF2))  {
    255c:	08 b6       	in	r0, 0x38	; 56
    255e:	07 fe       	sbrs	r0, 7
    2560:	57 c1       	rjmp	.+686    	; 0x2810 <main+0x4f6>
        TIFR = (1 << OCF2);     // 250 kHz
    2562:	d8 be       	out	0x38, r13	; 56
	if(++fract_count == 25) { // 0.1 ms / 10 kHz   25
    2564:	80 91 9e 00 	lds	r24, 0x009E
    2568:	8f 5f       	subi	r24, 0xFF	; 255
    256a:	80 93 9e 00 	sts	0x009E, r24
    256e:	80 91 9e 00 	lds	r24, 0x009E
    2572:	89 31       	cpi	r24, 0x19	; 25
    2574:	09 f0       	breq	.+2      	; 0x2578 <main+0x25e>
    2576:	4c c1       	rjmp	.+664    	; 0x2810 <main+0x4f6>
	   fract_count = 0;
    2578:	10 92 9e 00 	sts	0x009E, r1
       ns_cnt++;
    257c:	80 91 92 00 	lds	r24, 0x0092
    2580:	8f 5f       	subi	r24, 0xFF	; 255
    2582:	80 93 92 00 	sts	0x0092, r24
        if( ms_cnt++ > 10 ) {
    2586:	80 91 90 00 	lds	r24, 0x0090
    258a:	8f 5f       	subi	r24, 0xFF	; 255
    258c:	80 93 90 00 	sts	0x0090, r24
    2590:	81 50       	subi	r24, 0x01	; 1
    2592:	8b 30       	cpi	r24, 0x0B	; 11
    2594:	08 f4       	brcc	.+2      	; 0x2598 <main+0x27e>
    2596:	d6 c0       	rjmp	.+428    	; 0x2744 <main+0x42a>
           ms_cnt = 0;
    2598:	10 92 90 00 	sts	0x0090, r1
           s_cnt++;       // 1ms Autoreset
    259c:	80 91 91 00 	lds	r24, 0x0091
    25a0:	8f 5f       	subi	r24, 0xFF	; 255
    25a2:	80 93 91 00 	sts	0x0091, r24
    *  ** are to be disabled till global 'busy' flag clears
    */
//*****************************************************    
static void touchRead(void)
{
	   push = 0;  
    25a6:	10 92 f7 00 	sts	0x00F7, r1
  static bool c;   // keeping the state 
  static uint8_t stage;
    switch(stage)  {
    25aa:	c0 90 9c 00 	lds	r12, 0x009C
    25ae:	82 e0       	ldi	r24, 0x02	; 2
    25b0:	c8 16       	cp	r12, r24
    25b2:	89 f1       	breq	.+98     	; 0x2616 <main+0x2fc>
    25b4:	8c 15       	cp	r24, r12
    25b6:	28 f0       	brcs	.+10     	; 0x25c2 <main+0x2a8>
    25b8:	21 e0       	ldi	r18, 0x01	; 1
    25ba:	c2 16       	cp	r12, r18
    25bc:	09 f0       	breq	.+2      	; 0x25c0 <main+0x2a6>
    25be:	ba c0       	rjmp	.+372    	; 0x2734 <main+0x41a>
    25c0:	09 c0       	rjmp	.+18     	; 0x25d4 <main+0x2ba>
    25c2:	83 e0       	ldi	r24, 0x03	; 3
    25c4:	c8 16       	cp	r12, r24
    25c6:	09 f4       	brne	.+2      	; 0x25ca <main+0x2b0>
    25c8:	59 c0       	rjmp	.+178    	; 0x267c <main+0x362>
    25ca:	24 e0       	ldi	r18, 0x04	; 4
    25cc:	c2 16       	cp	r12, r18
    25ce:	09 f0       	breq	.+2      	; 0x25d2 <main+0x2b8>
    25d0:	b1 c0       	rjmp	.+354    	; 0x2734 <main+0x41a>
    25d2:	87 c0       	rjmp	.+270    	; 0x26e2 <main+0x3c8>
	    case 1:
	     busy = 1; c = 0; coords = 0; 
    25d4:	c0 92 8e 00 	sts	0x008E, r12
    25d8:	10 92 9d 00 	sts	0x009D, r1
    25dc:	10 92 ec 00 	sts	0x00EC, r1
    25e0:	10 92 ed 00 	sts	0x00ED, r1
    25e4:	10 92 ee 00 	sts	0x00EE, r1
    25e8:	10 92 ef 00 	sts	0x00EF, r1
	       // Port C PC3 input, PC2  opposite
          TOUCHPIN_D = (TOUCHPIN_D & ~YP) | XM;
    25ec:	24 b3       	in	r18, 0x14	; 20
    25ee:	30 91 81 00 	lds	r19, 0x0081
    25f2:	90 91 82 00 	lds	r25, 0x0082
    25f6:	83 2f       	mov	r24, r19
    25f8:	80 95       	com	r24
    25fa:	82 23       	and	r24, r18
    25fc:	89 2b       	or	r24, r25
    25fe:	84 bb       	out	0x14, r24	; 20
           // PC2   - X_minus   -  low   YP high
          TOUCHPORT_D = (TOUCHPORT_D & ~XM) | YP;
    2600:	85 b3       	in	r24, 0x15	; 21
    2602:	90 95       	com	r25
    2604:	98 23       	and	r25, r24
    2606:	93 2b       	or	r25, r19
    2608:	95 bb       	out	0x15, r25	; 21
	      //   X_plus - set as output, Y_minus input 
          TOUCHPIN_A = (TOUCHPIN_A & ~YM) | XP;
    260a:	2a b3       	in	r18, 0x1a	; 26
    260c:	30 91 84 00 	lds	r19, 0x0084
    2610:	90 91 83 00 	lds	r25, 0x0083
    2614:	28 c0       	rjmp	.+80     	; 0x2666 <main+0x34c>
          TOUCHPORT_A = (TOUCHPORT_A & ~XP) | YM;    
	         break;
	       
//*****************************************************
        case 2:
	  if(read_adc(CH0) < 100)  {
    2616:	80 91 8f 00 	lds	r24, 0x008F
    261a:	0e 94 c8 10 	call	0x2190	; 0x2190 <read_adc>
    261e:	84 36       	cpi	r24, 0x64	; 100
    2620:	91 05       	cpc	r25, r1
    2622:	08 f0       	brcs	.+2      	; 0x2626 <main+0x30c>
    2624:	83 c0       	rjmp	.+262    	; 0x272c <main+0x412>
		  c = 1;
    2626:	b0 92 9d 00 	sts	0x009D, r11
          push = 1;
    262a:	b0 92 f7 00 	sts	0x00F7, r11
      if(++touchcount > 1) {
    262e:	80 91 a1 00 	lds	r24, 0x00A1
    2632:	8f 5f       	subi	r24, 0xFF	; 255
    2634:	80 93 a1 00 	sts	0x00A1, r24
    2638:	82 30       	cpi	r24, 0x02	; 2
    263a:	10 f0       	brcs	.+4      	; 0x2640 <main+0x326>
          keypress = 1;
    263c:	b0 92 97 00 	sts	0x0097, r11
      } 
		 // Y_plus  -  set as output  (same  as reset)
	     // Y_plus  -  pullup, so the rest   
            TOUCHPIN_D =  (TOUCHPIN_D & ~XM) | YP;
    2640:	24 b3       	in	r18, 0x14	; 20
    2642:	30 91 82 00 	lds	r19, 0x0082
    2646:	90 91 81 00 	lds	r25, 0x0081
    264a:	83 2f       	mov	r24, r19
    264c:	80 95       	com	r24
    264e:	82 23       	and	r24, r18
    2650:	89 2b       	or	r24, r25
    2652:	84 bb       	out	0x14, r24	; 20
            TOUCHPORT_D |= YP | XM;
    2654:	85 b3       	in	r24, 0x15	; 21
    2656:	93 2b       	or	r25, r19
    2658:	98 2b       	or	r25, r24
    265a:	95 bb       	out	0x15, r25	; 21
            TOUCHPIN_A = (TOUCHPIN_A & ~XP) | YM;
    265c:	2a b3       	in	r18, 0x1a	; 26
    265e:	30 91 83 00 	lds	r19, 0x0083
    2662:	90 91 84 00 	lds	r25, 0x0084
    2666:	83 2f       	mov	r24, r19
    2668:	80 95       	com	r24
    266a:	82 23       	and	r24, r18
    266c:	89 2b       	or	r24, r25
    266e:	8a bb       	out	0x1a, r24	; 26
            TOUCHPORT_A = (TOUCHPORT_A & ~YM) | XP;
    2670:	8b b3       	in	r24, 0x1b	; 27
    2672:	90 95       	com	r25
    2674:	98 23       	and	r25, r24
    2676:	93 2b       	or	r25, r19
    2678:	9b bb       	out	0x1b, r25	; 27
    267a:	5c c0       	rjmp	.+184    	; 0x2734 <main+0x41a>
          touchRestore();
          }
              break;
//*****************************************************
        case 3:				  
      if(c)   {
    267c:	80 91 9d 00 	lds	r24, 0x009D
    2680:	88 23       	and	r24, r24
    2682:	09 f4       	brne	.+2      	; 0x2686 <main+0x36c>
    2684:	57 c0       	rjmp	.+174    	; 0x2734 <main+0x41a>
	  coords = (uint32_t )read_adc(CH1) << 16;
    2686:	80 91 85 00 	lds	r24, 0x0085
    268a:	0e 94 c8 10 	call	0x2190	; 0x2190 <read_adc>
    268e:	a0 e0       	ldi	r26, 0x00	; 0
    2690:	b0 e0       	ldi	r27, 0x00	; 0
    2692:	dc 01       	movw	r26, r24
    2694:	99 27       	eor	r25, r25
    2696:	88 27       	eor	r24, r24
    2698:	80 93 ec 00 	sts	0x00EC, r24
    269c:	90 93 ed 00 	sts	0x00ED, r25
    26a0:	a0 93 ee 00 	sts	0x00EE, r26
    26a4:	b0 93 ef 00 	sts	0x00EF, r27
  	   //  X_minus   -  and reset (PC6)  - set as output   ;     Y_plus   -  input
	   //   X_minus   -   low   ;     Y_plus   -   high
            TOUCHPIN_D  =  (TOUCHPIN_D & ~YP)  | XM;
    26a8:	24 b3       	in	r18, 0x14	; 20
    26aa:	30 91 81 00 	lds	r19, 0x0081
    26ae:	90 91 82 00 	lds	r25, 0x0082
    26b2:	83 2f       	mov	r24, r19
    26b4:	80 95       	com	r24
    26b6:	82 23       	and	r24, r18
    26b8:	89 2b       	or	r24, r25
    26ba:	84 bb       	out	0x14, r24	; 20
            TOUCHPORT_D =  (TOUCHPORT_D & ~XM) | YP;
    26bc:	85 b3       	in	r24, 0x15	; 21
    26be:	90 95       	com	r25
    26c0:	98 23       	and	r25, r24
    26c2:	93 2b       	or	r25, r19
    26c4:	95 bb       	out	0x15, r25	; 21
            TOUCHPIN_A = (TOUCHPIN_A & ~YM) | XP;
    26c6:	2a b3       	in	r18, 0x1a	; 26
    26c8:	30 91 84 00 	lds	r19, 0x0084
    26cc:	90 91 83 00 	lds	r25, 0x0083
    26d0:	83 2f       	mov	r24, r19
    26d2:	80 95       	com	r24
    26d4:	82 23       	and	r24, r18
    26d6:	89 2b       	or	r24, r25
    26d8:	8a bb       	out	0x1a, r24	; 26
            TOUCHPORT_A |= XP | YM; 
    26da:	8b b3       	in	r24, 0x1b	; 27
    26dc:	93 2b       	or	r25, r19
    26de:	98 2b       	or	r25, r24
    26e0:	cb cf       	rjmp	.-106    	; 0x2678 <main+0x35e>
	      }
           break;
//*****************************************************
        case 4:	
      if(c)
    26e2:	80 91 9d 00 	lds	r24, 0x009D
    26e6:	88 23       	and	r24, r24
    26e8:	d9 f0       	breq	.+54     	; 0x2720 <main+0x406>
	  coords |= read_adc(CH0);
    26ea:	e0 90 ec 00 	lds	r14, 0x00EC
    26ee:	f0 90 ed 00 	lds	r15, 0x00ED
    26f2:	00 91 ee 00 	lds	r16, 0x00EE
    26f6:	10 91 ef 00 	lds	r17, 0x00EF
    26fa:	80 91 8f 00 	lds	r24, 0x008F
    26fe:	0e 94 c8 10 	call	0x2190	; 0x2190 <read_adc>
    2702:	a0 e0       	ldi	r26, 0x00	; 0
    2704:	b0 e0       	ldi	r27, 0x00	; 0
    2706:	8e 29       	or	r24, r14
    2708:	9f 29       	or	r25, r15
    270a:	a0 2b       	or	r26, r16
    270c:	b1 2b       	or	r27, r17
    270e:	80 93 ec 00 	sts	0x00EC, r24
    2712:	90 93 ed 00 	sts	0x00ED, r25
    2716:	a0 93 ee 00 	sts	0x00EE, r26
    271a:	b0 93 ef 00 	sts	0x00EF, r27
    271e:	06 c0       	rjmp	.+12     	; 0x272c <main+0x412>
         else {
             c = 0;     
    2720:	10 92 9d 00 	sts	0x009D, r1
                keypress = 0;
    2724:	10 92 97 00 	sts	0x0097, r1
                touchcount = 0; 
    2728:	10 92 a1 00 	sts	0x00A1, r1
              }
                busy = 0;
    272c:	10 92 8e 00 	sts	0x008E, r1
                touchRestore();
    2730:	0e 94 d7 10 	call	0x21ae	; 0x21ae <touchRestore>
	      break;
                        }  // end switch
 	   if(++stage > TOUCH_INTERVAL) {
    2734:	8c 2d       	mov	r24, r12
    2736:	8f 5f       	subi	r24, 0xFF	; 255
    2738:	80 93 9c 00 	sts	0x009C, r24
    273c:	83 33       	cpi	r24, 0x33	; 51
    273e:	10 f0       	brcs	.+4      	; 0x2744 <main+0x42a>
           stage = 0;
    2740:	10 92 9c 00 	sts	0x009C, r1
        if( ms_cnt++ > 10 ) {
           ms_cnt = 0;
           s_cnt++;       // 1ms Autoreset
		   touchRead(); 
        }
	if( ns_cnt > 100 ) {
    2744:	80 91 92 00 	lds	r24, 0x0092
    2748:	85 36       	cpi	r24, 0x65	; 101
    274a:	08 f4       	brcc	.+2      	; 0x274e <main+0x434>
    274c:	61 c0       	rjmp	.+194    	; 0x2810 <main+0x4f6>
        ns_cnt = 0; 
    274e:	10 92 92 00 	sts	0x0092, r1
	if( s_cnt > 100 ) {
    2752:	80 91 91 00 	lds	r24, 0x0091
    2756:	85 36       	cpi	r24, 0x65	; 101
    2758:	08 f4       	brcc	.+2      	; 0x275c <main+0x442>
    275a:	5a c0       	rjmp	.+180    	; 0x2810 <main+0x4f6>
        s_cnt = 0;
    275c:	10 92 91 00 	sts	0x0091, r1
#if 0        
  if(!busy)  
#endif	
      { 
		setCursor(110, 85); 
    2760:	8e e6       	ldi	r24, 0x6E	; 110
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	65 e5       	ldi	r22, 0x55	; 85
    2766:	70 e0       	ldi	r23, 0x00	; 0
    2768:	0e 94 10 14 	call	0x2820	; 0x2820 <setCursor>
#ifdef DISPLAYPOS
		numprint( coords >> 16, 10 ); 
		numprint( coords & 0xFFFF, 10 );
		print("     ");
#else
                print("btn : ");
    276c:	86 e7       	ldi	r24, 0x76	; 118
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	0e 94 0a 1b 	call	0x3614	; 0x3614 <print>
        numprint (readBtns(coords >> 16, coords & 0xFFFF), 10);
    2774:	80 91 ec 00 	lds	r24, 0x00EC
    2778:	90 91 ed 00 	lds	r25, 0x00ED
    277c:	a0 91 ee 00 	lds	r26, 0x00EE
    2780:	b0 91 ef 00 	lds	r27, 0x00EF
    2784:	9d 01       	movw	r18, r26
    2786:	44 27       	eor	r20, r20
    2788:	55 27       	eor	r21, r21
    278a:	bc 01       	movw	r22, r24

static uint8_t readBtns(uint16_t x, uint16_t y)
{	
 uint8_t row = 0, col = 0, colSz = 3;

if(y > 160 && y < 370) col = 1;
    278c:	81 5a       	subi	r24, 0xA1	; 161
    278e:	90 40       	sbci	r25, 0x00	; 0
    2790:	81 3d       	cpi	r24, 0xD1	; 209
    2792:	91 05       	cpc	r25, r1
    2794:	10 f4       	brcc	.+4      	; 0x279a <main+0x480>
    2796:	61 e0       	ldi	r22, 0x01	; 1
    2798:	10 c0       	rjmp	.+32     	; 0x27ba <main+0x4a0>
else 
if(y > 370 && y < 600) col = 2;
    279a:	cb 01       	movw	r24, r22
    279c:	83 57       	subi	r24, 0x73	; 115
    279e:	91 40       	sbci	r25, 0x01	; 1
    27a0:	85 3e       	cpi	r24, 0xE5	; 229
    27a2:	91 05       	cpc	r25, r1
    27a4:	10 f4       	brcc	.+4      	; 0x27aa <main+0x490>
    27a6:	62 e0       	ldi	r22, 0x02	; 2
    27a8:	08 c0       	rjmp	.+16     	; 0x27ba <main+0x4a0>
else 
if(y > 600 && y < 800) col = 3;
    27aa:	69 55       	subi	r22, 0x59	; 89
    27ac:	72 40       	sbci	r23, 0x02	; 2
    27ae:	67 3c       	cpi	r22, 0xC7	; 199
    27b0:	71 05       	cpc	r23, r1
    27b2:	10 f4       	brcc	.+4      	; 0x27b8 <main+0x49e>
    27b4:	63 e0       	ldi	r22, 0x03	; 3
    27b6:	01 c0       	rjmp	.+2      	; 0x27ba <main+0x4a0>
    27b8:	60 e0       	ldi	r22, 0x00	; 0

if(x > 170 && x < 400) row = 1;
    27ba:	c9 01       	movw	r24, r18
    27bc:	8b 5a       	subi	r24, 0xAB	; 171
    27be:	90 40       	sbci	r25, 0x00	; 0
    27c0:	85 3e       	cpi	r24, 0xE5	; 229
    27c2:	91 05       	cpc	r25, r1
    27c4:	10 f4       	brcc	.+4      	; 0x27ca <main+0x4b0>
    27c6:	91 e0       	ldi	r25, 0x01	; 1
    27c8:	0e c0       	rjmp	.+28     	; 0x27e6 <main+0x4cc>
else 
if(x > 400 && x < 640) row = 2;
    27ca:	c9 01       	movw	r24, r18
    27cc:	81 59       	subi	r24, 0x91	; 145
    27ce:	91 40       	sbci	r25, 0x01	; 1
    27d0:	8f 3e       	cpi	r24, 0xEF	; 239
    27d2:	91 05       	cpc	r25, r1
    27d4:	10 f4       	brcc	.+4      	; 0x27da <main+0x4c0>
    27d6:	92 e0       	ldi	r25, 0x02	; 2
    27d8:	06 c0       	rjmp	.+12     	; 0x27e6 <main+0x4cc>
else 
if(x > 640 && x < 820) row = 3;
    27da:	21 58       	subi	r18, 0x81	; 129
    27dc:	32 40       	sbci	r19, 0x02	; 2
    27de:	23 3b       	cpi	r18, 0xB3	; 179
    27e0:	31 05       	cpc	r19, r1
    27e2:	c0 f4       	brcc	.+48     	; 0x2814 <main+0x4fa>
    27e4:	93 e0       	ldi	r25, 0x03	; 3

return (!row && !col) ? 0 : (row * colSz - (colSz - col));
    27e6:	63 50       	subi	r22, 0x03	; 3
    27e8:	89 2f       	mov	r24, r25
    27ea:	88 0f       	add	r24, r24
    27ec:	89 0f       	add	r24, r25
    27ee:	68 0f       	add	r22, r24
		numprint( coords >> 16, 10 ); 
		numprint( coords & 0xFFFF, 10 );
		print("     ");
#else
                print("btn : ");
        numprint (readBtns(coords >> 16, coords & 0xFFFF), 10);
    27f0:	70 e0       	ldi	r23, 0x00	; 0
    27f2:	80 e0       	ldi	r24, 0x00	; 0
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	4a e0       	ldi	r20, 0x0A	; 10
    27f8:	0e 94 61 11 	call	0x22c2	; 0x22c2 <numprint>
		print("   ");
    27fc:	8d e7       	ldi	r24, 0x7D	; 125
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	0e 94 0a 1b 	call	0x3614	; 0x3614 <print>
#endif
      }        
		if( ++fivesec > 1 ) { fivesec = 0; // 50 
    2804:	21 96       	adiw	r28, 0x01	; 1
    2806:	c2 30       	cpi	r28, 0x02	; 2
    2808:	d1 05       	cpc	r29, r1
    280a:	10 f0       	brcs	.+4      	; 0x2810 <main+0x4f6>
    280c:	c0 e0       	ldi	r28, 0x00	; 0
    280e:	d0 e0       	ldi	r29, 0x00	; 0
                        } 
                    } 
                }
            }
           /*  secondary tick   */
	 if (TCNT2 >= 250)  {
    2810:	84 b5       	in	r24, 0x24	; 36
    2812:	a4 ce       	rjmp	.-696    	; 0x255c <main+0x242>
else 
if(x > 400 && x < 640) row = 2;
else 
if(x > 640 && x < 820) row = 3;

return (!row && !col) ? 0 : (row * colSz - (colSz - col));
    2814:	66 23       	and	r22, r22
    2816:	61 f3       	breq	.-40     	; 0x27f0 <main+0x4d6>
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	e5 cf       	rjmp	.-54     	; 0x27e6 <main+0x4cc>

0000281c <startWrite>:
//=========================================================


void startWrite() {
    // Overwrite in subclasses if desired!
}
    281c:	08 95       	ret

0000281e <endWrite>:

void endWrite() {
    // Overwrite in subclasses if startWrite is defined!
}
    281e:	08 95       	ret

00002820 <setCursor>:

}
#endif

void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    2820:	90 93 4c 01 	sts	0x014C, r25
    2824:	80 93 4b 01 	sts	0x014B, r24
    cursor_y = y;
    2828:	70 93 46 01 	sts	0x0146, r23
    282c:	60 93 45 01 	sts	0x0145, r22
}
    2830:	08 95       	ret

00002832 <getCursorX>:
#ifdef ADAFONTS
int16_t getCursorX(void)  {
    return cursor_x;
}
    2832:	80 91 4b 01 	lds	r24, 0x014B
    2836:	90 91 4c 01 	lds	r25, 0x014C
    283a:	08 95       	ret

0000283c <getCursorY>:

int16_t getCursorY(void)  {
    return cursor_y;
}
    283c:	80 91 45 01 	lds	r24, 0x0145
    2840:	90 91 46 01 	lds	r25, 0x0146
    2844:	08 95       	ret

00002846 <setTextSize>:

void setTextSize(uint8_t s) {
    textsize = (s > 0) ? s : 1;
    2846:	88 23       	and	r24, r24
    2848:	09 f4       	brne	.+2      	; 0x284c <setTextSize+0x6>
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	80 93 4e 01 	sts	0x014E, r24
}
    2850:	08 95       	ret

00002852 <setTextColor>:

void setTextColor(uint16_t c, uint16_t b) {
    textcolor   = c;
    2852:	90 93 54 01 	sts	0x0154, r25
    2856:	80 93 53 01 	sts	0x0153, r24
    textbgcolor = b;
    285a:	70 93 52 01 	sts	0x0152, r23
    285e:	60 93 51 01 	sts	0x0151, r22
}
    2862:	08 95       	ret

00002864 <setTextWrap>:

void setTextWrap(boolean w) {
    wrap = w;
    2864:	80 93 4d 01 	sts	0x014D, r24
}
    2868:	08 95       	ret

0000286a <getRotation>:

uint8_t getRotation(void)  {
    return rotation;
}
    286a:	80 91 47 01 	lds	r24, 0x0147
    286e:	08 95       	ret

00002870 <cp437>:
// of every character that followed it.  But a TON of code has been written
// with the erroneous character indices.  By default, the library uses the
// original 'wrong' behavior and old sketches will still work.  Pass 'true'
// to this function to use correct CP437 character values in your code.
void cp437(boolean x) {
    _cp437 = x;
    2870:	80 93 48 01 	sts	0x0148, r24
}
    2874:	08 95       	ret

00002876 <setFont>:


void setFont(const GFXfont *f) {
    2876:	9c 01       	movw	r18, r24
    2878:	80 91 3b 01 	lds	r24, 0x013B
    287c:	90 91 3c 01 	lds	r25, 0x013C
    if(f) {            // Font struct pointer passed in?
    2880:	21 15       	cp	r18, r1
    2882:	31 05       	cpc	r19, r1
    2884:	41 f0       	breq	.+16     	; 0x2896 <setFont+0x20>
        if(!gfxFont) { // And no current font struct?
    2886:	89 2b       	or	r24, r25
    2888:	89 f4       	brne	.+34     	; 0x28ac <setFont+0x36>
            // Switching from classic to new font behavior.
            // Move cursor pos down 6 pixels so it's on baseline.
            cursor_y += 6;
    288a:	80 91 45 01 	lds	r24, 0x0145
    288e:	90 91 46 01 	lds	r25, 0x0146
    2892:	06 96       	adiw	r24, 0x06	; 6
    2894:	07 c0       	rjmp	.+14     	; 0x28a4 <setFont+0x2e>
        }
    } else if(gfxFont) { // NULL passed.  Current font struct defined?
    2896:	89 2b       	or	r24, r25
    2898:	49 f0       	breq	.+18     	; 0x28ac <setFont+0x36>
        // Switching from new to classic font behavior.
        // Move cursor pos up 6 pixels so it's at top-left of char.
        cursor_y -= 6;
    289a:	80 91 45 01 	lds	r24, 0x0145
    289e:	90 91 46 01 	lds	r25, 0x0146
    28a2:	06 97       	sbiw	r24, 0x06	; 6
    28a4:	90 93 46 01 	sts	0x0146, r25
    28a8:	80 93 45 01 	sts	0x0145, r24
    }
    gfxFont = (GFXfont *)f;
    28ac:	30 93 3c 01 	sts	0x013C, r19
    28b0:	20 93 3b 01 	sts	0x013B, r18
}
    28b4:	08 95       	ret

000028b6 <charBounds>:

// Broke this out as it's used by both the PROGMEM- and RAM-resident
// getTextBounds() functions.
void charBounds(char c, int16_t *x, int16_t *y,
  int16_t *minx, int16_t *miny, int16_t *maxx, int16_t *maxy) {
    28b6:	2f 92       	push	r2
    28b8:	3f 92       	push	r3
    28ba:	5f 92       	push	r5
    28bc:	6f 92       	push	r6
    28be:	7f 92       	push	r7
    28c0:	8f 92       	push	r8
    28c2:	9f 92       	push	r9
    28c4:	af 92       	push	r10
    28c6:	bf 92       	push	r11
    28c8:	cf 92       	push	r12
    28ca:	df 92       	push	r13
    28cc:	ef 92       	push	r14
    28ce:	ff 92       	push	r15
    28d0:	0f 93       	push	r16
    28d2:	1f 93       	push	r17
    28d4:	cf 93       	push	r28
    28d6:	df 93       	push	r29
    28d8:	5b 01       	movw	r10, r22
    28da:	ea 01       	movw	r28, r20
    28dc:	49 01       	movw	r8, r18
    28de:	38 01       	movw	r6, r16
    28e0:	87 01       	movw	r16, r14
    28e2:	76 01       	movw	r14, r12

    if(gfxFont) {
    28e4:	40 91 3b 01 	lds	r20, 0x013B
    28e8:	50 91 3c 01 	lds	r21, 0x013C
    28ec:	41 15       	cp	r20, r1
    28ee:	51 05       	cpc	r21, r1
    28f0:	09 f4       	brne	.+2      	; 0x28f4 <charBounds+0x3e>
    28f2:	eb c0       	rjmp	.+470    	; 0x2aca <charBounds+0x214>

        if(c == '\n') { // Newline?
    28f4:	8a 30       	cpi	r24, 0x0A	; 10
    28f6:	99 f4       	brne	.+38     	; 0x291e <charBounds+0x68>
            *x  = 0;    // Reset x to zero, advance y by one line
    28f8:	fb 01       	movw	r30, r22
    28fa:	11 82       	std	Z+1, r1	; 0x01
    28fc:	10 82       	st	Z, r1
            *y += textsize * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    28fe:	4a 5f       	subi	r20, 0xFA	; 250
    2900:	5f 4f       	sbci	r21, 0xFF	; 255
    2902:	fa 01       	movw	r30, r20
    2904:	84 91       	lpm	r24, Z+
    2906:	20 91 4e 01 	lds	r18, 0x014E
    290a:	82 9f       	mul	r24, r18
    290c:	c0 01       	movw	r24, r0
    290e:	11 24       	eor	r1, r1
    2910:	28 81       	ld	r18, Y
    2912:	39 81       	ldd	r19, Y+1	; 0x01
    2914:	28 0f       	add	r18, r24
    2916:	39 1f       	adc	r19, r25
    2918:	39 83       	std	Y+1, r19	; 0x01
    291a:	28 83       	st	Y, r18
    291c:	61 c1       	rjmp	.+706    	; 0x2be0 <charBounds+0x32a>
        } else if(c != '\r') { // Not a carriage return; is normal char
    291e:	8d 30       	cpi	r24, 0x0D	; 13
    2920:	09 f4       	brne	.+2      	; 0x2924 <charBounds+0x6e>
    2922:	5e c1       	rjmp	.+700    	; 0x2be0 <charBounds+0x32a>
            uint8_t first = pgm_read_byte(&gfxFont->first),
    2924:	4c 5f       	subi	r20, 0xFC	; 252
    2926:	5f 4f       	sbci	r21, 0xFF	; 255
    2928:	fa 01       	movw	r30, r20
    292a:	64 91       	lpm	r22, Z+
                    last  = pgm_read_byte(&gfxFont->last);
    292c:	4f 5f       	subi	r20, 0xFF	; 255
    292e:	5f 4f       	sbci	r21, 0xFF	; 255
    2930:	fa 01       	movw	r30, r20
    2932:	94 91       	lpm	r25, Z+
    2934:	45 50       	subi	r20, 0x05	; 5
    2936:	50 40       	sbci	r21, 0x00	; 0
            if((c >= first) && (c <= last)) { // Char present in this font?
    2938:	86 17       	cp	r24, r22
    293a:	08 f4       	brcc	.+2      	; 0x293e <charBounds+0x88>
    293c:	51 c1       	rjmp	.+674    	; 0x2be0 <charBounds+0x32a>
    293e:	98 17       	cp	r25, r24
    2940:	08 f4       	brcc	.+2      	; 0x2944 <charBounds+0x8e>
    2942:	4e c1       	rjmp	.+668    	; 0x2be0 <charBounds+0x32a>
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
    2944:	9a 01       	movw	r18, r20
    2946:	2e 5f       	subi	r18, 0xFE	; 254
    2948:	3f 4f       	sbci	r19, 0xFF	; 255
    294a:	f9 01       	movw	r30, r18
    294c:	a5 91       	lpm	r26, Z+
    294e:	b4 91       	lpm	r27, Z+
    2950:	28 2f       	mov	r18, r24
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	26 1b       	sub	r18, r22
    2956:	31 09       	sbc	r19, r1
    2958:	c9 01       	movw	r24, r18
    295a:	f3 e0       	ldi	r31, 0x03	; 3
    295c:	88 0f       	add	r24, r24
    295e:	99 1f       	adc	r25, r25
    2960:	fa 95       	dec	r31
    2962:	e1 f7       	brne	.-8      	; 0x295c <charBounds+0xa6>
    2964:	82 1b       	sub	r24, r18
    2966:	93 0b       	sbc	r25, r19
    2968:	a8 0f       	add	r26, r24
    296a:	b9 1f       	adc	r27, r25
                  &gfxFont->glyph))[c - first]);
                uint8_t gw = pgm_read_byte(&glyph->width),
    296c:	12 96       	adiw	r26, 0x02	; 2
    296e:	fd 01       	movw	r30, r26
    2970:	d4 90       	lpm	r13, Z+
                        gh = pgm_read_byte(&glyph->height),
    2972:	11 96       	adiw	r26, 0x01	; 1
    2974:	fd 01       	movw	r30, r26
    2976:	c4 90       	lpm	r12, Z+
                        xa = pgm_read_byte(&glyph->xAdvance);
    2978:	11 96       	adiw	r26, 0x01	; 1
    297a:	fd 01       	movw	r30, r26
    297c:	54 90       	lpm	r5, Z+
                int8_t  xo = pgm_read_byte(&glyph->xOffset),
    297e:	11 96       	adiw	r26, 0x01	; 1
    2980:	fd 01       	movw	r30, r26
    2982:	64 91       	lpm	r22, Z+
                        yo = pgm_read_byte(&glyph->yOffset);
    2984:	11 96       	adiw	r26, 0x01	; 1
    2986:	fd 01       	movw	r30, r26
    2988:	74 91       	lpm	r23, Z+
                if(wrap && ((*x+(((int16_t)xo+gw)*textsize)) > _width)) {
    298a:	80 91 4d 01 	lds	r24, 0x014D
    298e:	88 23       	and	r24, r24
    2990:	71 f1       	breq	.+92     	; 0x29ee <charBounds+0x138>
    2992:	26 2f       	mov	r18, r22
    2994:	33 27       	eor	r19, r19
    2996:	27 fd       	sbrc	r18, 7
    2998:	30 95       	com	r19
    299a:	2d 0d       	add	r18, r13
    299c:	31 1d       	adc	r19, r1
    299e:	80 91 4e 01 	lds	r24, 0x014E
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	fc 01       	movw	r30, r24
    29a6:	2e 9f       	mul	r18, r30
    29a8:	c0 01       	movw	r24, r0
    29aa:	2f 9f       	mul	r18, r31
    29ac:	90 0d       	add	r25, r0
    29ae:	3e 9f       	mul	r19, r30
    29b0:	90 0d       	add	r25, r0
    29b2:	11 24       	eor	r1, r1
    29b4:	f5 01       	movw	r30, r10
    29b6:	20 81       	ld	r18, Z
    29b8:	31 81       	ldd	r19, Z+1	; 0x01
    29ba:	82 0f       	add	r24, r18
    29bc:	93 1f       	adc	r25, r19
    29be:	20 91 49 01 	lds	r18, 0x0149
    29c2:	30 91 4a 01 	lds	r19, 0x014A
    29c6:	28 17       	cp	r18, r24
    29c8:	39 07       	cpc	r19, r25
    29ca:	8c f4       	brge	.+34     	; 0x29ee <charBounds+0x138>
                    *x  = 0; // Reset x to zero, advance y by one line
    29cc:	11 82       	std	Z+1, r1	; 0x01
    29ce:	10 82       	st	Z, r1
                    *y += textsize * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    29d0:	4a 5f       	subi	r20, 0xFA	; 250
    29d2:	5f 4f       	sbci	r21, 0xFF	; 255
    29d4:	fa 01       	movw	r30, r20
    29d6:	84 91       	lpm	r24, Z+
    29d8:	20 91 4e 01 	lds	r18, 0x014E
    29dc:	82 9f       	mul	r24, r18
    29de:	c0 01       	movw	r24, r0
    29e0:	11 24       	eor	r1, r1
    29e2:	28 81       	ld	r18, Y
    29e4:	39 81       	ldd	r19, Y+1	; 0x01
    29e6:	28 0f       	add	r18, r24
    29e8:	39 1f       	adc	r19, r25
    29ea:	39 83       	std	Y+1, r19	; 0x01
    29ec:	28 83       	st	Y, r18
                }
                int16_t ts = (int16_t)textsize,
    29ee:	80 91 4e 01 	lds	r24, 0x014E
    29f2:	a8 2f       	mov	r26, r24
    29f4:	b0 e0       	ldi	r27, 0x00	; 0
                        x1 = *x + xo * ts,
    29f6:	86 2f       	mov	r24, r22
    29f8:	99 27       	eor	r25, r25
    29fa:	87 fd       	sbrc	r24, 7
    29fc:	90 95       	com	r25
    29fe:	8a 9f       	mul	r24, r26
    2a00:	10 01       	movw	r2, r0
    2a02:	8b 9f       	mul	r24, r27
    2a04:	30 0c       	add	r3, r0
    2a06:	9a 9f       	mul	r25, r26
    2a08:	30 0c       	add	r3, r0
    2a0a:	11 24       	eor	r1, r1
    2a0c:	f5 01       	movw	r30, r10
    2a0e:	80 81       	ld	r24, Z
    2a10:	91 81       	ldd	r25, Z+1	; 0x01
    2a12:	28 0e       	add	r2, r24
    2a14:	39 1e       	adc	r3, r25
                        y1 = *y + yo * ts,
    2a16:	87 2f       	mov	r24, r23
    2a18:	99 27       	eor	r25, r25
    2a1a:	87 fd       	sbrc	r24, 7
    2a1c:	90 95       	com	r25
    2a1e:	8a 9f       	mul	r24, r26
    2a20:	b0 01       	movw	r22, r0
    2a22:	8b 9f       	mul	r24, r27
    2a24:	70 0d       	add	r23, r0
    2a26:	9a 9f       	mul	r25, r26
    2a28:	70 0d       	add	r23, r0
    2a2a:	11 24       	eor	r1, r1
    2a2c:	88 81       	ld	r24, Y
    2a2e:	99 81       	ldd	r25, Y+1	; 0x01
    2a30:	68 0f       	add	r22, r24
    2a32:	79 1f       	adc	r23, r25
                        x2 = x1 + gw * ts - 1,
    2a34:	8d 2d       	mov	r24, r13
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	8a 9f       	mul	r24, r26
    2a3a:	a0 01       	movw	r20, r0
    2a3c:	8b 9f       	mul	r24, r27
    2a3e:	50 0d       	add	r21, r0
    2a40:	9a 9f       	mul	r25, r26
    2a42:	50 0d       	add	r21, r0
    2a44:	11 24       	eor	r1, r1
    2a46:	41 50       	subi	r20, 0x01	; 1
    2a48:	50 40       	sbci	r21, 0x00	; 0
    2a4a:	42 0d       	add	r20, r2
    2a4c:	53 1d       	adc	r21, r3
                        y2 = y1 + gh * ts - 1;
    2a4e:	8c 2d       	mov	r24, r12
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	8a 9f       	mul	r24, r26
    2a54:	90 01       	movw	r18, r0
    2a56:	8b 9f       	mul	r24, r27
    2a58:	30 0d       	add	r19, r0
    2a5a:	9a 9f       	mul	r25, r26
    2a5c:	30 0d       	add	r19, r0
    2a5e:	11 24       	eor	r1, r1
    2a60:	21 50       	subi	r18, 0x01	; 1
    2a62:	30 40       	sbci	r19, 0x00	; 0
    2a64:	26 0f       	add	r18, r22
    2a66:	37 1f       	adc	r19, r23
                if(x1 < *minx) *minx = x1;
    2a68:	f4 01       	movw	r30, r8
    2a6a:	80 81       	ld	r24, Z
    2a6c:	91 81       	ldd	r25, Z+1	; 0x01
    2a6e:	28 16       	cp	r2, r24
    2a70:	39 06       	cpc	r3, r25
    2a72:	14 f4       	brge	.+4      	; 0x2a78 <charBounds+0x1c2>
    2a74:	31 82       	std	Z+1, r3	; 0x01
    2a76:	20 82       	st	Z, r2
                if(y1 < *miny) *miny = y1;
    2a78:	f3 01       	movw	r30, r6
    2a7a:	80 81       	ld	r24, Z
    2a7c:	91 81       	ldd	r25, Z+1	; 0x01
    2a7e:	68 17       	cp	r22, r24
    2a80:	79 07       	cpc	r23, r25
    2a82:	14 f4       	brge	.+4      	; 0x2a88 <charBounds+0x1d2>
    2a84:	71 83       	std	Z+1, r23	; 0x01
    2a86:	60 83       	st	Z, r22
                if(x2 > *maxx) *maxx = x2;
    2a88:	f8 01       	movw	r30, r16
    2a8a:	80 81       	ld	r24, Z
    2a8c:	91 81       	ldd	r25, Z+1	; 0x01
    2a8e:	84 17       	cp	r24, r20
    2a90:	95 07       	cpc	r25, r21
    2a92:	14 f4       	brge	.+4      	; 0x2a98 <charBounds+0x1e2>
    2a94:	51 83       	std	Z+1, r21	; 0x01
    2a96:	40 83       	st	Z, r20
                if(y2 > *maxy) *maxy = y2;
    2a98:	f7 01       	movw	r30, r14
    2a9a:	80 81       	ld	r24, Z
    2a9c:	91 81       	ldd	r25, Z+1	; 0x01
    2a9e:	82 17       	cp	r24, r18
    2aa0:	93 07       	cpc	r25, r19
    2aa2:	14 f4       	brge	.+4      	; 0x2aa8 <charBounds+0x1f2>
    2aa4:	31 83       	std	Z+1, r19	; 0x01
    2aa6:	20 83       	st	Z, r18
                *x += xa * ts;
    2aa8:	85 2d       	mov	r24, r5
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	8a 9f       	mul	r24, r26
    2aae:	90 01       	movw	r18, r0
    2ab0:	8b 9f       	mul	r24, r27
    2ab2:	30 0d       	add	r19, r0
    2ab4:	9a 9f       	mul	r25, r26
    2ab6:	30 0d       	add	r19, r0
    2ab8:	11 24       	eor	r1, r1
    2aba:	f5 01       	movw	r30, r10
    2abc:	80 81       	ld	r24, Z
    2abe:	91 81       	ldd	r25, Z+1	; 0x01
    2ac0:	82 0f       	add	r24, r18
    2ac2:	93 1f       	adc	r25, r19
    2ac4:	91 83       	std	Z+1, r25	; 0x01
    2ac6:	80 83       	st	Z, r24
    2ac8:	8b c0       	rjmp	.+278    	; 0x2be0 <charBounds+0x32a>
            }
        }

    } else { // Default font

        if(c == '\n') {                     // Newline?
    2aca:	8a 30       	cpi	r24, 0x0A	; 10
    2acc:	91 f4       	brne	.+36     	; 0x2af2 <charBounds+0x23c>
            *x  = 0;                        // Reset x to zero,
    2ace:	fb 01       	movw	r30, r22
    2ad0:	11 82       	std	Z+1, r1	; 0x01
    2ad2:	10 82       	st	Z, r1
            *y += textsize * 8;             // advance y one line
    2ad4:	20 91 4e 01 	lds	r18, 0x014E
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	e3 e0       	ldi	r30, 0x03	; 3
    2adc:	22 0f       	add	r18, r18
    2ade:	33 1f       	adc	r19, r19
    2ae0:	ea 95       	dec	r30
    2ae2:	e1 f7       	brne	.-8      	; 0x2adc <charBounds+0x226>
    2ae4:	88 81       	ld	r24, Y
    2ae6:	99 81       	ldd	r25, Y+1	; 0x01
    2ae8:	82 0f       	add	r24, r18
    2aea:	93 1f       	adc	r25, r19
    2aec:	99 83       	std	Y+1, r25	; 0x01
    2aee:	88 83       	st	Y, r24
    2af0:	77 c0       	rjmp	.+238    	; 0x2be0 <charBounds+0x32a>
            // min/max x/y unchaged -- that waits for next 'normal' character
        } else if(c != '\r') {  // Normal char; ignore carriage returns
    2af2:	8d 30       	cpi	r24, 0x0D	; 13
    2af4:	09 f4       	brne	.+2      	; 0x2af8 <charBounds+0x242>
    2af6:	74 c0       	rjmp	.+232    	; 0x2be0 <charBounds+0x32a>
            if(wrap && ((*x + textsize * 6) > _width)) { // Off right?
    2af8:	80 91 4d 01 	lds	r24, 0x014D
    2afc:	88 23       	and	r24, r24
    2afe:	11 f1       	breq	.+68     	; 0x2b44 <charBounds+0x28e>
    2b00:	80 91 4e 01 	lds	r24, 0x014E
    2b04:	26 e0       	ldi	r18, 0x06	; 6
    2b06:	82 9f       	mul	r24, r18
    2b08:	c0 01       	movw	r24, r0
    2b0a:	11 24       	eor	r1, r1
    2b0c:	fb 01       	movw	r30, r22
    2b0e:	20 81       	ld	r18, Z
    2b10:	31 81       	ldd	r19, Z+1	; 0x01
    2b12:	82 0f       	add	r24, r18
    2b14:	93 1f       	adc	r25, r19
    2b16:	20 91 49 01 	lds	r18, 0x0149
    2b1a:	30 91 4a 01 	lds	r19, 0x014A
    2b1e:	28 17       	cp	r18, r24
    2b20:	39 07       	cpc	r19, r25
    2b22:	84 f4       	brge	.+32     	; 0x2b44 <charBounds+0x28e>
                *x  = 0;                    // Reset x to zero,
    2b24:	11 82       	std	Z+1, r1	; 0x01
    2b26:	10 82       	st	Z, r1
                *y += textsize * 8;         // advance y one line
    2b28:	20 91 4e 01 	lds	r18, 0x014E
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	73 e0       	ldi	r23, 0x03	; 3
    2b30:	22 0f       	add	r18, r18
    2b32:	33 1f       	adc	r19, r19
    2b34:	7a 95       	dec	r23
    2b36:	e1 f7       	brne	.-8      	; 0x2b30 <charBounds+0x27a>
    2b38:	88 81       	ld	r24, Y
    2b3a:	99 81       	ldd	r25, Y+1	; 0x01
    2b3c:	82 0f       	add	r24, r18
    2b3e:	93 1f       	adc	r25, r19
    2b40:	99 83       	std	Y+1, r25	; 0x01
    2b42:	88 83       	st	Y, r24
            }
            int x2 = *x + textsize * 6 - 1, // Lower-right pixel of char
    2b44:	20 91 4e 01 	lds	r18, 0x014E
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	a9 01       	movw	r20, r18
    2b4c:	44 0f       	add	r20, r20
    2b4e:	55 1f       	adc	r21, r21
    2b50:	42 0f       	add	r20, r18
    2b52:	53 1f       	adc	r21, r19
    2b54:	44 0f       	add	r20, r20
    2b56:	55 1f       	adc	r21, r21
    2b58:	41 50       	subi	r20, 0x01	; 1
    2b5a:	50 40       	sbci	r21, 0x00	; 0
    2b5c:	f5 01       	movw	r30, r10
    2b5e:	80 81       	ld	r24, Z
    2b60:	91 81       	ldd	r25, Z+1	; 0x01
    2b62:	48 0f       	add	r20, r24
    2b64:	59 1f       	adc	r21, r25
                y2 = *y + textsize * 8 - 1;
    2b66:	83 e0       	ldi	r24, 0x03	; 3
    2b68:	22 0f       	add	r18, r18
    2b6a:	33 1f       	adc	r19, r19
    2b6c:	8a 95       	dec	r24
    2b6e:	e1 f7       	brne	.-8      	; 0x2b68 <charBounds+0x2b2>
    2b70:	21 50       	subi	r18, 0x01	; 1
    2b72:	30 40       	sbci	r19, 0x00	; 0
    2b74:	88 81       	ld	r24, Y
    2b76:	99 81       	ldd	r25, Y+1	; 0x01
    2b78:	28 0f       	add	r18, r24
    2b7a:	39 1f       	adc	r19, r25
            if(x2 > *maxx) *maxx = x2;      // Track max x, y
    2b7c:	f8 01       	movw	r30, r16
    2b7e:	80 81       	ld	r24, Z
    2b80:	91 81       	ldd	r25, Z+1	; 0x01
    2b82:	84 17       	cp	r24, r20
    2b84:	95 07       	cpc	r25, r21
    2b86:	14 f4       	brge	.+4      	; 0x2b8c <charBounds+0x2d6>
    2b88:	51 83       	std	Z+1, r21	; 0x01
    2b8a:	40 83       	st	Z, r20
            if(y2 > *maxy) *maxy = y2;
    2b8c:	f7 01       	movw	r30, r14
    2b8e:	80 81       	ld	r24, Z
    2b90:	91 81       	ldd	r25, Z+1	; 0x01
    2b92:	82 17       	cp	r24, r18
    2b94:	93 07       	cpc	r25, r19
    2b96:	14 f4       	brge	.+4      	; 0x2b9c <charBounds+0x2e6>
    2b98:	31 83       	std	Z+1, r19	; 0x01
    2b9a:	20 83       	st	Z, r18
            if(*x < *minx) *minx = *x;      // Track min x, y
    2b9c:	f5 01       	movw	r30, r10
    2b9e:	20 81       	ld	r18, Z
    2ba0:	31 81       	ldd	r19, Z+1	; 0x01
    2ba2:	f4 01       	movw	r30, r8
    2ba4:	80 81       	ld	r24, Z
    2ba6:	91 81       	ldd	r25, Z+1	; 0x01
    2ba8:	28 17       	cp	r18, r24
    2baa:	39 07       	cpc	r19, r25
    2bac:	14 f4       	brge	.+4      	; 0x2bb2 <charBounds+0x2fc>
    2bae:	31 83       	std	Z+1, r19	; 0x01
    2bb0:	20 83       	st	Z, r18
            if(*y < *miny) *miny = *y;
    2bb2:	28 81       	ld	r18, Y
    2bb4:	39 81       	ldd	r19, Y+1	; 0x01
    2bb6:	f3 01       	movw	r30, r6
    2bb8:	80 81       	ld	r24, Z
    2bba:	91 81       	ldd	r25, Z+1	; 0x01
    2bbc:	28 17       	cp	r18, r24
    2bbe:	39 07       	cpc	r19, r25
    2bc0:	14 f4       	brge	.+4      	; 0x2bc6 <charBounds+0x310>
    2bc2:	31 83       	std	Z+1, r19	; 0x01
    2bc4:	20 83       	st	Z, r18
            *x += textsize * 6;             // Advance x one char
    2bc6:	80 91 4e 01 	lds	r24, 0x014E
    2bca:	26 e0       	ldi	r18, 0x06	; 6
    2bcc:	82 9f       	mul	r24, r18
    2bce:	c0 01       	movw	r24, r0
    2bd0:	11 24       	eor	r1, r1
    2bd2:	f5 01       	movw	r30, r10
    2bd4:	20 81       	ld	r18, Z
    2bd6:	31 81       	ldd	r19, Z+1	; 0x01
    2bd8:	28 0f       	add	r18, r24
    2bda:	39 1f       	adc	r19, r25
    2bdc:	31 83       	std	Z+1, r19	; 0x01
    2bde:	20 83       	st	Z, r18
        }
    }
}
    2be0:	df 91       	pop	r29
    2be2:	cf 91       	pop	r28
    2be4:	1f 91       	pop	r17
    2be6:	0f 91       	pop	r16
    2be8:	ff 90       	pop	r15
    2bea:	ef 90       	pop	r14
    2bec:	df 90       	pop	r13
    2bee:	cf 90       	pop	r12
    2bf0:	bf 90       	pop	r11
    2bf2:	af 90       	pop	r10
    2bf4:	9f 90       	pop	r9
    2bf6:	8f 90       	pop	r8
    2bf8:	7f 90       	pop	r7
    2bfa:	6f 90       	pop	r6
    2bfc:	5f 90       	pop	r5
    2bfe:	3f 90       	pop	r3
    2c00:	2f 90       	pop	r2
    2c02:	08 95       	ret

00002c04 <getTextBounds>:

// Pass string and a cursor position, returns UL corner and W,H.
void getTextBounds(char *str, int16_t x, int16_t y,
        int16_t *x1, int16_t *y1, uint16_t *w, uint16_t *h) {
    2c04:	2f 92       	push	r2
    2c06:	3f 92       	push	r3
    2c08:	4f 92       	push	r4
    2c0a:	5f 92       	push	r5
    2c0c:	6f 92       	push	r6
    2c0e:	7f 92       	push	r7
    2c10:	8f 92       	push	r8
    2c12:	9f 92       	push	r9
    2c14:	af 92       	push	r10
    2c16:	bf 92       	push	r11
    2c18:	cf 92       	push	r12
    2c1a:	df 92       	push	r13
    2c1c:	ef 92       	push	r14
    2c1e:	ff 92       	push	r15
    2c20:	0f 93       	push	r16
    2c22:	1f 93       	push	r17
    2c24:	df 93       	push	r29
    2c26:	cf 93       	push	r28
    2c28:	cd b7       	in	r28, 0x3d	; 61
    2c2a:	de b7       	in	r29, 0x3e	; 62
    2c2c:	60 97       	sbiw	r28, 0x10	; 16
    2c2e:	0f b6       	in	r0, 0x3f	; 63
    2c30:	f8 94       	cli
    2c32:	de bf       	out	0x3e, r29	; 62
    2c34:	0f be       	out	0x3f, r0	; 63
    2c36:	cd bf       	out	0x3d, r28	; 61
    2c38:	4c 01       	movw	r8, r24
    2c3a:	7a 87       	std	Y+10, r23	; 0x0a
    2c3c:	69 87       	std	Y+9, r22	; 0x09
    2c3e:	5c 87       	std	Y+12, r21	; 0x0c
    2c40:	4b 87       	std	Y+11, r20	; 0x0b
    2c42:	59 01       	movw	r10, r18
    2c44:	1e 87       	std	Y+14, r17	; 0x0e
    2c46:	0d 87       	std	Y+13, r16	; 0x0d
    2c48:	37 01       	movw	r6, r14
    2c4a:	d8 8a       	std	Y+16, r13	; 0x10
    2c4c:	cf 86       	std	Y+15, r12	; 0x0f
    uint8_t c; // Current character

    *x1 = x;
    2c4e:	d9 01       	movw	r26, r18
    2c50:	6d 93       	st	X+, r22
    2c52:	7c 93       	st	X, r23
    *y1 = y;
    2c54:	f8 01       	movw	r30, r16
    2c56:	51 83       	std	Z+1, r21	; 0x01
    2c58:	40 83       	st	Z, r20
    *w  = *h = 0;
    2c5a:	d6 01       	movw	r26, r12
    2c5c:	1d 92       	st	X+, r1
    2c5e:	1c 92       	st	X, r1
    2c60:	f7 01       	movw	r30, r14
    2c62:	11 82       	std	Z+1, r1	; 0x01
    2c64:	10 82       	st	Z, r1

    int16_t minx = _width, miny = _height, maxx = -1, maxy = -1;
    2c66:	80 91 49 01 	lds	r24, 0x0149
    2c6a:	90 91 4a 01 	lds	r25, 0x014A
    2c6e:	9a 83       	std	Y+2, r25	; 0x02
    2c70:	89 83       	std	Y+1, r24	; 0x01
    2c72:	80 91 4f 01 	lds	r24, 0x014F
    2c76:	90 91 50 01 	lds	r25, 0x0150
    2c7a:	9c 83       	std	Y+4, r25	; 0x04
    2c7c:	8b 83       	std	Y+3, r24	; 0x03
    2c7e:	8f ef       	ldi	r24, 0xFF	; 255
    2c80:	9f ef       	ldi	r25, 0xFF	; 255
    2c82:	9e 83       	std	Y+6, r25	; 0x06
    2c84:	8d 83       	std	Y+5, r24	; 0x05
    2c86:	98 87       	std	Y+8, r25	; 0x08
    2c88:	8f 83       	std	Y+7, r24	; 0x07

    while((c = *str++))
        charBounds(c, &x, &y, &minx, &miny, &maxx, &maxy);
    2c8a:	b7 e0       	ldi	r27, 0x07	; 7
    2c8c:	2b 2e       	mov	r2, r27
    2c8e:	31 2c       	mov	r3, r1
    2c90:	2c 0e       	add	r2, r28
    2c92:	3d 1e       	adc	r3, r29
    2c94:	2e 01       	movw	r4, r28
    2c96:	08 94       	sec
    2c98:	41 1c       	adc	r4, r1
    2c9a:	51 1c       	adc	r5, r1
    2c9c:	12 c0       	rjmp	.+36     	; 0x2cc2 <getTextBounds+0xbe>
    2c9e:	be 01       	movw	r22, r28
    2ca0:	67 5f       	subi	r22, 0xF7	; 247
    2ca2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ca4:	ae 01       	movw	r20, r28
    2ca6:	45 5f       	subi	r20, 0xF5	; 245
    2ca8:	5f 4f       	sbci	r21, 0xFF	; 255
    2caa:	92 01       	movw	r18, r4
    2cac:	8e 01       	movw	r16, r28
    2cae:	0d 5f       	subi	r16, 0xFD	; 253
    2cb0:	1f 4f       	sbci	r17, 0xFF	; 255
    2cb2:	a5 e0       	ldi	r26, 0x05	; 5
    2cb4:	ea 2e       	mov	r14, r26
    2cb6:	f1 2c       	mov	r15, r1
    2cb8:	ec 0e       	add	r14, r28
    2cba:	fd 1e       	adc	r15, r29
    2cbc:	61 01       	movw	r12, r2
    2cbe:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <charBounds>
    *y1 = y;
    *w  = *h = 0;

    int16_t minx = _width, miny = _height, maxx = -1, maxy = -1;

    while((c = *str++))
    2cc2:	d4 01       	movw	r26, r8
    2cc4:	8d 91       	ld	r24, X+
    2cc6:	4d 01       	movw	r8, r26
    2cc8:	88 23       	and	r24, r24
    2cca:	49 f7       	brne	.-46     	; 0x2c9e <getTextBounds+0x9a>
        charBounds(c, &x, &y, &minx, &miny, &maxx, &maxy);

    if(maxx >= minx) {
    2ccc:	29 81       	ldd	r18, Y+1	; 0x01
    2cce:	3a 81       	ldd	r19, Y+2	; 0x02
    2cd0:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd2:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd4:	82 17       	cp	r24, r18
    2cd6:	93 07       	cpc	r25, r19
    2cd8:	4c f0       	brlt	.+18     	; 0x2cec <getTextBounds+0xe8>
        *x1 = minx;
    2cda:	f5 01       	movw	r30, r10
    2cdc:	31 83       	std	Z+1, r19	; 0x01
    2cde:	20 83       	st	Z, r18
        *w  = maxx - minx + 1;
    2ce0:	01 96       	adiw	r24, 0x01	; 1
    2ce2:	82 1b       	sub	r24, r18
    2ce4:	93 0b       	sbc	r25, r19
    2ce6:	d3 01       	movw	r26, r6
    2ce8:	8d 93       	st	X+, r24
    2cea:	9c 93       	st	X, r25
    }
    if(maxy >= miny) {
    2cec:	2b 81       	ldd	r18, Y+3	; 0x03
    2cee:	3c 81       	ldd	r19, Y+4	; 0x04
    2cf0:	8f 81       	ldd	r24, Y+7	; 0x07
    2cf2:	98 85       	ldd	r25, Y+8	; 0x08
    2cf4:	82 17       	cp	r24, r18
    2cf6:	93 07       	cpc	r25, r19
    2cf8:	5c f0       	brlt	.+22     	; 0x2d10 <getTextBounds+0x10c>
        *y1 = miny;
    2cfa:	ed 85       	ldd	r30, Y+13	; 0x0d
    2cfc:	fe 85       	ldd	r31, Y+14	; 0x0e
    2cfe:	31 83       	std	Z+1, r19	; 0x01
    2d00:	20 83       	st	Z, r18
        *h  = maxy - miny + 1;
    2d02:	01 96       	adiw	r24, 0x01	; 1
    2d04:	82 1b       	sub	r24, r18
    2d06:	93 0b       	sbc	r25, r19
    2d08:	af 85       	ldd	r26, Y+15	; 0x0f
    2d0a:	b8 89       	ldd	r27, Y+16	; 0x10
    2d0c:	8d 93       	st	X+, r24
    2d0e:	9c 93       	st	X, r25
    }
}
    2d10:	60 96       	adiw	r28, 0x10	; 16
    2d12:	0f b6       	in	r0, 0x3f	; 63
    2d14:	f8 94       	cli
    2d16:	de bf       	out	0x3e, r29	; 62
    2d18:	0f be       	out	0x3f, r0	; 63
    2d1a:	cd bf       	out	0x3d, r28	; 61
    2d1c:	cf 91       	pop	r28
    2d1e:	df 91       	pop	r29
    2d20:	1f 91       	pop	r17
    2d22:	0f 91       	pop	r16
    2d24:	ff 90       	pop	r15
    2d26:	ef 90       	pop	r14
    2d28:	df 90       	pop	r13
    2d2a:	cf 90       	pop	r12
    2d2c:	bf 90       	pop	r11
    2d2e:	af 90       	pop	r10
    2d30:	9f 90       	pop	r9
    2d32:	8f 90       	pop	r8
    2d34:	7f 90       	pop	r7
    2d36:	6f 90       	pop	r6
    2d38:	5f 90       	pop	r5
    2d3a:	4f 90       	pop	r4
    2d3c:	3f 90       	pop	r3
    2d3e:	2f 90       	pop	r2
    2d40:	08 95       	ret

00002d42 <width>:
#endif

// Return the size of the display (per current rotation)
int16_t width(void)  {
    return _width;
}
    2d42:	80 91 49 01 	lds	r24, 0x0149
    2d46:	90 91 4a 01 	lds	r25, 0x014A
    2d4a:	08 95       	ret

00002d4c <height>:

int16_t height(void)  {
    return _height;
}
    2d4c:	80 91 4f 01 	lds	r24, 0x014F
    2d50:	90 91 50 01 	lds	r25, 0x0150
    2d54:	08 95       	ret

00002d56 <invertDisplay>:

void invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
    2d56:	08 95       	ret

00002d58 <_setFont>:
#define CENTER 9998
#define disp_x_size _width - 1  //TFTWIDTH //
#define disp_y_size _height - 1 //TFTHEIGHT //


void _setFont(const uint8_t * font) {
    2d58:	fc 01       	movw	r30, r24
#if 1
	cfont.font     = font;
    2d5a:	90 93 40 01 	sts	0x0140, r25
    2d5e:	80 93 3f 01 	sts	0x013F, r24
	cfont.x_size   = fontbyte(0);
    2d62:	84 91       	lpm	r24, Z+
    2d64:	80 93 41 01 	sts	0x0141, r24
	cfont.y_size   = fontbyte(1);
    2d68:	31 96       	adiw	r30, 0x01	; 1
    2d6a:	84 91       	lpm	r24, Z+
    2d6c:	80 93 42 01 	sts	0x0142, r24
	cfont.offset   = fontbyte(2);
    2d70:	31 96       	adiw	r30, 0x01	; 1
    2d72:	84 91       	lpm	r24, Z+
    2d74:	80 93 43 01 	sts	0x0143, r24
	cfont.numchars = fontbyte(3);
    2d78:	31 96       	adiw	r30, 0x01	; 1
    2d7a:	e4 91       	lpm	r30, Z+
    2d7c:	e0 93 44 01 	sts	0x0144, r30
#endif
}
    2d80:	08 95       	ret

00002d82 <setColor>:

void setColor(uint16_t color)
{
	fch = (uint8_t)(color >> 8);
    2d82:	90 93 38 01 	sts	0x0138, r25
	fcl = (uint8_t)(color & 0xFF);
    2d86:	80 93 39 01 	sts	0x0139, r24
}
    2d8a:	08 95       	ret

00002d8c <setBackColor>:

void setBackColor(uint32_t color)
{
    2d8c:	9b 01       	movw	r18, r22
    2d8e:	ac 01       	movw	r20, r24
	if (color == VGA_TRANSPARENT)
    2d90:	2f 3f       	cpi	r18, 0xFF	; 255
    2d92:	8f ef       	ldi	r24, 0xFF	; 255
    2d94:	38 07       	cpc	r19, r24
    2d96:	8f ef       	ldi	r24, 0xFF	; 255
    2d98:	48 07       	cpc	r20, r24
    2d9a:	8f ef       	ldi	r24, 0xFF	; 255
    2d9c:	58 07       	cpc	r21, r24
    2d9e:	21 f4       	brne	.+8      	; 0x2da8 <setBackColor+0x1c>
		_transparent = true;
    2da0:	81 e0       	ldi	r24, 0x01	; 1
    2da2:	80 93 3e 01 	sts	0x013E, r24
    2da6:	08 95       	ret
	else
	{
		bch = (uint8_t)(color >> 8);
    2da8:	bb 27       	eor	r27, r27
    2daa:	a5 2f       	mov	r26, r21
    2dac:	94 2f       	mov	r25, r20
    2dae:	83 2f       	mov	r24, r19
    2db0:	80 93 3d 01 	sts	0x013D, r24
		bcl = (uint8_t)(color & 0xFF);
    2db4:	20 93 3a 01 	sts	0x013A, r18
		_transparent = false;
    2db8:	10 92 3e 01 	sts	0x013E, r1
    2dbc:	08 95       	ret

00002dbe <writeFastVLine>:
void writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
    2dbe:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <drawFastVLine>
}
    2dc2:	08 95       	ret

00002dc4 <fillCircleHelper>:
    endWrite();
}

// Used to do circles and roundrects
void fillCircleHelper(int16_t x0, int16_t y0, int16_t r,
        uint8_t cornername, int16_t delta, uint16_t color) {
    2dc4:	2f 92       	push	r2
    2dc6:	3f 92       	push	r3
    2dc8:	4f 92       	push	r4
    2dca:	5f 92       	push	r5
    2dcc:	6f 92       	push	r6
    2dce:	7f 92       	push	r7
    2dd0:	8f 92       	push	r8
    2dd2:	9f 92       	push	r9
    2dd4:	af 92       	push	r10
    2dd6:	bf 92       	push	r11
    2dd8:	cf 92       	push	r12
    2dda:	df 92       	push	r13
    2ddc:	ef 92       	push	r14
    2dde:	ff 92       	push	r15
    2de0:	0f 93       	push	r16
    2de2:	1f 93       	push	r17
    2de4:	df 93       	push	r29
    2de6:	cf 93       	push	r28
    2de8:	cd b7       	in	r28, 0x3d	; 61
    2dea:	de b7       	in	r29, 0x3e	; 62
    2dec:	2a 97       	sbiw	r28, 0x0a	; 10
    2dee:	0f b6       	in	r0, 0x3f	; 63
    2df0:	f8 94       	cli
    2df2:	de bf       	out	0x3e, r29	; 62
    2df4:	0f be       	out	0x3f, r0	; 63
    2df6:	cd bf       	out	0x3d, r28	; 61
    2df8:	2c 01       	movw	r4, r24
    2dfa:	7c 83       	std	Y+4, r23	; 0x04
    2dfc:	6b 83       	std	Y+3, r22	; 0x03
    2dfe:	37 01       	movw	r6, r14

    int16_t f     = 1 - r;
    2e00:	e1 e0       	ldi	r30, 0x01	; 1
    2e02:	ee 2e       	mov	r14, r30
    2e04:	f1 2c       	mov	r15, r1
    2e06:	e4 1a       	sub	r14, r20
    2e08:	f5 0a       	sbc	r15, r21
    int16_t ddF_x = 1;
    int16_t ddF_y = -2 * r;
    2e0a:	ca 01       	movw	r24, r20
    2e0c:	88 0f       	add	r24, r24
    2e0e:	99 1f       	adc	r25, r25
    2e10:	66 27       	eor	r22, r22
    2e12:	77 27       	eor	r23, r23
    2e14:	68 1b       	sub	r22, r24
    2e16:	79 0b       	sbc	r23, r25
    2e18:	7a 83       	std	Y+2, r23	; 0x02
    2e1a:	69 83       	std	Y+1, r22	; 0x01
    2e1c:	8b 80       	ldd	r8, Y+3	; 0x03
    2e1e:	9c 80       	ldd	r9, Y+4	; 0x04
    2e20:	08 94       	sec
    2e22:	81 08       	sbc	r8, r1
    2e24:	91 08       	sbc	r9, r1
    2e26:	63 e0       	ldi	r22, 0x03	; 3
    2e28:	a6 2e       	mov	r10, r22
    2e2a:	b1 2c       	mov	r11, r1
    2e2c:	a0 0e       	add	r10, r16
    2e2e:	b1 1e       	adc	r11, r17
    2e30:	5a 87       	std	Y+10, r21	; 0x0a
    2e32:	49 87       	std	Y+9, r20	; 0x09
    2e34:	31 e0       	ldi	r19, 0x01	; 1
    2e36:	23 2e       	mov	r2, r19
    2e38:	31 2c       	mov	r3, r1
    2e3a:	cc 24       	eor	r12, r12
    2e3c:	dd 24       	eor	r13, r13
        }
        x++;
        ddF_x += 2;
        f     += ddF_x;

        if (cornername & 0x1) {
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	c9 01       	movw	r24, r18
    2e42:	81 70       	andi	r24, 0x01	; 1
    2e44:	90 70       	andi	r25, 0x00	; 0
    2e46:	9e 83       	std	Y+6, r25	; 0x06
    2e48:	8d 83       	std	Y+5, r24	; 0x05
void writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
    2e4a:	0f 5f       	subi	r16, 0xFF	; 255
    2e4c:	1f 4f       	sbci	r17, 0xFF	; 255

        if (cornername & 0x1) {
            writeFastVLine(x0+x, y0-y, 2*y+1+delta, color);
            writeFastVLine(x0+y, y0-x, 2*x+1+delta, color);
        }
        if (cornername & 0x2) {
    2e4e:	f9 01       	movw	r30, r18
    2e50:	e2 70       	andi	r30, 0x02	; 2
    2e52:	f0 70       	andi	r31, 0x00	; 0
    2e54:	f8 87       	std	Y+8, r31	; 0x08
    2e56:	ef 83       	std	Y+7, r30	; 0x07
    2e58:	5d c0       	rjmp	.+186    	; 0x2f14 <fillCircleHelper+0x150>
    int16_t ddF_y = -2 * r;
    int16_t x     = 0;
    int16_t y     = r;

    while (x<y) {
        if (f >= 0) {
    2e5a:	f7 fc       	sbrc	r15, 7
    2e5c:	0e c0       	rjmp	.+28     	; 0x2e7a <fillCircleHelper+0xb6>
            y--;
    2e5e:	29 85       	ldd	r18, Y+9	; 0x09
    2e60:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e62:	21 50       	subi	r18, 0x01	; 1
    2e64:	30 40       	sbci	r19, 0x00	; 0
    2e66:	3a 87       	std	Y+10, r19	; 0x0a
    2e68:	29 87       	std	Y+9, r18	; 0x09
            ddF_y += 2;
    2e6a:	69 81       	ldd	r22, Y+1	; 0x01
    2e6c:	7a 81       	ldd	r23, Y+2	; 0x02
    2e6e:	6e 5f       	subi	r22, 0xFE	; 254
    2e70:	7f 4f       	sbci	r23, 0xFF	; 255
    2e72:	7a 83       	std	Y+2, r23	; 0x02
    2e74:	69 83       	std	Y+1, r22	; 0x01
            f     += ddF_y;
    2e76:	e6 0e       	add	r14, r22
    2e78:	f7 1e       	adc	r15, r23
        }
        x++;
    2e7a:	08 94       	sec
    2e7c:	c1 1c       	adc	r12, r1
    2e7e:	d1 1c       	adc	r13, r1
        ddF_x += 2;
    2e80:	82 e0       	ldi	r24, 0x02	; 2
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	28 0e       	add	r2, r24
    2e86:	39 1e       	adc	r3, r25
        f     += ddF_x;
    2e88:	e2 0c       	add	r14, r2
    2e8a:	f3 1c       	adc	r15, r3

        if (cornername & 0x1) {
    2e8c:	ed 81       	ldd	r30, Y+5	; 0x05
    2e8e:	fe 81       	ldd	r31, Y+6	; 0x06
    2e90:	ef 2b       	or	r30, r31
    2e92:	d1 f0       	breq	.+52     	; 0x2ec8 <fillCircleHelper+0x104>
void writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
    2e94:	6b 81       	ldd	r22, Y+3	; 0x03
    2e96:	7c 81       	ldd	r23, Y+4	; 0x04
    2e98:	29 85       	ldd	r18, Y+9	; 0x09
    2e9a:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e9c:	62 1b       	sub	r22, r18
    2e9e:	73 0b       	sbc	r23, r19
    2ea0:	a9 01       	movw	r20, r18
    2ea2:	44 0f       	add	r20, r20
    2ea4:	55 1f       	adc	r21, r21
    2ea6:	40 0f       	add	r20, r16
    2ea8:	51 1f       	adc	r21, r17
    2eaa:	c6 01       	movw	r24, r12
    2eac:	84 0d       	add	r24, r4
    2eae:	95 1d       	adc	r25, r5
    2eb0:	93 01       	movw	r18, r6
    2eb2:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <drawFastVLine>
    2eb6:	89 85       	ldd	r24, Y+9	; 0x09
    2eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eba:	84 0d       	add	r24, r4
    2ebc:	95 1d       	adc	r25, r5
    2ebe:	b4 01       	movw	r22, r8
    2ec0:	a5 01       	movw	r20, r10
    2ec2:	93 01       	movw	r18, r6
    2ec4:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <drawFastVLine>

        if (cornername & 0x1) {
            writeFastVLine(x0+x, y0-y, 2*y+1+delta, color);
            writeFastVLine(x0+y, y0-x, 2*x+1+delta, color);
        }
        if (cornername & 0x2) {
    2ec8:	6f 81       	ldd	r22, Y+7	; 0x07
    2eca:	78 85       	ldd	r23, Y+8	; 0x08
    2ecc:	67 2b       	or	r22, r23
    2ece:	d9 f0       	breq	.+54     	; 0x2f06 <fillCircleHelper+0x142>
void writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
    2ed0:	6b 81       	ldd	r22, Y+3	; 0x03
    2ed2:	7c 81       	ldd	r23, Y+4	; 0x04
    2ed4:	89 85       	ldd	r24, Y+9	; 0x09
    2ed6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed8:	68 1b       	sub	r22, r24
    2eda:	79 0b       	sbc	r23, r25
    2edc:	ac 01       	movw	r20, r24
    2ede:	44 0f       	add	r20, r20
    2ee0:	55 1f       	adc	r21, r21
    2ee2:	40 0f       	add	r20, r16
    2ee4:	51 1f       	adc	r21, r17
    2ee6:	c2 01       	movw	r24, r4
    2ee8:	8c 19       	sub	r24, r12
    2eea:	9d 09       	sbc	r25, r13
    2eec:	93 01       	movw	r18, r6
    2eee:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <drawFastVLine>
    2ef2:	c2 01       	movw	r24, r4
    2ef4:	e9 85       	ldd	r30, Y+9	; 0x09
    2ef6:	fa 85       	ldd	r31, Y+10	; 0x0a
    2ef8:	8e 1b       	sub	r24, r30
    2efa:	9f 0b       	sbc	r25, r31
    2efc:	b4 01       	movw	r22, r8
    2efe:	a5 01       	movw	r20, r10
    2f00:	93 01       	movw	r18, r6
    2f02:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <drawFastVLine>
    2f06:	08 94       	sec
    2f08:	81 08       	sbc	r8, r1
    2f0a:	91 08       	sbc	r9, r1
    2f0c:	22 e0       	ldi	r18, 0x02	; 2
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	a2 0e       	add	r10, r18
    2f12:	b3 1e       	adc	r11, r19
    int16_t ddF_x = 1;
    int16_t ddF_y = -2 * r;
    int16_t x     = 0;
    int16_t y     = r;

    while (x<y) {
    2f14:	69 85       	ldd	r22, Y+9	; 0x09
    2f16:	7a 85       	ldd	r23, Y+10	; 0x0a
    2f18:	c6 16       	cp	r12, r22
    2f1a:	d7 06       	cpc	r13, r23
    2f1c:	0c f4       	brge	.+2      	; 0x2f20 <fillCircleHelper+0x15c>
    2f1e:	9d cf       	rjmp	.-198    	; 0x2e5a <fillCircleHelper+0x96>
        if (cornername & 0x2) {
            writeFastVLine(x0-x, y0-y, 2*y+1+delta, color);
            writeFastVLine(x0-y, y0-x, 2*x+1+delta, color);
        }
    }
}
    2f20:	2a 96       	adiw	r28, 0x0a	; 10
    2f22:	0f b6       	in	r0, 0x3f	; 63
    2f24:	f8 94       	cli
    2f26:	de bf       	out	0x3e, r29	; 62
    2f28:	0f be       	out	0x3f, r0	; 63
    2f2a:	cd bf       	out	0x3d, r28	; 61
    2f2c:	cf 91       	pop	r28
    2f2e:	df 91       	pop	r29
    2f30:	1f 91       	pop	r17
    2f32:	0f 91       	pop	r16
    2f34:	ff 90       	pop	r15
    2f36:	ef 90       	pop	r14
    2f38:	df 90       	pop	r13
    2f3a:	cf 90       	pop	r12
    2f3c:	bf 90       	pop	r11
    2f3e:	af 90       	pop	r10
    2f40:	9f 90       	pop	r9
    2f42:	8f 90       	pop	r8
    2f44:	7f 90       	pop	r7
    2f46:	6f 90       	pop	r6
    2f48:	5f 90       	pop	r5
    2f4a:	4f 90       	pop	r4
    2f4c:	3f 90       	pop	r3
    2f4e:	2f 90       	pop	r2
    2f50:	08 95       	ret

00002f52 <fillCircle>:
        }
    }
}

void fillCircle(int16_t x0, int16_t y0, int16_t r,
        uint16_t color) {
    2f52:	af 92       	push	r10
    2f54:	bf 92       	push	r11
    2f56:	cf 92       	push	r12
    2f58:	df 92       	push	r13
    2f5a:	ef 92       	push	r14
    2f5c:	ff 92       	push	r15
    2f5e:	0f 93       	push	r16
    2f60:	1f 93       	push	r17
    2f62:	6c 01       	movw	r12, r24
    2f64:	5b 01       	movw	r10, r22
    2f66:	8a 01       	movw	r16, r20
    2f68:	79 01       	movw	r14, r18
void writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
    2f6a:	64 1b       	sub	r22, r20
    2f6c:	75 0b       	sbc	r23, r21
    2f6e:	44 0f       	add	r20, r20
    2f70:	55 1f       	adc	r21, r21
    2f72:	4f 5f       	subi	r20, 0xFF	; 255
    2f74:	5f 4f       	sbci	r21, 0xFF	; 255
    2f76:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <drawFastVLine>

void fillCircle(int16_t x0, int16_t y0, int16_t r,
        uint16_t color) {
    startWrite();
    writeFastVLine(x0, y0-r, 2*r+1, color);
    fillCircleHelper(x0, y0, r, 3, 0, color);
    2f7a:	c6 01       	movw	r24, r12
    2f7c:	b5 01       	movw	r22, r10
    2f7e:	a8 01       	movw	r20, r16
    2f80:	23 e0       	ldi	r18, 0x03	; 3
    2f82:	00 e0       	ldi	r16, 0x00	; 0
    2f84:	10 e0       	ldi	r17, 0x00	; 0
    2f86:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <fillCircleHelper>
    endWrite();
}
    2f8a:	1f 91       	pop	r17
    2f8c:	0f 91       	pop	r16
    2f8e:	ff 90       	pop	r15
    2f90:	ef 90       	pop	r14
    2f92:	df 90       	pop	r13
    2f94:	cf 90       	pop	r12
    2f96:	bf 90       	pop	r11
    2f98:	af 90       	pop	r10
    2f9a:	08 95       	ret

00002f9c <writeFastHLine>:
void writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
    2f9c:	0e 94 91 27 	call	0x4f22	; 0x4f22 <drawFastHLine>
}
    2fa0:	08 95       	ret

00002fa2 <fillTriangle>:
    drawLine(x2, y2, x0, y0, color);
}

// Fill a triangle
void fillTriangle(int16_t x0, int16_t y0,
        int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
    2fa2:	2f 92       	push	r2
    2fa4:	3f 92       	push	r3
    2fa6:	4f 92       	push	r4
    2fa8:	5f 92       	push	r5
    2faa:	6f 92       	push	r6
    2fac:	7f 92       	push	r7
    2fae:	8f 92       	push	r8
    2fb0:	9f 92       	push	r9
    2fb2:	af 92       	push	r10
    2fb4:	bf 92       	push	r11
    2fb6:	cf 92       	push	r12
    2fb8:	df 92       	push	r13
    2fba:	ef 92       	push	r14
    2fbc:	ff 92       	push	r15
    2fbe:	0f 93       	push	r16
    2fc0:	1f 93       	push	r17
    2fc2:	df 93       	push	r29
    2fc4:	cf 93       	push	r28
    2fc6:	cd b7       	in	r28, 0x3d	; 61
    2fc8:	de b7       	in	r29, 0x3e	; 62
    2fca:	e2 97       	sbiw	r28, 0x32	; 50
    2fcc:	0f b6       	in	r0, 0x3f	; 63
    2fce:	f8 94       	cli
    2fd0:	de bf       	out	0x3e, r29	; 62
    2fd2:	0f be       	out	0x3f, r0	; 63
    2fd4:	cd bf       	out	0x3d, r28	; 61
    2fd6:	9a 87       	std	Y+10, r25	; 0x0a
    2fd8:	89 87       	std	Y+9, r24	; 0x09
    2fda:	7c 87       	std	Y+12, r23	; 0x0c
    2fdc:	6b 87       	std	Y+11, r22	; 0x0b
    2fde:	1a 01       	movw	r2, r20
    2fe0:	59 01       	movw	r10, r18
    2fe2:	fe 86       	std	Y+14, r15	; 0x0e
    2fe4:	ed 86       	std	Y+13, r14	; 0x0d
    2fe6:	d8 8a       	std	Y+16, r13	; 0x10
    2fe8:	cf 86       	std	Y+15, r12	; 0x0f

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
    2fea:	26 17       	cp	r18, r22
    2fec:	37 07       	cpc	r19, r23
    2fee:	3c f4       	brge	.+14     	; 0x2ffe <fillTriangle+0x5c>
    2ff0:	29 84       	ldd	r2, Y+9	; 0x09
    2ff2:	3a 84       	ldd	r3, Y+10	; 0x0a
    2ff4:	5a 87       	std	Y+10, r21	; 0x0a
    2ff6:	49 87       	std	Y+9, r20	; 0x09
    2ff8:	5b 01       	movw	r10, r22
    2ffa:	3c 87       	std	Y+12, r19	; 0x0c
    2ffc:	2b 87       	std	Y+11, r18	; 0x0b
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
    }
    if (y1 > y2) {
    2ffe:	2d 85       	ldd	r18, Y+13	; 0x0d
    3000:	3e 85       	ldd	r19, Y+14	; 0x0e
    3002:	2a 15       	cp	r18, r10
    3004:	3b 05       	cpc	r19, r11
    3006:	44 f4       	brge	.+16     	; 0x3018 <fillTriangle+0x76>
    3008:	c8 01       	movw	r24, r16
    300a:	81 01       	movw	r16, r2
    300c:	1c 01       	movw	r2, r24
    300e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3010:	9e 85       	ldd	r25, Y+14	; 0x0e
    3012:	be 86       	std	Y+14, r11	; 0x0e
    3014:	ad 86       	std	Y+13, r10	; 0x0d
    3016:	5c 01       	movw	r10, r24
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
    }
    if (y0 > y1) {
    3018:	4b 85       	ldd	r20, Y+11	; 0x0b
    301a:	5c 85       	ldd	r21, Y+12	; 0x0c
    301c:	a4 16       	cp	r10, r20
    301e:	b5 06       	cpc	r11, r21
    3020:	4c f4       	brge	.+18     	; 0x3034 <fillTriangle+0x92>
    3022:	c1 01       	movw	r24, r2
    3024:	29 84       	ldd	r2, Y+9	; 0x09
    3026:	3a 84       	ldd	r3, Y+10	; 0x0a
    3028:	9a 87       	std	Y+10, r25	; 0x0a
    302a:	89 87       	std	Y+9, r24	; 0x09
    302c:	c5 01       	movw	r24, r10
    302e:	5a 01       	movw	r10, r20
    3030:	9c 87       	std	Y+12, r25	; 0x0c
    3032:	8b 87       	std	Y+11, r24	; 0x0b
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
    }

startWrite();
    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
    3034:	6b 85       	ldd	r22, Y+11	; 0x0b
    3036:	7c 85       	ldd	r23, Y+12	; 0x0c
    3038:	8d 85       	ldd	r24, Y+13	; 0x0d
    303a:	9e 85       	ldd	r25, Y+14	; 0x0e
    303c:	68 17       	cp	r22, r24
    303e:	79 07       	cpc	r23, r25
    3040:	39 f5       	brne	.+78     	; 0x3090 <fillTriangle+0xee>
        a = b = x0;
        if(x1 < a)      a = x1;
    3042:	a9 85       	ldd	r26, Y+9	; 0x09
    3044:	ba 85       	ldd	r27, Y+10	; 0x0a
    3046:	2a 16       	cp	r2, r26
    3048:	3b 06       	cpc	r3, r27
    304a:	1c f4       	brge	.+6      	; 0x3052 <fillTriangle+0xb0>
    304c:	c1 01       	movw	r24, r2
    304e:	ad 01       	movw	r20, r26
    3050:	0b c0       	rjmp	.+22     	; 0x3068 <fillTriangle+0xc6>
        else if(x1 > b) b = x1;
    3052:	e9 85       	ldd	r30, Y+9	; 0x09
    3054:	fa 85       	ldd	r31, Y+10	; 0x0a
    3056:	e2 15       	cp	r30, r2
    3058:	f3 05       	cpc	r31, r3
    305a:	1c f4       	brge	.+6      	; 0x3062 <fillTriangle+0xc0>
    305c:	cf 01       	movw	r24, r30
    305e:	a1 01       	movw	r20, r2
    3060:	03 c0       	rjmp	.+6      	; 0x3068 <fillTriangle+0xc6>
    3062:	89 85       	ldd	r24, Y+9	; 0x09
    3064:	9a 85       	ldd	r25, Y+10	; 0x0a
    3066:	ac 01       	movw	r20, r24
        if(x2 < a)      a = x2;
    3068:	08 17       	cp	r16, r24
    306a:	19 07       	cpc	r17, r25
    306c:	14 f4       	brge	.+4      	; 0x3072 <fillTriangle+0xd0>
    306e:	c8 01       	movw	r24, r16
    3070:	04 c0       	rjmp	.+8      	; 0x307a <fillTriangle+0xd8>
        else if(x2 > b) b = x2;
    3072:	40 17       	cp	r20, r16
    3074:	51 07       	cpc	r21, r17
    3076:	0c f4       	brge	.+2      	; 0x307a <fillTriangle+0xd8>
    3078:	a8 01       	movw	r20, r16
void writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
    307a:	4f 5f       	subi	r20, 0xFF	; 255
    307c:	5f 4f       	sbci	r21, 0xFF	; 255
    307e:	48 1b       	sub	r20, r24
    3080:	59 0b       	sbc	r21, r25
    3082:	6b 85       	ldd	r22, Y+11	; 0x0b
    3084:	7c 85       	ldd	r23, Y+12	; 0x0c
    3086:	2f 85       	ldd	r18, Y+15	; 0x0f
    3088:	38 89       	ldd	r19, Y+16	; 0x10
    308a:	0e 94 91 27 	call	0x4f22	; 0x4f22 <drawFastHLine>
    308e:	2e c1       	rjmp	.+604    	; 0x32ec <fillTriangle+0x34a>
        endWrite();
        return;
    }

    int16_t
    dx01 = x1 - x0,
    3090:	91 01       	movw	r18, r2
    3092:	49 85       	ldd	r20, Y+9	; 0x09
    3094:	5a 85       	ldd	r21, Y+10	; 0x0a
    3096:	24 1b       	sub	r18, r20
    3098:	35 0b       	sbc	r19, r21
    dy01 = y1 - y0,
    309a:	c5 01       	movw	r24, r10
    309c:	6b 85       	ldd	r22, Y+11	; 0x0b
    309e:	7c 85       	ldd	r23, Y+12	; 0x0c
    30a0:	86 1b       	sub	r24, r22
    30a2:	97 0b       	sbc	r25, r23
    dx02 = x2 - x0,
    30a4:	d8 01       	movw	r26, r16
    30a6:	a4 1b       	sub	r26, r20
    30a8:	b5 0b       	sbc	r27, r21
    30aa:	b8 87       	std	Y+8, r27	; 0x08
    30ac:	af 83       	std	Y+7, r26	; 0x07
    dy02 = y2 - y0,
    30ae:	ed 85       	ldd	r30, Y+13	; 0x0d
    30b0:	fe 85       	ldd	r31, Y+14	; 0x0e
    30b2:	e6 1b       	sub	r30, r22
    30b4:	f7 0b       	sbc	r31, r23
    30b6:	fe 83       	std	Y+6, r31	; 0x06
    30b8:	ed 83       	std	Y+5, r30	; 0x05
    dx12 = x2 - x1,
    30ba:	a8 01       	movw	r20, r16
    30bc:	42 19       	sub	r20, r2
    30be:	53 09       	sbc	r21, r3
    30c0:	5c 83       	std	Y+4, r21	; 0x04
    30c2:	4b 83       	std	Y+3, r20	; 0x03
    dy12 = y2 - y1;
    30c4:	6d 85       	ldd	r22, Y+13	; 0x0d
    30c6:	7e 85       	ldd	r23, Y+14	; 0x0e
    30c8:	6a 19       	sub	r22, r10
    30ca:	7b 09       	sbc	r23, r11
    30cc:	7a 83       	std	Y+2, r23	; 0x02
    30ce:	69 83       	std	Y+1, r22	; 0x01
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
    30d0:	ad 85       	ldd	r26, Y+13	; 0x0d
    30d2:	be 85       	ldd	r27, Y+14	; 0x0e
    30d4:	aa 16       	cp	r10, r26
    30d6:	bb 06       	cpc	r11, r27
    30d8:	11 f4       	brne	.+4      	; 0x30de <fillTriangle+0x13c>
    30da:	65 01       	movw	r12, r10
    30dc:	04 c0       	rjmp	.+8      	; 0x30e6 <fillTriangle+0x144>
    else         last = y1-1; // Skip it
    30de:	65 01       	movw	r12, r10
    30e0:	08 94       	sec
    30e2:	c1 08       	sbc	r12, r1
    30e4:	d1 08       	sbc	r13, r1
    30e6:	4b 84       	ldd	r4, Y+11	; 0x0b
    30e8:	5c 84       	ldd	r5, Y+12	; 0x0c
    30ea:	66 24       	eor	r6, r6
    30ec:	77 24       	eor	r7, r7
    30ee:	43 01       	movw	r8, r6
    30f0:	ee 24       	eor	r14, r14
    30f2:	ff 24       	eor	r15, r15
    30f4:	87 01       	movw	r16, r14

    for(y=y0; y<=last; y++) {
        a   = x0 + sa / dy01;
    30f6:	ac 01       	movw	r20, r24
    30f8:	66 27       	eor	r22, r22
    30fa:	57 fd       	sbrc	r21, 7
    30fc:	60 95       	com	r22
    30fe:	76 2f       	mov	r23, r22
    3100:	49 a3       	std	Y+33, r20	; 0x21
    3102:	5a a3       	std	Y+34, r21	; 0x22
    3104:	6b a3       	std	Y+35, r22	; 0x23
    3106:	7c a3       	std	Y+36, r23	; 0x24
        b   = x0 + sb / dy02;
    3108:	6d 81       	ldd	r22, Y+5	; 0x05
    310a:	7e 81       	ldd	r23, Y+6	; 0x06
    310c:	88 27       	eor	r24, r24
    310e:	77 fd       	sbrc	r23, 7
    3110:	80 95       	com	r24
    3112:	98 2f       	mov	r25, r24
    3114:	6d a3       	std	Y+37, r22	; 0x25
    3116:	7e a3       	std	Y+38, r23	; 0x26
    3118:	8f a3       	std	Y+39, r24	; 0x27
    311a:	98 a7       	std	Y+40, r25	; 0x28
        sa += dx01;
    311c:	c9 01       	movw	r24, r18
    311e:	aa 27       	eor	r26, r26
    3120:	97 fd       	sbrc	r25, 7
    3122:	a0 95       	com	r26
    3124:	ba 2f       	mov	r27, r26
    3126:	89 a7       	std	Y+41, r24	; 0x29
    3128:	9a a7       	std	Y+42, r25	; 0x2a
    312a:	ab a7       	std	Y+43, r26	; 0x2b
    312c:	bc a7       	std	Y+44, r27	; 0x2c
        sb += dx02;
    312e:	2f 81       	ldd	r18, Y+7	; 0x07
    3130:	38 85       	ldd	r19, Y+8	; 0x08
    3132:	44 27       	eor	r20, r20
    3134:	37 fd       	sbrc	r19, 7
    3136:	40 95       	com	r20
    3138:	54 2f       	mov	r21, r20
    313a:	2d a7       	std	Y+45, r18	; 0x2d
    313c:	3e a7       	std	Y+46, r19	; 0x2e
    313e:	4f a7       	std	Y+47, r20	; 0x2f
    3140:	58 ab       	std	Y+48, r21	; 0x30
    3142:	43 c0       	rjmp	.+134    	; 0x31ca <fillTriangle+0x228>
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
    else         last = y1-1; // Skip it

    for(y=y0; y<=last; y++) {
        a   = x0 + sa / dy01;
    3144:	c4 01       	movw	r24, r8
    3146:	b3 01       	movw	r22, r6
    3148:	29 a1       	ldd	r18, Y+33	; 0x21
    314a:	3a a1       	ldd	r19, Y+34	; 0x22
    314c:	4b a1       	ldd	r20, Y+35	; 0x23
    314e:	5c a1       	ldd	r21, Y+36	; 0x24
    3150:	0e 94 55 29 	call	0x52aa	; 0x52aa <__divmodsi4>
    3154:	69 85       	ldd	r22, Y+9	; 0x09
    3156:	7a 85       	ldd	r23, Y+10	; 0x0a
    3158:	62 0f       	add	r22, r18
    315a:	73 1f       	adc	r23, r19
    315c:	7a ab       	std	Y+50, r23	; 0x32
    315e:	69 ab       	std	Y+49, r22	; 0x31
        b   = x0 + sb / dy02;
    3160:	c8 01       	movw	r24, r16
    3162:	b7 01       	movw	r22, r14
    3164:	2d a1       	ldd	r18, Y+37	; 0x25
    3166:	3e a1       	ldd	r19, Y+38	; 0x26
    3168:	4f a1       	ldd	r20, Y+39	; 0x27
    316a:	58 a5       	ldd	r21, Y+40	; 0x28
    316c:	0e 94 55 29 	call	0x52aa	; 0x52aa <__divmodsi4>
    3170:	49 85       	ldd	r20, Y+9	; 0x09
    3172:	5a 85       	ldd	r21, Y+10	; 0x0a
    3174:	42 0f       	add	r20, r18
    3176:	53 1f       	adc	r21, r19
        sb += dx02;
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
    3178:	89 a9       	ldd	r24, Y+49	; 0x31
    317a:	9a a9       	ldd	r25, Y+50	; 0x32
    317c:	48 17       	cp	r20, r24
    317e:	59 07       	cpc	r21, r25
    3180:	2c f4       	brge	.+10     	; 0x318c <fillTriangle+0x1ea>
    3182:	ca 01       	movw	r24, r20
    3184:	49 a9       	ldd	r20, Y+49	; 0x31
    3186:	5a a9       	ldd	r21, Y+50	; 0x32
    3188:	9a ab       	std	Y+50, r25	; 0x32
    318a:	89 ab       	std	Y+49, r24	; 0x31
    else         last = y1-1; // Skip it

    for(y=y0; y<=last; y++) {
        a   = x0 + sa / dy01;
        b   = x0 + sb / dy02;
        sa += dx01;
    318c:	69 a5       	ldd	r22, Y+41	; 0x29
    318e:	7a a5       	ldd	r23, Y+42	; 0x2a
    3190:	8b a5       	ldd	r24, Y+43	; 0x2b
    3192:	9c a5       	ldd	r25, Y+44	; 0x2c
    3194:	66 0e       	add	r6, r22
    3196:	77 1e       	adc	r7, r23
    3198:	88 1e       	adc	r8, r24
    319a:	99 1e       	adc	r9, r25
        sb += dx02;
    319c:	8d a5       	ldd	r24, Y+45	; 0x2d
    319e:	9e a5       	ldd	r25, Y+46	; 0x2e
    31a0:	af a5       	ldd	r26, Y+47	; 0x2f
    31a2:	b8 a9       	ldd	r27, Y+48	; 0x30
    31a4:	e8 0e       	add	r14, r24
    31a6:	f9 1e       	adc	r15, r25
    31a8:	0a 1f       	adc	r16, r26
    31aa:	1b 1f       	adc	r17, r27
void writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
    31ac:	4f 5f       	subi	r20, 0xFF	; 255
    31ae:	5f 4f       	sbci	r21, 0xFF	; 255
    31b0:	a9 a9       	ldd	r26, Y+49	; 0x31
    31b2:	ba a9       	ldd	r27, Y+50	; 0x32
    31b4:	4a 1b       	sub	r20, r26
    31b6:	5b 0b       	sbc	r21, r27
    31b8:	cd 01       	movw	r24, r26
    31ba:	b2 01       	movw	r22, r4
    31bc:	2f 85       	ldd	r18, Y+15	; 0x0f
    31be:	38 89       	ldd	r19, Y+16	; 0x10
    31c0:	0e 94 91 27 	call	0x4f22	; 0x4f22 <drawFastHLine>
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
    else         last = y1-1; // Skip it

    for(y=y0; y<=last; y++) {
    31c4:	08 94       	sec
    31c6:	41 1c       	adc	r4, r1
    31c8:	51 1c       	adc	r5, r1
    31ca:	c4 14       	cp	r12, r4
    31cc:	d5 04       	cpc	r13, r5
    31ce:	0c f0       	brlt	.+2      	; 0x31d2 <fillTriangle+0x230>
    31d0:	b9 cf       	rjmp	.-142    	; 0x3144 <fillTriangle+0x1a2>
        writeFastHLine(a, y, b-a+1, color);
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = dx12 * (y - y1);
    31d2:	c2 01       	movw	r24, r4
    31d4:	8a 19       	sub	r24, r10
    31d6:	9b 09       	sbc	r25, r11
    31d8:	fc 01       	movw	r30, r24
    31da:	2b 81       	ldd	r18, Y+3	; 0x03
    31dc:	3c 81       	ldd	r19, Y+4	; 0x04
    31de:	e2 9f       	mul	r30, r18
    31e0:	c0 01       	movw	r24, r0
    31e2:	e3 9f       	mul	r30, r19
    31e4:	90 0d       	add	r25, r0
    31e6:	f2 9f       	mul	r31, r18
    31e8:	90 0d       	add	r25, r0
    31ea:	11 24       	eor	r1, r1
    31ec:	4c 01       	movw	r8, r24
    31ee:	aa 24       	eor	r10, r10
    31f0:	97 fc       	sbrc	r9, 7
    31f2:	a0 94       	com	r10
    31f4:	ba 2c       	mov	r11, r10
    sb = dx02 * (y - y0);
    31f6:	c2 01       	movw	r24, r4
    31f8:	4b 85       	ldd	r20, Y+11	; 0x0b
    31fa:	5c 85       	ldd	r21, Y+12	; 0x0c
    31fc:	84 1b       	sub	r24, r20
    31fe:	95 0b       	sbc	r25, r21
    3200:	bc 01       	movw	r22, r24
    3202:	af 81       	ldd	r26, Y+7	; 0x07
    3204:	b8 85       	ldd	r27, Y+8	; 0x08
    3206:	6a 9f       	mul	r22, r26
    3208:	c0 01       	movw	r24, r0
    320a:	6b 9f       	mul	r22, r27
    320c:	90 0d       	add	r25, r0
    320e:	7a 9f       	mul	r23, r26
    3210:	90 0d       	add	r25, r0
    3212:	11 24       	eor	r1, r1
    3214:	6c 01       	movw	r12, r24
    3216:	ee 24       	eor	r14, r14
    3218:	d7 fc       	sbrc	r13, 7
    321a:	e0 94       	com	r14
    321c:	fe 2c       	mov	r15, r14
    for(; y<=y2; y++) {
        a   = x1 + sa / dy12;
    321e:	29 81       	ldd	r18, Y+1	; 0x01
    3220:	3a 81       	ldd	r19, Y+2	; 0x02
    3222:	44 27       	eor	r20, r20
    3224:	37 fd       	sbrc	r19, 7
    3226:	40 95       	com	r20
    3228:	54 2f       	mov	r21, r20
    322a:	29 8b       	std	Y+17, r18	; 0x11
    322c:	3a 8b       	std	Y+18, r19	; 0x12
    322e:	4b 8b       	std	Y+19, r20	; 0x13
    3230:	5c 8b       	std	Y+20, r21	; 0x14
        b   = x0 + sb / dy02;
    3232:	4d 81       	ldd	r20, Y+5	; 0x05
    3234:	5e 81       	ldd	r21, Y+6	; 0x06
    3236:	66 27       	eor	r22, r22
    3238:	57 fd       	sbrc	r21, 7
    323a:	60 95       	com	r22
    323c:	76 2f       	mov	r23, r22
    323e:	4d 8b       	std	Y+21, r20	; 0x15
    3240:	5e 8b       	std	Y+22, r21	; 0x16
    3242:	6f 8b       	std	Y+23, r22	; 0x17
    3244:	78 8f       	std	Y+24, r23	; 0x18
        sa += dx12;
    3246:	6b 81       	ldd	r22, Y+3	; 0x03
    3248:	7c 81       	ldd	r23, Y+4	; 0x04
    324a:	88 27       	eor	r24, r24
    324c:	77 fd       	sbrc	r23, 7
    324e:	80 95       	com	r24
    3250:	98 2f       	mov	r25, r24
    3252:	69 8f       	std	Y+25, r22	; 0x19
    3254:	7a 8f       	std	Y+26, r23	; 0x1a
    3256:	8b 8f       	std	Y+27, r24	; 0x1b
    3258:	9c 8f       	std	Y+28, r25	; 0x1c
        sb += dx02;
    325a:	cd 01       	movw	r24, r26
    325c:	aa 27       	eor	r26, r26
    325e:	97 fd       	sbrc	r25, 7
    3260:	a0 95       	com	r26
    3262:	ba 2f       	mov	r27, r26
    3264:	8d 8f       	std	Y+29, r24	; 0x1d
    3266:	9e 8f       	std	Y+30, r25	; 0x1e
    3268:	af 8f       	std	Y+31, r26	; 0x1f
    326a:	b8 a3       	std	Y+32, r27	; 0x20
    326c:	3a c0       	rjmp	.+116    	; 0x32e2 <fillTriangle+0x340>
    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = dx12 * (y - y1);
    sb = dx02 * (y - y0);
    for(; y<=y2; y++) {
        a   = x1 + sa / dy12;
    326e:	c5 01       	movw	r24, r10
    3270:	b4 01       	movw	r22, r8
    3272:	29 89       	ldd	r18, Y+17	; 0x11
    3274:	3a 89       	ldd	r19, Y+18	; 0x12
    3276:	4b 89       	ldd	r20, Y+19	; 0x13
    3278:	5c 89       	ldd	r21, Y+20	; 0x14
    327a:	0e 94 55 29 	call	0x52aa	; 0x52aa <__divmodsi4>
    327e:	81 01       	movw	r16, r2
    3280:	02 0f       	add	r16, r18
    3282:	13 1f       	adc	r17, r19
        b   = x0 + sb / dy02;
    3284:	c7 01       	movw	r24, r14
    3286:	b6 01       	movw	r22, r12
    3288:	2d 89       	ldd	r18, Y+21	; 0x15
    328a:	3e 89       	ldd	r19, Y+22	; 0x16
    328c:	4f 89       	ldd	r20, Y+23	; 0x17
    328e:	58 8d       	ldd	r21, Y+24	; 0x18
    3290:	0e 94 55 29 	call	0x52aa	; 0x52aa <__divmodsi4>
    3294:	49 85       	ldd	r20, Y+9	; 0x09
    3296:	5a 85       	ldd	r21, Y+10	; 0x0a
    3298:	42 0f       	add	r20, r18
    329a:	53 1f       	adc	r21, r19
        sb += dx02;
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
    329c:	40 17       	cp	r20, r16
    329e:	51 07       	cpc	r21, r17
    32a0:	1c f4       	brge	.+6      	; 0x32a8 <fillTriangle+0x306>
    32a2:	ca 01       	movw	r24, r20
    32a4:	a8 01       	movw	r20, r16
    32a6:	8c 01       	movw	r16, r24
    sa = dx12 * (y - y1);
    sb = dx02 * (y - y0);
    for(; y<=y2; y++) {
        a   = x1 + sa / dy12;
        b   = x0 + sb / dy02;
        sa += dx12;
    32a8:	69 8d       	ldd	r22, Y+25	; 0x19
    32aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32b0:	86 0e       	add	r8, r22
    32b2:	97 1e       	adc	r9, r23
    32b4:	a8 1e       	adc	r10, r24
    32b6:	b9 1e       	adc	r11, r25
        sb += dx02;
    32b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32bc:	af 8d       	ldd	r26, Y+31	; 0x1f
    32be:	b8 a1       	ldd	r27, Y+32	; 0x20
    32c0:	c8 0e       	add	r12, r24
    32c2:	d9 1e       	adc	r13, r25
    32c4:	ea 1e       	adc	r14, r26
    32c6:	fb 1e       	adc	r15, r27
void writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
    32c8:	4f 5f       	subi	r20, 0xFF	; 255
    32ca:	5f 4f       	sbci	r21, 0xFF	; 255
    32cc:	40 1b       	sub	r20, r16
    32ce:	51 0b       	sbc	r21, r17
    32d0:	c8 01       	movw	r24, r16
    32d2:	b2 01       	movw	r22, r4
    32d4:	2f 85       	ldd	r18, Y+15	; 0x0f
    32d6:	38 89       	ldd	r19, Y+16	; 0x10
    32d8:	0e 94 91 27 	call	0x4f22	; 0x4f22 <drawFastHLine>

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = dx12 * (y - y1);
    sb = dx02 * (y - y0);
    for(; y<=y2; y++) {
    32dc:	08 94       	sec
    32de:	41 1c       	adc	r4, r1
    32e0:	51 1c       	adc	r5, r1
    32e2:	ad 85       	ldd	r26, Y+13	; 0x0d
    32e4:	be 85       	ldd	r27, Y+14	; 0x0e
    32e6:	a4 15       	cp	r26, r4
    32e8:	b5 05       	cpc	r27, r5
    32ea:	0c f6       	brge	.-126    	; 0x326e <fillTriangle+0x2cc>
        */
        if(a > b) _swap_int16_t(a,b);
        writeFastHLine(a, y, b-a+1, color);
    }
    endWrite();
}
    32ec:	e2 96       	adiw	r28, 0x32	; 50
    32ee:	0f b6       	in	r0, 0x3f	; 63
    32f0:	f8 94       	cli
    32f2:	de bf       	out	0x3e, r29	; 62
    32f4:	0f be       	out	0x3f, r0	; 63
    32f6:	cd bf       	out	0x3d, r28	; 61
    32f8:	cf 91       	pop	r28
    32fa:	df 91       	pop	r29
    32fc:	1f 91       	pop	r17
    32fe:	0f 91       	pop	r16
    3300:	ff 90       	pop	r15
    3302:	ef 90       	pop	r14
    3304:	df 90       	pop	r13
    3306:	cf 90       	pop	r12
    3308:	bf 90       	pop	r11
    330a:	af 90       	pop	r10
    330c:	9f 90       	pop	r9
    330e:	8f 90       	pop	r8
    3310:	7f 90       	pop	r7
    3312:	6f 90       	pop	r6
    3314:	5f 90       	pop	r5
    3316:	4f 90       	pop	r4
    3318:	3f 90       	pop	r3
    331a:	2f 90       	pop	r2
    331c:	08 95       	ret

0000331e <drawRect>:
    }
}

// Draw a rectangle
void drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    331e:	8f 92       	push	r8
    3320:	9f 92       	push	r9
    3322:	af 92       	push	r10
    3324:	bf 92       	push	r11
    3326:	cf 92       	push	r12
    3328:	df 92       	push	r13
    332a:	ef 92       	push	r14
    332c:	ff 92       	push	r15
    332e:	0f 93       	push	r16
    3330:	1f 93       	push	r17
    3332:	7c 01       	movw	r14, r24
    3334:	6b 01       	movw	r12, r22
    3336:	5a 01       	movw	r10, r20
    3338:	49 01       	movw	r8, r18
void writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
    333a:	98 01       	movw	r18, r16
    333c:	0e 94 91 27 	call	0x4f22	; 0x4f22 <drawFastHLine>
    3340:	b6 01       	movw	r22, r12
    3342:	61 50       	subi	r22, 0x01	; 1
    3344:	70 40       	sbci	r23, 0x00	; 0
    3346:	68 0d       	add	r22, r8
    3348:	79 1d       	adc	r23, r9
    334a:	c7 01       	movw	r24, r14
    334c:	a5 01       	movw	r20, r10
    334e:	98 01       	movw	r18, r16
    3350:	0e 94 91 27 	call	0x4f22	; 0x4f22 <drawFastHLine>
void writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
    3354:	c7 01       	movw	r24, r14
    3356:	b6 01       	movw	r22, r12
    3358:	a4 01       	movw	r20, r8
    335a:	98 01       	movw	r18, r16
    335c:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <drawFastVLine>
    3360:	08 94       	sec
    3362:	e1 08       	sbc	r14, r1
    3364:	f1 08       	sbc	r15, r1
    3366:	c7 01       	movw	r24, r14
    3368:	8a 0d       	add	r24, r10
    336a:	9b 1d       	adc	r25, r11
    336c:	b6 01       	movw	r22, r12
    336e:	a4 01       	movw	r20, r8
    3370:	98 01       	movw	r18, r16
    3372:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <drawFastVLine>
    writeFastHLine(x, y, w, color);
    writeFastHLine(x, y+h-1, w, color);
    writeFastVLine(x, y, h, color);
    writeFastVLine(x+w-1, y, h, color);
    endWrite();
}
    3376:	1f 91       	pop	r17
    3378:	0f 91       	pop	r16
    337a:	ff 90       	pop	r15
    337c:	ef 90       	pop	r14
    337e:	df 90       	pop	r13
    3380:	cf 90       	pop	r12
    3382:	bf 90       	pop	r11
    3384:	af 90       	pop	r10
    3386:	9f 90       	pop	r9
    3388:	8f 90       	pop	r8
    338a:	08 95       	ret

0000338c <writeFillRect>:
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
}

void writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    338c:	0f 93       	push	r16
    338e:	1f 93       	push	r17
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
    3390:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <fillRect>
}
    3394:	1f 91       	pop	r17
    3396:	0f 91       	pop	r16
    3398:	08 95       	ret

0000339a <fillRoundRect>:
    endWrite();
}

// Fill a rounded rectangle
void fillRoundRect(int16_t x, int16_t y, int16_t w,
        int16_t h, int16_t r, uint16_t color) {
    339a:	2f 92       	push	r2
    339c:	3f 92       	push	r3
    339e:	4f 92       	push	r4
    33a0:	5f 92       	push	r5
    33a2:	6f 92       	push	r6
    33a4:	7f 92       	push	r7
    33a6:	8f 92       	push	r8
    33a8:	9f 92       	push	r9
    33aa:	af 92       	push	r10
    33ac:	bf 92       	push	r11
    33ae:	cf 92       	push	r12
    33b0:	df 92       	push	r13
    33b2:	ef 92       	push	r14
    33b4:	ff 92       	push	r15
    33b6:	0f 93       	push	r16
    33b8:	1f 93       	push	r17
    33ba:	cf 93       	push	r28
    33bc:	df 93       	push	r29
    33be:	5c 01       	movw	r10, r24
    33c0:	2b 01       	movw	r4, r22
    33c2:	1a 01       	movw	r2, r20
    33c4:	69 01       	movw	r12, r18
    33c6:	48 01       	movw	r8, r16
    33c8:	37 01       	movw	r6, r14
    // smarter version
    startWrite();
    writeFillRect(x+r, y, w-2*r, h, color);
    33ca:	e8 01       	movw	r28, r16
    33cc:	c8 0f       	add	r28, r24
    33ce:	d9 1f       	adc	r29, r25
    33d0:	78 01       	movw	r14, r16
    33d2:	ee 0c       	add	r14, r14
    33d4:	ff 1c       	adc	r15, r15
    33d6:	f0 94       	com	r15
    33d8:	e1 94       	neg	r14
    33da:	f1 08       	sbc	r15, r1
    33dc:	f3 94       	inc	r15
}

void writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
    33de:	a7 01       	movw	r20, r14
    33e0:	42 0d       	add	r20, r2
    33e2:	53 1d       	adc	r21, r3
    33e4:	ce 01       	movw	r24, r28
    33e6:	83 01       	movw	r16, r6
    33e8:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <fillRect>
    // smarter version
    startWrite();
    writeFillRect(x+r, y, w-2*r, h, color);

    // draw four corners
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
    33ec:	48 0c       	add	r4, r8
    33ee:	59 1c       	adc	r5, r9
    33f0:	08 94       	sec
    33f2:	c1 08       	sbc	r12, r1
    33f4:	d1 08       	sbc	r13, r1
    33f6:	ce 0c       	add	r12, r14
    33f8:	df 1c       	adc	r13, r15
    33fa:	08 94       	sec
    33fc:	a1 08       	sbc	r10, r1
    33fe:	b1 08       	sbc	r11, r1
    3400:	a2 0c       	add	r10, r2
    3402:	b3 1c       	adc	r11, r3
    3404:	c5 01       	movw	r24, r10
    3406:	88 19       	sub	r24, r8
    3408:	99 09       	sbc	r25, r9
    340a:	b2 01       	movw	r22, r4
    340c:	a4 01       	movw	r20, r8
    340e:	21 e0       	ldi	r18, 0x01	; 1
    3410:	86 01       	movw	r16, r12
    3412:	73 01       	movw	r14, r6
    3414:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <fillCircleHelper>
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
    3418:	ce 01       	movw	r24, r28
    341a:	b2 01       	movw	r22, r4
    341c:	a4 01       	movw	r20, r8
    341e:	22 e0       	ldi	r18, 0x02	; 2
    3420:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <fillCircleHelper>
    endWrite();
}
    3424:	df 91       	pop	r29
    3426:	cf 91       	pop	r28
    3428:	1f 91       	pop	r17
    342a:	0f 91       	pop	r16
    342c:	ff 90       	pop	r15
    342e:	ef 90       	pop	r14
    3430:	df 90       	pop	r13
    3432:	cf 90       	pop	r12
    3434:	bf 90       	pop	r11
    3436:	af 90       	pop	r10
    3438:	9f 90       	pop	r9
    343a:	8f 90       	pop	r8
    343c:	7f 90       	pop	r7
    343e:	6f 90       	pop	r6
    3440:	5f 90       	pop	r5
    3442:	4f 90       	pop	r4
    3444:	3f 90       	pop	r3
    3446:	2f 90       	pop	r2
    3448:	08 95       	ret

0000344a <writePixel>:
}


void writePixel(int16_t x, int16_t y, uint16_t color){
    // Overwrite in subclasses if startWrite is defined!
    drawPixel(x, y, color);
    344a:	0e 94 f6 25 	call	0x4bec	; 0x4bec <drawPixel>
}
    344e:	08 95       	ret

00003450 <_printChar>:
		_transparent = false;
	}
}


void _printChar(char c, int x, int y) {    
    3450:	2f 92       	push	r2
    3452:	3f 92       	push	r3
    3454:	4f 92       	push	r4
    3456:	5f 92       	push	r5
    3458:	6f 92       	push	r6
    345a:	7f 92       	push	r7
    345c:	8f 92       	push	r8
    345e:	9f 92       	push	r9
    3460:	af 92       	push	r10
    3462:	bf 92       	push	r11
    3464:	cf 92       	push	r12
    3466:	df 92       	push	r13
    3468:	ef 92       	push	r14
    346a:	ff 92       	push	r15
    346c:	0f 93       	push	r16
    346e:	1f 93       	push	r17
    3470:	df 93       	push	r29
    3472:	cf 93       	push	r28
    3474:	00 d0       	rcall	.+0      	; 0x3476 <_printChar+0x26>
    3476:	00 d0       	rcall	.+0      	; 0x3478 <_printChar+0x28>
    3478:	00 d0       	rcall	.+0      	; 0x347a <_printChar+0x2a>
    347a:	cd b7       	in	r28, 0x3d	; 61
    347c:	de b7       	in	r29, 0x3e	; 62
    347e:	7a 83       	std	Y+2, r23	; 0x02
    3480:	69 83       	std	Y+1, r22	; 0x01
    3482:	5c 83       	std	Y+4, r21	; 0x04
    3484:	4b 83       	std	Y+3, r20	; 0x03
	uint8_t i, ch;
	uint16_t j;
	uint16_t temp; 
		        // some thoughts on this function:
			temp = ((c - cfont.offset) * ((cfont.x_size / 8) * cfont.y_size)) + 4;  // letter vertical position in the font array
    3486:	20 91 41 01 	lds	r18, 0x0141
    348a:	26 95       	lsr	r18
    348c:	26 95       	lsr	r18
    348e:	26 95       	lsr	r18
    3490:	90 91 42 01 	lds	r25, 0x0142
    3494:	29 9f       	mul	r18, r25
    3496:	90 01       	movw	r18, r0
    3498:	11 24       	eor	r1, r1
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	40 91 43 01 	lds	r20, 0x0143
    34a0:	84 1b       	sub	r24, r20
    34a2:	91 09       	sbc	r25, r1
    34a4:	28 9f       	mul	r18, r24
    34a6:	70 01       	movw	r14, r0
    34a8:	29 9f       	mul	r18, r25
    34aa:	f0 0c       	add	r15, r0
    34ac:	38 9f       	mul	r19, r24
    34ae:	f0 0c       	add	r15, r0
    34b0:	11 24       	eor	r1, r1
    34b2:	24 e0       	ldi	r18, 0x04	; 4
    34b4:	30 e0       	ldi	r19, 0x00	; 0
    34b6:	e2 0e       	add	r14, r18
    34b8:	f3 1e       	adc	r15, r19
    34ba:	aa 24       	eor	r10, r10
    34bc:	bb 24       	eor	r11, r11
    34be:	7b c0       	rjmp	.+246    	; 0x35b6 <_printChar+0x166>
			for(j = 0; j < ((cfont.x_size / 8) * cfont.y_size); j += (cfont.x_size / 8))  { // setting the letter window size
    34c0:	c9 01       	movw	r24, r18
    34c2:	01 97       	sbiw	r24, 0x01	; 1
    34c4:	8c 01       	movw	r16, r24
    34c6:	b3 e0       	ldi	r27, 0x03	; 3
    34c8:	00 0f       	add	r16, r16
    34ca:	11 1f       	adc	r17, r17
    34cc:	ba 95       	dec	r27
    34ce:	e1 f7       	brne	.-8      	; 0x34c8 <_printChar+0x78>
    34d0:	49 81       	ldd	r20, Y+1	; 0x01
    34d2:	5a 81       	ldd	r21, Y+2	; 0x02
    34d4:	04 0f       	add	r16, r20
    34d6:	15 1f       	adc	r17, r21
    34d8:	6c 01       	movw	r12, r24
    34da:	ce 0c       	add	r12, r14
    34dc:	df 1c       	adc	r13, r15
				for (int zz = (cfont.x_size / 8) - 1; zz >= 0; zz--) { // this fills letterbox in passes, one byte per each pass
    34de:	17 01       	movw	r2, r14
    34e0:	08 94       	sec
    34e2:	21 08       	sbc	r2, r1
    34e4:	31 08       	sbc	r3, r1
    34e6:	59 c0       	rjmp	.+178    	; 0x359a <_printChar+0x14a>
				        // (applies 8-bit horizontal part of a letter per cicle), i. e. 16-bit wide letter will take two passes
				  	ch = pgm_read_byte(&cfont.font[temp + zz]);
    34e8:	e0 91 3f 01 	lds	r30, 0x013F
    34ec:	f0 91 40 01 	lds	r31, 0x0140
    34f0:	ec 0d       	add	r30, r12
    34f2:	fd 1d       	adc	r31, r13
    34f4:	e4 91       	lpm	r30, Z+
    34f6:	1e 82       	std	Y+6, r1	; 0x06
    34f8:	1d 82       	std	Y+5, r1	; 0x05
					for(i = 0; i < 8; i++) {   
						if((ch & (1 << i)) != 0) {  //anding each bit and filling with color accordingly
    34fa:	4e 2e       	mov	r4, r30
    34fc:	55 24       	eor	r5, r5
    34fe:	c2 01       	movw	r24, r4
    3500:	0d 80       	ldd	r0, Y+5	; 0x05
    3502:	02 c0       	rjmp	.+4      	; 0x3508 <_printChar+0xb8>
    3504:	95 95       	asr	r25
    3506:	87 95       	ror	r24
    3508:	0a 94       	dec	r0
    350a:	e2 f7       	brpl	.-8      	; 0x3504 <_printChar+0xb4>
    350c:	80 ff       	sbrs	r24, 0
    350e:	16 c0       	rjmp	.+44     	; 0x353c <_printChar+0xec>
}


void writePixel(int16_t x, int16_t y, uint16_t color){
    // Overwrite in subclasses if startWrite is defined!
    drawPixel(x, y, color);
    3510:	60 91 41 01 	lds	r22, 0x0141
    3514:	66 95       	lsr	r22
    3516:	66 95       	lsr	r22
    3518:	66 95       	lsr	r22
    351a:	c5 01       	movw	r24, r10
    351c:	70 e0       	ldi	r23, 0x00	; 0
    351e:	0e 94 2e 29 	call	0x525c	; 0x525c <__udivmodhi4>
    3522:	8b 81       	ldd	r24, Y+3	; 0x03
    3524:	9c 81       	ldd	r25, Y+4	; 0x04
    3526:	68 0f       	add	r22, r24
    3528:	79 1f       	adc	r23, r25
    352a:	90 90 38 01 	lds	r9, 0x0138
    352e:	88 24       	eor	r8, r8
    3530:	40 91 39 01 	lds	r20, 0x0139
    3534:	50 e0       	ldi	r21, 0x00	; 0
    3536:	48 29       	or	r20, r8
    3538:	59 29       	or	r21, r9
    353a:	19 c0       	rjmp	.+50     	; 0x356e <_printChar+0x11e>
					for(i = 0; i < 8; i++) {   
						if((ch & (1 << i)) != 0) {  //anding each bit and filling with color accordingly
						           // If got 1 - Foreground color fill
 							 writePixel(x - (i - zz * 8), y + (j / (cfont.x_size / 8)), (fch << 8) | fcl); 
					}                     // moving 8 * zz pixels left each time 'zz' changes
						else if (!_transparent) {
    353c:	80 91 3e 01 	lds	r24, 0x013E
    3540:	88 23       	and	r24, r24
    3542:	e1 f4       	brne	.+56     	; 0x357c <_printChar+0x12c>
}


void writePixel(int16_t x, int16_t y, uint16_t color){
    // Overwrite in subclasses if startWrite is defined!
    drawPixel(x, y, color);
    3544:	60 91 41 01 	lds	r22, 0x0141
    3548:	66 95       	lsr	r22
    354a:	66 95       	lsr	r22
    354c:	66 95       	lsr	r22
    354e:	c5 01       	movw	r24, r10
    3550:	70 e0       	ldi	r23, 0x00	; 0
    3552:	0e 94 2e 29 	call	0x525c	; 0x525c <__udivmodhi4>
    3556:	2b 81       	ldd	r18, Y+3	; 0x03
    3558:	3c 81       	ldd	r19, Y+4	; 0x04
    355a:	62 0f       	add	r22, r18
    355c:	73 1f       	adc	r23, r19
    355e:	70 90 3d 01 	lds	r7, 0x013D
    3562:	66 24       	eor	r6, r6
    3564:	40 91 3a 01 	lds	r20, 0x013A
    3568:	50 e0       	ldi	r21, 0x00	; 0
    356a:	46 29       	or	r20, r6
    356c:	57 29       	or	r21, r7
    356e:	c8 01       	movw	r24, r16
    3570:	ed 81       	ldd	r30, Y+5	; 0x05
    3572:	fe 81       	ldd	r31, Y+6	; 0x06
    3574:	8e 1b       	sub	r24, r30
    3576:	9f 0b       	sbc	r25, r31
    3578:	0e 94 f6 25 	call	0x4bec	; 0x4bec <drawPixel>
    357c:	2d 81       	ldd	r18, Y+5	; 0x05
    357e:	3e 81       	ldd	r19, Y+6	; 0x06
    3580:	2f 5f       	subi	r18, 0xFF	; 255
    3582:	3f 4f       	sbci	r19, 0xFF	; 255
    3584:	3e 83       	std	Y+6, r19	; 0x06
    3586:	2d 83       	std	Y+5, r18	; 0x05
			temp = ((c - cfont.offset) * ((cfont.x_size / 8) * cfont.y_size)) + 4;  // letter vertical position in the font array
			for(j = 0; j < ((cfont.x_size / 8) * cfont.y_size); j += (cfont.x_size / 8))  { // setting the letter window size
				for (int zz = (cfont.x_size / 8) - 1; zz >= 0; zz--) { // this fills letterbox in passes, one byte per each pass
				        // (applies 8-bit horizontal part of a letter per cicle), i. e. 16-bit wide letter will take two passes
				  	ch = pgm_read_byte(&cfont.font[temp + zz]);
					for(i = 0; i < 8; i++) {   
    3588:	28 30       	cpi	r18, 0x08	; 8
    358a:	31 05       	cpc	r19, r1
    358c:	09 f0       	breq	.+2      	; 0x3590 <_printChar+0x140>
    358e:	b7 cf       	rjmp	.-146    	; 0x34fe <_printChar+0xae>
    3590:	08 50       	subi	r16, 0x08	; 8
    3592:	10 40       	sbci	r17, 0x00	; 0
    3594:	08 94       	sec
    3596:	c1 08       	sbc	r12, r1
    3598:	d1 08       	sbc	r13, r1
	uint16_t j;
	uint16_t temp; 
		        // some thoughts on this function:
			temp = ((c - cfont.offset) * ((cfont.x_size / 8) * cfont.y_size)) + 4;  // letter vertical position in the font array
			for(j = 0; j < ((cfont.x_size / 8) * cfont.y_size); j += (cfont.x_size / 8))  { // setting the letter window size
				for (int zz = (cfont.x_size / 8) - 1; zz >= 0; zz--) { // this fills letterbox in passes, one byte per each pass
    359a:	c2 14       	cp	r12, r2
    359c:	d3 04       	cpc	r13, r3
    359e:	09 f0       	breq	.+2      	; 0x35a2 <_printChar+0x152>
    35a0:	a3 cf       	rjmp	.-186    	; 0x34e8 <_printChar+0x98>
						            // If got 0 - Background color fill
 							 writePixel(x - (i - zz * 8), y + (j / (cfont.x_size / 8)), (bch << 8) | bcl);
			}   
                    } 
                }
				temp += (cfont.x_size / 8); // switching to the next letter's part given it's larger than 8 bits
    35a2:	80 91 41 01 	lds	r24, 0x0141
    35a6:	86 95       	lsr	r24
    35a8:	86 95       	lsr	r24
    35aa:	86 95       	lsr	r24
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	e8 0e       	add	r14, r24
    35b0:	f9 1e       	adc	r15, r25
	uint8_t i, ch;
	uint16_t j;
	uint16_t temp; 
		        // some thoughts on this function:
			temp = ((c - cfont.offset) * ((cfont.x_size / 8) * cfont.y_size)) + 4;  // letter vertical position in the font array
			for(j = 0; j < ((cfont.x_size / 8) * cfont.y_size); j += (cfont.x_size / 8))  { // setting the letter window size
    35b2:	a8 0e       	add	r10, r24
    35b4:	b9 1e       	adc	r11, r25
    35b6:	80 91 41 01 	lds	r24, 0x0141
    35ba:	86 95       	lsr	r24
    35bc:	86 95       	lsr	r24
    35be:	86 95       	lsr	r24
    35c0:	28 2f       	mov	r18, r24
    35c2:	30 e0       	ldi	r19, 0x00	; 0
    35c4:	80 91 42 01 	lds	r24, 0x0142
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	ac 01       	movw	r20, r24
    35cc:	24 9f       	mul	r18, r20
    35ce:	c0 01       	movw	r24, r0
    35d0:	25 9f       	mul	r18, r21
    35d2:	90 0d       	add	r25, r0
    35d4:	34 9f       	mul	r19, r20
    35d6:	90 0d       	add	r25, r0
    35d8:	11 24       	eor	r1, r1
    35da:	a8 16       	cp	r10, r24
    35dc:	b9 06       	cpc	r11, r25
    35de:	08 f4       	brcc	.+2      	; 0x35e2 <_printChar+0x192>
    35e0:	6f cf       	rjmp	.-290    	; 0x34c0 <_printChar+0x70>
                    } 
                }
				temp += (cfont.x_size / 8); // switching to the next letter's part given it's larger than 8 bits
        }
		  
}
    35e2:	26 96       	adiw	r28, 0x06	; 6
    35e4:	0f b6       	in	r0, 0x3f	; 63
    35e6:	f8 94       	cli
    35e8:	de bf       	out	0x3e, r29	; 62
    35ea:	0f be       	out	0x3f, r0	; 63
    35ec:	cd bf       	out	0x3d, r28	; 61
    35ee:	cf 91       	pop	r28
    35f0:	df 91       	pop	r29
    35f2:	1f 91       	pop	r17
    35f4:	0f 91       	pop	r16
    35f6:	ff 90       	pop	r15
    35f8:	ef 90       	pop	r14
    35fa:	df 90       	pop	r13
    35fc:	cf 90       	pop	r12
    35fe:	bf 90       	pop	r11
    3600:	af 90       	pop	r10
    3602:	9f 90       	pop	r9
    3604:	8f 90       	pop	r8
    3606:	7f 90       	pop	r7
    3608:	6f 90       	pop	r6
    360a:	5f 90       	pop	r5
    360c:	4f 90       	pop	r4
    360e:	3f 90       	pop	r3
    3610:	2f 90       	pop	r2
    3612:	08 95       	ret

00003614 <print>:



void print(char * st)
{
    3614:	af 92       	push	r10
    3616:	bf 92       	push	r11
    3618:	cf 92       	push	r12
    361a:	df 92       	push	r13
    361c:	ef 92       	push	r14
    361e:	ff 92       	push	r15
    3620:	0f 93       	push	r16
    3622:	1f 93       	push	r17
    3624:	cf 93       	push	r28
    3626:	df 93       	push	r29
    3628:	6c 01       	movw	r12, r24
    int x = cursor_x;  int y = cursor_y;
    362a:	c0 91 4b 01 	lds	r28, 0x014B
    362e:	d0 91 4c 01 	lds	r29, 0x014C
    3632:	a0 90 45 01 	lds	r10, 0x0145
    3636:	b0 90 46 01 	lds	r11, 0x0146
	int stl, i;
	stl = strlen(st);
    363a:	dc 01       	movw	r26, r24
    363c:	0d 90       	ld	r0, X+
    363e:	00 20       	and	r0, r0
    3640:	e9 f7       	brne	.-6      	; 0x363c <print+0x28>
    3642:	7d 01       	movw	r14, r26
    3644:	08 94       	sec
    3646:	e1 08       	sbc	r14, r1
    3648:	f1 08       	sbc	r15, r1
    364a:	e8 1a       	sub	r14, r24
    364c:	f9 0a       	sbc	r15, r25
	
	if (x == RIGHT)
    364e:	b7 e2       	ldi	r27, 0x27	; 39
    3650:	cf 30       	cpi	r28, 0x0F	; 15
    3652:	db 07       	cpc	r29, r27
    3654:	89 f4       	brne	.+34     	; 0x3678 <print+0x64>
		x = (disp_x_size + 1) - (stl * cfont.x_size);
    3656:	80 91 41 01 	lds	r24, 0x0141
    365a:	90 e0       	ldi	r25, 0x00	; 0
    365c:	fc 01       	movw	r30, r24
    365e:	ee 9d       	mul	r30, r14
    3660:	c0 01       	movw	r24, r0
    3662:	ef 9d       	mul	r30, r15
    3664:	90 0d       	add	r25, r0
    3666:	fe 9d       	mul	r31, r14
    3668:	90 0d       	add	r25, r0
    366a:	11 24       	eor	r1, r1
    366c:	c0 91 49 01 	lds	r28, 0x0149
    3670:	d0 91 4a 01 	lds	r29, 0x014A
    3674:	c8 1b       	sub	r28, r24
    3676:	d9 0b       	sbc	r29, r25
	if (x == CENTER)
    3678:	f7 e2       	ldi	r31, 0x27	; 39
    367a:	ce 30       	cpi	r28, 0x0E	; 14
    367c:	df 07       	cpc	r29, r31
    367e:	a9 f4       	brne	.+42     	; 0x36aa <print+0x96>
		x = ((disp_x_size + 1) - (stl * cfont.x_size)) / 2;
    3680:	80 91 41 01 	lds	r24, 0x0141
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	8e 9d       	mul	r24, r14
    3688:	90 01       	movw	r18, r0
    368a:	8f 9d       	mul	r24, r15
    368c:	30 0d       	add	r19, r0
    368e:	9e 9d       	mul	r25, r14
    3690:	30 0d       	add	r19, r0
    3692:	11 24       	eor	r1, r1
    3694:	80 91 49 01 	lds	r24, 0x0149
    3698:	90 91 4a 01 	lds	r25, 0x014A
    369c:	82 1b       	sub	r24, r18
    369e:	93 0b       	sbc	r25, r19
    36a0:	62 e0       	ldi	r22, 0x02	; 2
    36a2:	70 e0       	ldi	r23, 0x00	; 0
    36a4:	0e 94 42 29 	call	0x5284	; 0x5284 <__divmodhi4>
    36a8:	eb 01       	movw	r28, r22
    36aa:	00 e0       	ldi	r16, 0x00	; 0
    36ac:	10 e0       	ldi	r17, 0x00	; 0
    36ae:	14 c0       	rjmp	.+40     	; 0x36d8 <print+0xc4>
	
	for (i = 0; i < stl; i++)
			_printChar(*st++, x + (i * (cfont.x_size)), y);
    36b0:	80 91 41 01 	lds	r24, 0x0141
    36b4:	90 e0       	ldi	r25, 0x00	; 0
    36b6:	08 9f       	mul	r16, r24
    36b8:	b0 01       	movw	r22, r0
    36ba:	09 9f       	mul	r16, r25
    36bc:	70 0d       	add	r23, r0
    36be:	18 9f       	mul	r17, r24
    36c0:	70 0d       	add	r23, r0
    36c2:	11 24       	eor	r1, r1
    36c4:	6c 0f       	add	r22, r28
    36c6:	7d 1f       	adc	r23, r29
    36c8:	d6 01       	movw	r26, r12
    36ca:	8d 91       	ld	r24, X+
    36cc:	6d 01       	movw	r12, r26
    36ce:	a5 01       	movw	r20, r10
    36d0:	0e 94 28 1a 	call	0x3450	; 0x3450 <_printChar>
	if (x == RIGHT)
		x = (disp_x_size + 1) - (stl * cfont.x_size);
	if (x == CENTER)
		x = ((disp_x_size + 1) - (stl * cfont.x_size)) / 2;
	
	for (i = 0; i < stl; i++)
    36d4:	0f 5f       	subi	r16, 0xFF	; 255
    36d6:	1f 4f       	sbci	r17, 0xFF	; 255
    36d8:	0e 15       	cp	r16, r14
    36da:	1f 05       	cpc	r17, r15
    36dc:	4c f3       	brlt	.-46     	; 0x36b0 <print+0x9c>
			_printChar(*st++, x + (i * (cfont.x_size)), y);
     cursor_x = x + (stl * (cfont.x_size));
    36de:	80 91 41 01 	lds	r24, 0x0141
    36e2:	90 e0       	ldi	r25, 0x00	; 0
    36e4:	fc 01       	movw	r30, r24
    36e6:	ee 9d       	mul	r30, r14
    36e8:	c0 01       	movw	r24, r0
    36ea:	ef 9d       	mul	r30, r15
    36ec:	90 0d       	add	r25, r0
    36ee:	fe 9d       	mul	r31, r14
    36f0:	90 0d       	add	r25, r0
    36f2:	11 24       	eor	r1, r1
    36f4:	8c 0f       	add	r24, r28
    36f6:	9d 1f       	adc	r25, r29
    36f8:	90 93 4c 01 	sts	0x014C, r25
    36fc:	80 93 4b 01 	sts	0x014B, r24
}
    3700:	df 91       	pop	r29
    3702:	cf 91       	pop	r28
    3704:	1f 91       	pop	r17
    3706:	0f 91       	pop	r16
    3708:	ff 90       	pop	r15
    370a:	ef 90       	pop	r14
    370c:	df 90       	pop	r13
    370e:	cf 90       	pop	r12
    3710:	bf 90       	pop	r11
    3712:	af 90       	pop	r10
    3714:	08 95       	ret

00003716 <drawChar>:

// TEXT- AND CHARACTER-HANDLING FUNCTIONS ----------------------------------
#ifdef ADAFONTS
// Draw a character
void drawChar(int16_t x, int16_t y, unsigned char c,
  uint16_t color, uint16_t bg, uint8_t size) {
    3716:	2f 92       	push	r2
    3718:	3f 92       	push	r3
    371a:	4f 92       	push	r4
    371c:	5f 92       	push	r5
    371e:	6f 92       	push	r6
    3720:	7f 92       	push	r7
    3722:	8f 92       	push	r8
    3724:	9f 92       	push	r9
    3726:	af 92       	push	r10
    3728:	bf 92       	push	r11
    372a:	cf 92       	push	r12
    372c:	df 92       	push	r13
    372e:	ef 92       	push	r14
    3730:	ff 92       	push	r15
    3732:	0f 93       	push	r16
    3734:	1f 93       	push	r17
    3736:	df 93       	push	r29
    3738:	cf 93       	push	r28
    373a:	cd b7       	in	r28, 0x3d	; 61
    373c:	de b7       	in	r29, 0x3e	; 62
    373e:	6b 97       	sbiw	r28, 0x1b	; 27
    3740:	0f b6       	in	r0, 0x3f	; 63
    3742:	f8 94       	cli
    3744:	de bf       	out	0x3e, r29	; 62
    3746:	0f be       	out	0x3f, r0	; 63
    3748:	cd bf       	out	0x3d, r28	; 61
    374a:	4c 01       	movw	r8, r24
    374c:	7a 8b       	std	Y+18, r23	; 0x12
    374e:	69 8b       	std	Y+17, r22	; 0x11
    3750:	3c 8b       	std	Y+20, r19	; 0x14
    3752:	2b 8b       	std	Y+19, r18	; 0x13
    3754:	18 01       	movw	r2, r16
    3756:	ed 8a       	std	Y+21, r14	; 0x15

    if(!gfxFont) { // 'Classic' built-in font
    3758:	60 91 3b 01 	lds	r22, 0x013B
    375c:	70 91 3c 01 	lds	r23, 0x013C
    3760:	61 15       	cp	r22, r1
    3762:	71 05       	cpc	r23, r1
    3764:	09 f0       	breq	.+2      	; 0x3768 <drawChar+0x52>
    3766:	bf c0       	rjmp	.+382    	; 0x38e6 <drawChar+0x1d0>

        if((x >= _width)            || // Clip right
    3768:	80 91 49 01 	lds	r24, 0x0149
    376c:	90 91 4a 01 	lds	r25, 0x014A
    3770:	88 16       	cp	r8, r24
    3772:	99 06       	cpc	r9, r25
    3774:	0c f0       	brlt	.+2      	; 0x3778 <drawChar+0x62>
    3776:	74 c1       	rjmp	.+744    	; 0x3a60 <drawChar+0x34a>
    3778:	80 91 4f 01 	lds	r24, 0x014F
    377c:	90 91 50 01 	lds	r25, 0x0150
    3780:	29 89       	ldd	r18, Y+17	; 0x11
    3782:	3a 89       	ldd	r19, Y+18	; 0x12
    3784:	28 17       	cp	r18, r24
    3786:	39 07       	cpc	r19, r25
    3788:	0c f0       	brlt	.+2      	; 0x378c <drawChar+0x76>
    378a:	6a c1       	rjmp	.+724    	; 0x3a60 <drawChar+0x34a>
    378c:	6e 2d       	mov	r22, r14
    378e:	70 e0       	ldi	r23, 0x00	; 0
    3790:	7b 8f       	std	Y+27, r23	; 0x1b
    3792:	6a 8f       	std	Y+26, r22	; 0x1a
    3794:	cb 01       	movw	r24, r22
    3796:	88 0f       	add	r24, r24
    3798:	99 1f       	adc	r25, r25
    379a:	86 0f       	add	r24, r22
    379c:	97 1f       	adc	r25, r23
    379e:	88 0f       	add	r24, r24
    37a0:	99 1f       	adc	r25, r25
    37a2:	88 0d       	add	r24, r8
    37a4:	99 1d       	adc	r25, r9
    37a6:	18 16       	cp	r1, r24
    37a8:	19 06       	cpc	r1, r25
    37aa:	0c f0       	brlt	.+2      	; 0x37ae <drawChar+0x98>
    37ac:	59 c1       	rjmp	.+690    	; 0x3a60 <drawChar+0x34a>
    37ae:	03 e0       	ldi	r16, 0x03	; 3
    37b0:	66 0f       	add	r22, r22
    37b2:	77 1f       	adc	r23, r23
    37b4:	0a 95       	dec	r16
    37b6:	e1 f7       	brne	.-8      	; 0x37b0 <drawChar+0x9a>
    37b8:	78 8b       	std	Y+16, r23	; 0x10
    37ba:	6f 87       	std	Y+15, r22	; 0x0f
    37bc:	cb 01       	movw	r24, r22
    37be:	82 0f       	add	r24, r18
    37c0:	93 1f       	adc	r25, r19
    37c2:	18 16       	cp	r1, r24
    37c4:	19 06       	cpc	r1, r25
    37c6:	0c f0       	brlt	.+2      	; 0x37ca <drawChar+0xb4>
    37c8:	4b c1       	rjmp	.+662    	; 0x3a60 <drawChar+0x34a>
           (y >= _height)           || // Clip bottom
           ((x + 6 * size - 1) < 0) || // Clip left
           ((y + 8 * size - 1) < 0))   // Clip top
            return;

        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
    37ca:	80 91 48 01 	lds	r24, 0x0148
    37ce:	88 23       	and	r24, r24
    37d0:	19 f4       	brne	.+6      	; 0x37d8 <drawChar+0xc2>
    37d2:	40 3b       	cpi	r20, 0xB0	; 176
    37d4:	08 f0       	brcs	.+2      	; 0x37d8 <drawChar+0xc2>
    37d6:	4f 5f       	subi	r20, 0xFF	; 255
    37d8:	85 e0       	ldi	r24, 0x05	; 5
    37da:	48 9f       	mul	r20, r24
    37dc:	50 01       	movw	r10, r0
    37de:	11 24       	eor	r1, r1
    37e0:	8a e1       	ldi	r24, 0x1A	; 26
    37e2:	99 e1       	ldi	r25, 0x19	; 25
    37e4:	a8 0e       	add	r10, r24
    37e6:	b9 1e       	adc	r11, r25
    37e8:	24 01       	movw	r4, r8
    37ea:	34 01       	movw	r6, r8
    37ec:	1e 86       	std	Y+14, r1	; 0x0e

        startWrite();
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
    37ee:	f5 01       	movw	r30, r10
    37f0:	84 91       	lpm	r24, Z+
    37f2:	4e 8a       	std	Y+22, r4	; 0x16
    37f4:	5f 8a       	std	Y+23, r5	; 0x17
    37f6:	c9 88       	ldd	r12, Y+17	; 0x11
    37f8:	da 88       	ldd	r13, Y+18	; 0x12
    37fa:	8d 87       	std	Y+13, r24	; 0x0d
    37fc:	76 01       	movw	r14, r12
    37fe:	1c 86       	std	Y+12, r1	; 0x0c
            for(int8_t j=0; j<8; j++, line >>= 1) {
                if(line & 1) {
    3800:	fd 85       	ldd	r31, Y+13	; 0x0d
    3802:	f0 ff       	sbrs	r31, 0
    3804:	11 c0       	rjmp	.+34     	; 0x3828 <drawChar+0x112>
                    if(size == 1)
    3806:	2d 89       	ldd	r18, Y+21	; 0x15
    3808:	21 30       	cpi	r18, 0x01	; 1
    380a:	29 f4       	brne	.+10     	; 0x3816 <drawChar+0x100>
}


void writePixel(int16_t x, int16_t y, uint16_t color){
    // Overwrite in subclasses if startWrite is defined!
    drawPixel(x, y, color);
    380c:	c3 01       	movw	r24, r6
    380e:	b6 01       	movw	r22, r12
    3810:	4b 89       	ldd	r20, Y+19	; 0x13
    3812:	5c 89       	ldd	r21, Y+20	; 0x14
    3814:	14 c0       	rjmp	.+40     	; 0x383e <drawChar+0x128>
}

void writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
    3816:	8e 89       	ldd	r24, Y+22	; 0x16
    3818:	9f 89       	ldd	r25, Y+23	; 0x17
    381a:	b7 01       	movw	r22, r14
    381c:	4a 8d       	ldd	r20, Y+26	; 0x1a
    381e:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3820:	9a 01       	movw	r18, r20
    3822:	0b 89       	ldd	r16, Y+19	; 0x13
    3824:	1c 89       	ldd	r17, Y+20	; 0x14
    3826:	15 c0       	rjmp	.+42     	; 0x3852 <drawChar+0x13c>
                if(line & 1) {
                    if(size == 1)
                        writePixel(x+i, y+j, color);
                    else
                        writeFillRect(x+i*size, y+j*size, size, size, color);
                } else if(bg != color) {
    3828:	6b 89       	ldd	r22, Y+19	; 0x13
    382a:	7c 89       	ldd	r23, Y+20	; 0x14
    382c:	26 16       	cp	r2, r22
    382e:	37 06       	cpc	r3, r23
    3830:	91 f0       	breq	.+36     	; 0x3856 <drawChar+0x140>
                    if(size == 1)
    3832:	7d 89       	ldd	r23, Y+21	; 0x15
    3834:	71 30       	cpi	r23, 0x01	; 1
    3836:	31 f4       	brne	.+12     	; 0x3844 <drawChar+0x12e>
}


void writePixel(int16_t x, int16_t y, uint16_t color){
    // Overwrite in subclasses if startWrite is defined!
    drawPixel(x, y, color);
    3838:	c3 01       	movw	r24, r6
    383a:	b6 01       	movw	r22, r12
    383c:	a1 01       	movw	r20, r2
    383e:	0e 94 f6 25 	call	0x4bec	; 0x4bec <drawPixel>
    3842:	09 c0       	rjmp	.+18     	; 0x3856 <drawChar+0x140>
}

void writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
    3844:	8e 89       	ldd	r24, Y+22	; 0x16
    3846:	9f 89       	ldd	r25, Y+23	; 0x17
    3848:	b7 01       	movw	r22, r14
    384a:	4a 8d       	ldd	r20, Y+26	; 0x1a
    384c:	5b 8d       	ldd	r21, Y+27	; 0x1b
    384e:	9a 01       	movw	r18, r20
    3850:	81 01       	movw	r16, r2
    3852:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <fillRect>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

        startWrite();
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
            for(int8_t j=0; j<8; j++, line >>= 1) {
    3856:	8c 85       	ldd	r24, Y+12	; 0x0c
    3858:	8f 5f       	subi	r24, 0xFF	; 255
    385a:	8c 87       	std	Y+12, r24	; 0x0c
    385c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    385e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3860:	ea 0e       	add	r14, r26
    3862:	fb 1e       	adc	r15, r27
    3864:	08 94       	sec
    3866:	c1 1c       	adc	r12, r1
    3868:	d1 1c       	adc	r13, r1
    386a:	88 30       	cpi	r24, 0x08	; 8
    386c:	21 f0       	breq	.+8      	; 0x3876 <drawChar+0x160>
    386e:	bd 85       	ldd	r27, Y+13	; 0x0d
    3870:	b6 95       	lsr	r27
    3872:	bd 87       	std	Y+13, r27	; 0x0d
    3874:	c5 cf       	rjmp	.-118    	; 0x3800 <drawChar+0xea>
            return;

        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

        startWrite();
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
    3876:	ee 85       	ldd	r30, Y+14	; 0x0e
    3878:	ef 5f       	subi	r30, 0xFF	; 255
    387a:	ee 87       	std	Y+14, r30	; 0x0e
    387c:	08 94       	sec
    387e:	a1 1c       	adc	r10, r1
    3880:	b1 1c       	adc	r11, r1
    3882:	2a 8d       	ldd	r18, Y+26	; 0x1a
    3884:	3b 8d       	ldd	r19, Y+27	; 0x1b
    3886:	42 0e       	add	r4, r18
    3888:	53 1e       	adc	r5, r19
    388a:	08 94       	sec
    388c:	61 1c       	adc	r6, r1
    388e:	71 1c       	adc	r7, r1
    3890:	e5 30       	cpi	r30, 0x05	; 5
    3892:	09 f0       	breq	.+2      	; 0x3896 <drawChar+0x180>
    3894:	ac cf       	rjmp	.-168    	; 0x37ee <drawChar+0xd8>
                    else
                        writeFillRect(x+i*size, y+j*size, size, size, bg);
                }
            }
        }
        if(bg != color) { // If opaque, draw vertical line for last column
    3896:	6b 89       	ldd	r22, Y+19	; 0x13
    3898:	7c 89       	ldd	r23, Y+20	; 0x14
    389a:	26 16       	cp	r2, r22
    389c:	37 06       	cpc	r3, r23
    389e:	09 f4       	brne	.+2      	; 0x38a2 <drawChar+0x18c>
    38a0:	df c0       	rjmp	.+446    	; 0x3a60 <drawChar+0x34a>
            if(size == 1) writeFastVLine(x+5, y, 8, bg);
    38a2:	7d 89       	ldd	r23, Y+21	; 0x15
    38a4:	71 30       	cpi	r23, 0x01	; 1
    38a6:	51 f4       	brne	.+20     	; 0x38bc <drawChar+0x1a6>
void writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
    38a8:	c4 01       	movw	r24, r8
    38aa:	05 96       	adiw	r24, 0x05	; 5
    38ac:	69 89       	ldd	r22, Y+17	; 0x11
    38ae:	7a 89       	ldd	r23, Y+18	; 0x12
    38b0:	48 e0       	ldi	r20, 0x08	; 8
    38b2:	50 e0       	ldi	r21, 0x00	; 0
    38b4:	91 01       	movw	r18, r2
    38b6:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <drawFastVLine>
    38ba:	d2 c0       	rjmp	.+420    	; 0x3a60 <drawChar+0x34a>
}

void writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
    38bc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    38be:	9b 8d       	ldd	r25, Y+27	; 0x1b
    38c0:	88 0f       	add	r24, r24
    38c2:	99 1f       	adc	r25, r25
    38c4:	88 0f       	add	r24, r24
    38c6:	99 1f       	adc	r25, r25
    38c8:	aa 8d       	ldd	r26, Y+26	; 0x1a
    38ca:	bb 8d       	ldd	r27, Y+27	; 0x1b
    38cc:	8a 0f       	add	r24, r26
    38ce:	9b 1f       	adc	r25, r27
    38d0:	88 0d       	add	r24, r8
    38d2:	99 1d       	adc	r25, r9
    38d4:	69 89       	ldd	r22, Y+17	; 0x11
    38d6:	7a 89       	ldd	r23, Y+18	; 0x12
    38d8:	ad 01       	movw	r20, r26
    38da:	2f 85       	ldd	r18, Y+15	; 0x0f
    38dc:	38 89       	ldd	r19, Y+16	; 0x10
    38de:	81 01       	movw	r16, r2
    38e0:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <fillRect>
    38e4:	bd c0       	rjmp	.+378    	; 0x3a60 <drawChar+0x34a>

        // Character is assumed previously filtered by write() to eliminate
        // newlines, returns, non-printable characters, etc.  Calling
        // drawChar() directly with 'bad' characters of font may cause mayhem!

        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
    38e6:	6c 5f       	subi	r22, 0xFC	; 252
    38e8:	7f 4f       	sbci	r23, 0xFF	; 255
    38ea:	fb 01       	movw	r30, r22
    38ec:	24 91       	lpm	r18, Z+
    38ee:	64 50       	subi	r22, 0x04	; 4
    38f0:	70 40       	sbci	r23, 0x00	; 0
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    38f2:	fb 01       	movw	r30, r22
    38f4:	32 96       	adiw	r30, 0x02	; 2
    38f6:	85 91       	lpm	r24, Z+
    38f8:	94 91       	lpm	r25, Z+
    38fa:	42 1b       	sub	r20, r18
    38fc:	e7 e0       	ldi	r30, 0x07	; 7
    38fe:	4e 9f       	mul	r20, r30
    3900:	80 01       	movw	r16, r0
    3902:	11 24       	eor	r1, r1
    3904:	08 0f       	add	r16, r24
    3906:	19 1f       	adc	r17, r25
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
    3908:	fb 01       	movw	r30, r22
    390a:	25 91       	lpm	r18, Z+
    390c:	34 91       	lpm	r19, Z+
    390e:	3c 83       	std	Y+4, r19	; 0x04
    3910:	2b 83       	std	Y+3, r18	; 0x03

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
    3912:	f8 01       	movw	r30, r16
    3914:	25 91       	lpm	r18, Z+
    3916:	34 91       	lpm	r19, Z+
        uint8_t  w  = pgm_read_byte(&glyph->width),
    3918:	0e 5f       	subi	r16, 0xFE	; 254
    391a:	1f 4f       	sbci	r17, 0xFF	; 255
    391c:	f8 01       	movw	r30, r16
    391e:	f4 91       	lpm	r31, Z+
    3920:	fa 83       	std	Y+2, r31	; 0x02
                 h  = pgm_read_byte(&glyph->height);
    3922:	0f 5f       	subi	r16, 0xFF	; 255
    3924:	1f 4f       	sbci	r17, 0xFF	; 255
    3926:	f8 01       	movw	r30, r16
    3928:	f4 91       	lpm	r31, Z+
    392a:	f9 83       	std	Y+1, r31	; 0x01
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
    392c:	0e 5f       	subi	r16, 0xFE	; 254
    392e:	1f 4f       	sbci	r17, 0xFF	; 255
    3930:	f8 01       	movw	r30, r16
    3932:	54 91       	lpm	r21, Z+
                 yo = pgm_read_byte(&glyph->yOffset);
    3934:	0f 5f       	subi	r16, 0xFF	; 255
    3936:	1f 4f       	sbci	r17, 0xFF	; 255
    3938:	f8 01       	movw	r30, r16
    393a:	44 91       	lpm	r20, Z+
        uint8_t  xx, yy, bits = 0, bit = 0;
        int16_t  xo16 = 0, yo16 = 0;

        if(size > 1) {
    393c:	fd 89       	ldd	r31, Y+21	; 0x15
    393e:	f2 30       	cpi	r31, 0x02	; 2
    3940:	28 f4       	brcc	.+10     	; 0x394c <drawChar+0x236>
    3942:	80 e0       	ldi	r24, 0x00	; 0
    3944:	90 e0       	ldi	r25, 0x00	; 0
    3946:	1e 82       	std	Y+6, r1	; 0x06
    3948:	1d 82       	std	Y+5, r1	; 0x05
    394a:	0a c0       	rjmp	.+20     	; 0x3960 <drawChar+0x24a>
            xo16 = xo;
    394c:	85 2f       	mov	r24, r21
    394e:	99 27       	eor	r25, r25
    3950:	87 fd       	sbrc	r24, 7
    3952:	90 95       	com	r25
            yo16 = yo;
    3954:	64 2f       	mov	r22, r20
    3956:	77 27       	eor	r23, r23
    3958:	67 fd       	sbrc	r22, 7
    395a:	70 95       	com	r23
    395c:	7e 83       	std	Y+6, r23	; 0x06
    395e:	6d 83       	std	Y+5, r22	; 0x05
    3960:	3b 87       	std	Y+11, r19	; 0x0b
    3962:	2a 87       	std	Y+10, r18	; 0x0a
    3964:	19 86       	std	Y+9, r1	; 0x09
    3966:	18 86       	std	Y+8, r1	; 0x08
    3968:	1f 82       	std	Y+7, r1	; 0x07
                }
                if(bits & 0x80) {
                    if(size == 1) {
                        writePixel(x+xo+xx, y+yo+yy, color);
                    } else {
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
    396a:	7d 89       	ldd	r23, Y+21	; 0x15
    396c:	e7 2e       	mov	r14, r23
    396e:	ff 24       	eor	r15, r15
    3970:	25 2e       	mov	r2, r21
    3972:	33 24       	eor	r3, r3
    3974:	27 fc       	sbrc	r2, 7
    3976:	30 94       	com	r3
    3978:	28 0c       	add	r2, r8
    397a:	39 1c       	adc	r3, r9
    397c:	8e 9d       	mul	r24, r14
    397e:	20 01       	movw	r4, r0
    3980:	8f 9d       	mul	r24, r15
    3982:	50 0c       	add	r5, r0
    3984:	9e 9d       	mul	r25, r14
    3986:	50 0c       	add	r5, r0
    3988:	11 24       	eor	r1, r1
    398a:	48 0c       	add	r4, r8
    398c:	59 1c       	adc	r5, r9
}


void writePixel(int16_t x, int16_t y, uint16_t color){
    // Overwrite in subclasses if startWrite is defined!
    drawPixel(x, y, color);
    398e:	64 2e       	mov	r6, r20
    3990:	77 24       	eor	r7, r7
    3992:	67 fc       	sbrc	r6, 7
    3994:	70 94       	com	r7
    3996:	89 89       	ldd	r24, Y+17	; 0x11
    3998:	9a 89       	ldd	r25, Y+18	; 0x12
    399a:	68 0e       	add	r6, r24
    399c:	79 1e       	adc	r7, r25
    399e:	41 c0       	rjmp	.+130    	; 0x3a22 <drawChar+0x30c>
        // implemented this yet.

        startWrite();
        for(yy=0; yy<h; yy++) {
            for(xx=0; xx<w; xx++) {
                if(!(bit++ & 7)) {
    39a0:	89 2f       	mov	r24, r25
    39a2:	90 e0       	ldi	r25, 0x00	; 0
    39a4:	87 70       	andi	r24, 0x07	; 7
    39a6:	90 70       	andi	r25, 0x00	; 0
    39a8:	89 2b       	or	r24, r25
    39aa:	59 f4       	brne	.+22     	; 0x39c2 <drawChar+0x2ac>
                    bits = pgm_read_byte(&bitmap[bo++]);
    39ac:	eb 81       	ldd	r30, Y+3	; 0x03
    39ae:	fc 81       	ldd	r31, Y+4	; 0x04
    39b0:	aa 85       	ldd	r26, Y+10	; 0x0a
    39b2:	bb 85       	ldd	r27, Y+11	; 0x0b
    39b4:	ea 0f       	add	r30, r26
    39b6:	fb 1f       	adc	r31, r27
    39b8:	11 96       	adiw	r26, 0x01	; 1
    39ba:	bb 87       	std	Y+11, r27	; 0x0b
    39bc:	aa 87       	std	Y+10, r26	; 0x0a
    39be:	b4 91       	lpm	r27, Z+
    39c0:	b8 87       	std	Y+8, r27	; 0x08
                }
                if(bits & 0x80) {
    39c2:	e8 85       	ldd	r30, Y+8	; 0x08
    39c4:	e7 ff       	sbrs	r30, 7
    39c6:	13 c0       	rjmp	.+38     	; 0x39ee <drawChar+0x2d8>
                    if(size == 1) {
    39c8:	fd 89       	ldd	r31, Y+21	; 0x15
    39ca:	f1 30       	cpi	r31, 0x01	; 1
    39cc:	41 f4       	brne	.+16     	; 0x39de <drawChar+0x2c8>
}


void writePixel(int16_t x, int16_t y, uint16_t color){
    // Overwrite in subclasses if startWrite is defined!
    drawPixel(x, y, color);
    39ce:	c5 01       	movw	r24, r10
    39d0:	68 8d       	ldd	r22, Y+24	; 0x18
    39d2:	79 8d       	ldd	r23, Y+25	; 0x19
    39d4:	4b 89       	ldd	r20, Y+19	; 0x13
    39d6:	5c 89       	ldd	r21, Y+20	; 0x14
    39d8:	0e 94 f6 25 	call	0x4bec	; 0x4bec <drawPixel>
    39dc:	08 c0       	rjmp	.+16     	; 0x39ee <drawChar+0x2d8>
}

void writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
    39de:	c6 01       	movw	r24, r12
    39e0:	b4 01       	movw	r22, r8
    39e2:	a7 01       	movw	r20, r14
    39e4:	97 01       	movw	r18, r14
    39e6:	0b 89       	ldd	r16, Y+19	; 0x13
    39e8:	1c 89       	ldd	r17, Y+20	; 0x14
    39ea:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <fillRect>
                    } else {
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
                          size, size, color);
                    }
                }
                bits <<= 1;
    39ee:	28 85       	ldd	r18, Y+8	; 0x08
    39f0:	22 0f       	add	r18, r18
    39f2:	28 87       	std	Y+8, r18	; 0x08
    39f4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    39f6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    39f8:	6f 5f       	subi	r22, 0xFF	; 255
    39fa:	7f 4f       	sbci	r23, 0xFF	; 255
    39fc:	7b 8f       	std	Y+27, r23	; 0x1b
    39fe:	6a 8f       	std	Y+26, r22	; 0x1a
    3a00:	08 94       	sec
    3a02:	a1 1c       	adc	r10, r1
    3a04:	b1 1c       	adc	r11, r1
    3a06:	ce 0c       	add	r12, r14
    3a08:	df 1c       	adc	r13, r15

// TEXT- AND CHARACTER-HANDLING FUNCTIONS ----------------------------------
#ifdef ADAFONTS
// Draw a character
void drawChar(int16_t x, int16_t y, unsigned char c,
  uint16_t color, uint16_t bg, uint8_t size) {
    3a0a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3a0c:	9f 81       	ldd	r25, Y+7	; 0x07
    3a0e:	98 0f       	add	r25, r24
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
        for(yy=0; yy<h; yy++) {
            for(xx=0; xx<w; xx++) {
    3a10:	7a 81       	ldd	r23, Y+2	; 0x02
    3a12:	87 17       	cp	r24, r23
    3a14:	28 f2       	brcs	.-118    	; 0x39a0 <drawChar+0x28a>
    3a16:	8f 81       	ldd	r24, Y+7	; 0x07
    3a18:	87 0f       	add	r24, r23
    3a1a:	8f 83       	std	Y+7, r24	; 0x07
        // this (a canvas object type for MCUs that can afford the RAM and
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
        for(yy=0; yy<h; yy++) {
    3a1c:	99 85       	ldd	r25, Y+9	; 0x09
    3a1e:	9f 5f       	subi	r25, 0xFF	; 255
    3a20:	99 87       	std	Y+9, r25	; 0x09
    3a22:	a9 85       	ldd	r26, Y+9	; 0x09
    3a24:	b9 81       	ldd	r27, Y+1	; 0x01
    3a26:	ab 17       	cp	r26, r27
    3a28:	d8 f4       	brcc	.+54     	; 0x3a60 <drawChar+0x34a>
                }
                if(bits & 0x80) {
                    if(size == 1) {
                        writePixel(x+xo+xx, y+yo+yy, color);
                    } else {
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
    3a2a:	2a 2f       	mov	r18, r26
    3a2c:	30 e0       	ldi	r19, 0x00	; 0
    3a2e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a30:	9e 81       	ldd	r25, Y+6	; 0x06
    3a32:	82 0f       	add	r24, r18
    3a34:	93 1f       	adc	r25, r19
    3a36:	8e 9d       	mul	r24, r14
    3a38:	40 01       	movw	r8, r0
    3a3a:	8f 9d       	mul	r24, r15
    3a3c:	90 0c       	add	r9, r0
    3a3e:	9e 9d       	mul	r25, r14
    3a40:	90 0c       	add	r9, r0
    3a42:	11 24       	eor	r1, r1
    3a44:	e9 89       	ldd	r30, Y+17	; 0x11
    3a46:	fa 89       	ldd	r31, Y+18	; 0x12
    3a48:	8e 0e       	add	r8, r30
    3a4a:	9f 1e       	adc	r9, r31
    3a4c:	51 01       	movw	r10, r2
    3a4e:	62 01       	movw	r12, r4
    3a50:	1b 8e       	std	Y+27, r1	; 0x1b
    3a52:	1a 8e       	std	Y+26, r1	; 0x1a
}


void writePixel(int16_t x, int16_t y, uint16_t color){
    // Overwrite in subclasses if startWrite is defined!
    drawPixel(x, y, color);
    3a54:	b3 01       	movw	r22, r6
    3a56:	62 0f       	add	r22, r18
    3a58:	73 1f       	adc	r23, r19
    3a5a:	79 8f       	std	Y+25, r23	; 0x19
    3a5c:	68 8f       	std	Y+24, r22	; 0x18
    3a5e:	d5 cf       	rjmp	.-86     	; 0x3a0a <drawChar+0x2f4>
        }
        endWrite();

    } // End classic vs custom font
	/**/
}
    3a60:	6b 96       	adiw	r28, 0x1b	; 27
    3a62:	0f b6       	in	r0, 0x3f	; 63
    3a64:	f8 94       	cli
    3a66:	de bf       	out	0x3e, r29	; 62
    3a68:	0f be       	out	0x3f, r0	; 63
    3a6a:	cd bf       	out	0x3d, r28	; 61
    3a6c:	cf 91       	pop	r28
    3a6e:	df 91       	pop	r29
    3a70:	1f 91       	pop	r17
    3a72:	0f 91       	pop	r16
    3a74:	ff 90       	pop	r15
    3a76:	ef 90       	pop	r14
    3a78:	df 90       	pop	r13
    3a7a:	cf 90       	pop	r12
    3a7c:	bf 90       	pop	r11
    3a7e:	af 90       	pop	r10
    3a80:	9f 90       	pop	r9
    3a82:	8f 90       	pop	r8
    3a84:	7f 90       	pop	r7
    3a86:	6f 90       	pop	r6
    3a88:	5f 90       	pop	r5
    3a8a:	4f 90       	pop	r4
    3a8c:	3f 90       	pop	r3
    3a8e:	2f 90       	pop	r2
    3a90:	08 95       	ret

00003a92 <write>:


void write(uint8_t c) {
    3a92:	ef 92       	push	r14
    3a94:	0f 93       	push	r16
    3a96:	1f 93       	push	r17
    3a98:	cf 93       	push	r28
    3a9a:	df 93       	push	r29
    3a9c:	48 2f       	mov	r20, r24

    if(!gfxFont) { // 'Classic' built-in font
    3a9e:	a0 91 3b 01 	lds	r26, 0x013B
    3aa2:	b0 91 3c 01 	lds	r27, 0x013C
    3aa6:	10 97       	sbiw	r26, 0x00	; 0
    3aa8:	09 f0       	breq	.+2      	; 0x3aac <write+0x1a>
    3aaa:	70 c0       	rjmp	.+224    	; 0x3b8c <write+0xfa>

        if(c == '\n') {                        // Newline?
    3aac:	8a 30       	cpi	r24, 0x0A	; 10
    3aae:	b9 f4       	brne	.+46     	; 0x3ade <write+0x4c>
            cursor_x  = 0;                     // Reset x to zero,
    3ab0:	10 92 4c 01 	sts	0x014C, r1
    3ab4:	10 92 4b 01 	sts	0x014B, r1
            cursor_y += textsize * 8;          // advance y one line
    3ab8:	20 91 4e 01 	lds	r18, 0x014E
    3abc:	30 e0       	ldi	r19, 0x00	; 0
    3abe:	03 e0       	ldi	r16, 0x03	; 3
    3ac0:	22 0f       	add	r18, r18
    3ac2:	33 1f       	adc	r19, r19
    3ac4:	0a 95       	dec	r16
    3ac6:	e1 f7       	brne	.-8      	; 0x3ac0 <write+0x2e>
    3ac8:	80 91 45 01 	lds	r24, 0x0145
    3acc:	90 91 46 01 	lds	r25, 0x0146
    3ad0:	82 0f       	add	r24, r18
    3ad2:	93 1f       	adc	r25, r19
    3ad4:	90 93 46 01 	sts	0x0146, r25
    3ad8:	80 93 45 01 	sts	0x0145, r24
    3adc:	07 c1       	rjmp	.+526    	; 0x3cec <write+0x25a>
        } else if(c != '\r') {                 // Ignore carriage returns
    3ade:	8d 30       	cpi	r24, 0x0D	; 13
    3ae0:	09 f4       	brne	.+2      	; 0x3ae4 <write+0x52>
    3ae2:	04 c1       	rjmp	.+520    	; 0x3cec <write+0x25a>
            if(wrap && ((cursor_x + textsize * 6) > _width)) { // Off right?
    3ae4:	80 91 4d 01 	lds	r24, 0x014D
    3ae8:	88 23       	and	r24, r24
    3aea:	59 f1       	breq	.+86     	; 0x3b42 <write+0xb0>
    3aec:	80 91 4e 01 	lds	r24, 0x014E
    3af0:	68 2f       	mov	r22, r24
    3af2:	70 e0       	ldi	r23, 0x00	; 0
    3af4:	cb 01       	movw	r24, r22
    3af6:	88 0f       	add	r24, r24
    3af8:	99 1f       	adc	r25, r25
    3afa:	86 0f       	add	r24, r22
    3afc:	97 1f       	adc	r25, r23
    3afe:	88 0f       	add	r24, r24
    3b00:	99 1f       	adc	r25, r25
    3b02:	20 91 4b 01 	lds	r18, 0x014B
    3b06:	30 91 4c 01 	lds	r19, 0x014C
    3b0a:	82 0f       	add	r24, r18
    3b0c:	93 1f       	adc	r25, r19
    3b0e:	20 91 49 01 	lds	r18, 0x0149
    3b12:	30 91 4a 01 	lds	r19, 0x014A
    3b16:	28 17       	cp	r18, r24
    3b18:	39 07       	cpc	r19, r25
    3b1a:	9c f4       	brge	.+38     	; 0x3b42 <write+0xb0>
                cursor_x  = 0;                 // Reset x to zero,
    3b1c:	10 92 4c 01 	sts	0x014C, r1
    3b20:	10 92 4b 01 	sts	0x014B, r1
                cursor_y += textsize * 8;      // advance y one line
    3b24:	a3 e0       	ldi	r26, 0x03	; 3
    3b26:	66 0f       	add	r22, r22
    3b28:	77 1f       	adc	r23, r23
    3b2a:	aa 95       	dec	r26
    3b2c:	e1 f7       	brne	.-8      	; 0x3b26 <write+0x94>
    3b2e:	80 91 45 01 	lds	r24, 0x0145
    3b32:	90 91 46 01 	lds	r25, 0x0146
    3b36:	86 0f       	add	r24, r22
    3b38:	97 1f       	adc	r25, r23
    3b3a:	90 93 46 01 	sts	0x0146, r25
    3b3e:	80 93 45 01 	sts	0x0145, r24
            }
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    3b42:	60 91 45 01 	lds	r22, 0x0145
    3b46:	70 91 46 01 	lds	r23, 0x0146
    3b4a:	20 91 53 01 	lds	r18, 0x0153
    3b4e:	30 91 54 01 	lds	r19, 0x0154
    3b52:	00 91 51 01 	lds	r16, 0x0151
    3b56:	10 91 52 01 	lds	r17, 0x0152
    3b5a:	80 91 4b 01 	lds	r24, 0x014B
    3b5e:	90 91 4c 01 	lds	r25, 0x014C
    3b62:	e0 90 4e 01 	lds	r14, 0x014E
    3b66:	0e 94 8b 1b 	call	0x3716	; 0x3716 <drawChar>
            cursor_x += textsize * 6;          // Advance x one char
    3b6a:	20 91 4e 01 	lds	r18, 0x014E
    3b6e:	86 e0       	ldi	r24, 0x06	; 6
    3b70:	28 9f       	mul	r18, r24
    3b72:	90 01       	movw	r18, r0
    3b74:	11 24       	eor	r1, r1
    3b76:	80 91 4b 01 	lds	r24, 0x014B
    3b7a:	90 91 4c 01 	lds	r25, 0x014C
    3b7e:	82 0f       	add	r24, r18
    3b80:	93 1f       	adc	r25, r19
    3b82:	90 93 4c 01 	sts	0x014C, r25
    3b86:	80 93 4b 01 	sts	0x014B, r24
    3b8a:	b0 c0       	rjmp	.+352    	; 0x3cec <write+0x25a>
        }

    } else { // Custom font

        if(c == '\n') {
    3b8c:	8a 30       	cpi	r24, 0x0A	; 10
    3b8e:	b9 f4       	brne	.+46     	; 0x3bbe <write+0x12c>
            cursor_x  = 0;
    3b90:	10 92 4c 01 	sts	0x014C, r1
    3b94:	10 92 4b 01 	sts	0x014B, r1
            cursor_y += (int16_t)textsize *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    3b98:	16 96       	adiw	r26, 0x06	; 6
    3b9a:	fd 01       	movw	r30, r26
    3b9c:	84 91       	lpm	r24, Z+

    } else { // Custom font

        if(c == '\n') {
            cursor_x  = 0;
            cursor_y += (int16_t)textsize *
    3b9e:	20 91 4e 01 	lds	r18, 0x014E
    3ba2:	82 9f       	mul	r24, r18
    3ba4:	c0 01       	movw	r24, r0
    3ba6:	11 24       	eor	r1, r1
    3ba8:	20 91 45 01 	lds	r18, 0x0145
    3bac:	30 91 46 01 	lds	r19, 0x0146
    3bb0:	28 0f       	add	r18, r24
    3bb2:	39 1f       	adc	r19, r25
    3bb4:	30 93 46 01 	sts	0x0146, r19
    3bb8:	20 93 45 01 	sts	0x0145, r18
    3bbc:	97 c0       	rjmp	.+302    	; 0x3cec <write+0x25a>
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
        } else if(c != '\r') {
    3bbe:	8d 30       	cpi	r24, 0x0D	; 13
    3bc0:	09 f4       	brne	.+2      	; 0x3bc4 <write+0x132>
    3bc2:	94 c0       	rjmp	.+296    	; 0x3cec <write+0x25a>
            uint8_t first = pgm_read_byte(&gfxFont->first);
    3bc4:	14 96       	adiw	r26, 0x04	; 4
    3bc6:	fd 01       	movw	r30, r26
    3bc8:	54 91       	lpm	r21, Z+
    3bca:	14 97       	sbiw	r26, 0x04	; 4
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    3bcc:	85 17       	cp	r24, r21
    3bce:	08 f4       	brcc	.+2      	; 0x3bd2 <write+0x140>
    3bd0:	8d c0       	rjmp	.+282    	; 0x3cec <write+0x25a>
    3bd2:	15 96       	adiw	r26, 0x05	; 5
    3bd4:	fd 01       	movw	r30, r26
    3bd6:	84 91       	lpm	r24, Z+
    3bd8:	15 97       	sbiw	r26, 0x05	; 5
    3bda:	84 17       	cp	r24, r20
    3bdc:	08 f4       	brcc	.+2      	; 0x3be0 <write+0x14e>
    3bde:	86 c0       	rjmp	.+268    	; 0x3cec <write+0x25a>
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
    3be0:	cd 01       	movw	r24, r26
    3be2:	02 96       	adiw	r24, 0x02	; 2
    3be4:	fc 01       	movw	r30, r24
    3be6:	c5 91       	lpm	r28, Z+
    3be8:	d4 91       	lpm	r29, Z+
    3bea:	24 2f       	mov	r18, r20
    3bec:	30 e0       	ldi	r19, 0x00	; 0
    3bee:	25 1b       	sub	r18, r21
    3bf0:	31 09       	sbc	r19, r1
    3bf2:	c9 01       	movw	r24, r18
    3bf4:	f3 e0       	ldi	r31, 0x03	; 3
    3bf6:	88 0f       	add	r24, r24
    3bf8:	99 1f       	adc	r25, r25
    3bfa:	fa 95       	dec	r31
    3bfc:	e1 f7       	brne	.-8      	; 0x3bf6 <write+0x164>
    3bfe:	82 1b       	sub	r24, r18
    3c00:	93 0b       	sbc	r25, r19
    3c02:	c8 0f       	add	r28, r24
    3c04:	d9 1f       	adc	r29, r25
                  &gfxFont->glyph))[c - first]);
                uint8_t   w     = pgm_read_byte(&glyph->width),
    3c06:	22 96       	adiw	r28, 0x02	; 2
    3c08:	fe 01       	movw	r30, r28
    3c0a:	24 91       	lpm	r18, Z+
                          h     = pgm_read_byte(&glyph->height);
    3c0c:	21 96       	adiw	r28, 0x01	; 1
    3c0e:	fe 01       	movw	r30, r28
    3c10:	84 91       	lpm	r24, Z+
    3c12:	23 97       	sbiw	r28, 0x03	; 3
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
    3c14:	22 23       	and	r18, r18
    3c16:	09 f4       	brne	.+2      	; 0x3c1a <write+0x188>
    3c18:	57 c0       	rjmp	.+174    	; 0x3cc8 <write+0x236>
    3c1a:	88 23       	and	r24, r24
    3c1c:	09 f4       	brne	.+2      	; 0x3c20 <write+0x18e>
    3c1e:	54 c0       	rjmp	.+168    	; 0x3cc8 <write+0x236>
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    3c20:	25 96       	adiw	r28, 0x05	; 5
    3c22:	fe 01       	movw	r30, r28
    3c24:	94 91       	lpm	r25, Z+
    3c26:	25 97       	sbiw	r28, 0x05	; 5
                    if(wrap && ((cursor_x + textsize * (xo + w)) > _width)) {
    3c28:	80 91 4d 01 	lds	r24, 0x014D
    3c2c:	88 23       	and	r24, r24
    3c2e:	c1 f1       	breq	.+112    	; 0x3ca0 <write+0x20e>
    3c30:	80 91 4e 01 	lds	r24, 0x014E
    3c34:	68 2f       	mov	r22, r24
    3c36:	70 e0       	ldi	r23, 0x00	; 0
    3c38:	89 2f       	mov	r24, r25
    3c3a:	99 27       	eor	r25, r25
    3c3c:	87 fd       	sbrc	r24, 7
    3c3e:	90 95       	com	r25
    3c40:	82 0f       	add	r24, r18
    3c42:	91 1d       	adc	r25, r1
    3c44:	9c 01       	movw	r18, r24
    3c46:	26 9f       	mul	r18, r22
    3c48:	c0 01       	movw	r24, r0
    3c4a:	27 9f       	mul	r18, r23
    3c4c:	90 0d       	add	r25, r0
    3c4e:	36 9f       	mul	r19, r22
    3c50:	90 0d       	add	r25, r0
    3c52:	11 24       	eor	r1, r1
    3c54:	20 91 4b 01 	lds	r18, 0x014B
    3c58:	30 91 4c 01 	lds	r19, 0x014C
    3c5c:	82 0f       	add	r24, r18
    3c5e:	93 1f       	adc	r25, r19
    3c60:	20 91 49 01 	lds	r18, 0x0149
    3c64:	30 91 4a 01 	lds	r19, 0x014A
    3c68:	28 17       	cp	r18, r24
    3c6a:	39 07       	cpc	r19, r25
    3c6c:	cc f4       	brge	.+50     	; 0x3ca0 <write+0x20e>
                        cursor_x  = 0;
    3c6e:	10 92 4c 01 	sts	0x014C, r1
    3c72:	10 92 4b 01 	sts	0x014B, r1
                        cursor_y += (int16_t)textsize *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    3c76:	16 96       	adiw	r26, 0x06	; 6
    3c78:	fd 01       	movw	r30, r26
    3c7a:	84 91       	lpm	r24, Z+
                          h     = pgm_read_byte(&glyph->height);
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
                    if(wrap && ((cursor_x + textsize * (xo + w)) > _width)) {
                        cursor_x  = 0;
                        cursor_y += (int16_t)textsize *
    3c7c:	90 e0       	ldi	r25, 0x00	; 0
    3c7e:	86 9f       	mul	r24, r22
    3c80:	90 01       	movw	r18, r0
    3c82:	87 9f       	mul	r24, r23
    3c84:	30 0d       	add	r19, r0
    3c86:	96 9f       	mul	r25, r22
    3c88:	30 0d       	add	r19, r0
    3c8a:	11 24       	eor	r1, r1
    3c8c:	80 91 45 01 	lds	r24, 0x0145
    3c90:	90 91 46 01 	lds	r25, 0x0146
    3c94:	82 0f       	add	r24, r18
    3c96:	93 1f       	adc	r25, r19
    3c98:	90 93 46 01 	sts	0x0146, r25
    3c9c:	80 93 45 01 	sts	0x0145, r24
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    3ca0:	60 91 45 01 	lds	r22, 0x0145
    3ca4:	70 91 46 01 	lds	r23, 0x0146
    3ca8:	20 91 53 01 	lds	r18, 0x0153
    3cac:	30 91 54 01 	lds	r19, 0x0154
    3cb0:	00 91 51 01 	lds	r16, 0x0151
    3cb4:	10 91 52 01 	lds	r17, 0x0152
    3cb8:	80 91 4b 01 	lds	r24, 0x014B
    3cbc:	90 91 4c 01 	lds	r25, 0x014C
    3cc0:	e0 90 4e 01 	lds	r14, 0x014E
    3cc4:	0e 94 8b 1b 	call	0x3716	; 0x3716 <drawChar>
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
    3cc8:	24 96       	adiw	r28, 0x04	; 4
    3cca:	fe 01       	movw	r30, r28
    3ccc:	84 91       	lpm	r24, Z+
    3cce:	20 91 4e 01 	lds	r18, 0x014E
    3cd2:	82 9f       	mul	r24, r18
    3cd4:	c0 01       	movw	r24, r0
    3cd6:	11 24       	eor	r1, r1
    3cd8:	20 91 4b 01 	lds	r18, 0x014B
    3cdc:	30 91 4c 01 	lds	r19, 0x014C
    3ce0:	28 0f       	add	r18, r24
    3ce2:	39 1f       	adc	r19, r25
    3ce4:	30 93 4c 01 	sts	0x014C, r19
    3ce8:	20 93 4b 01 	sts	0x014B, r18
            }
        }

    }

}
    3cec:	df 91       	pop	r29
    3cee:	cf 91       	pop	r28
    3cf0:	1f 91       	pop	r17
    3cf2:	0f 91       	pop	r16
    3cf4:	ef 90       	pop	r14
    3cf6:	08 95       	ret

00003cf8 <drawCircleHelper>:
    }
    endWrite();
}

void drawCircleHelper( int16_t x0, int16_t y0,
        int16_t r, uint8_t cornername, uint16_t color) {
    3cf8:	2f 92       	push	r2
    3cfa:	3f 92       	push	r3
    3cfc:	4f 92       	push	r4
    3cfe:	5f 92       	push	r5
    3d00:	6f 92       	push	r6
    3d02:	7f 92       	push	r7
    3d04:	8f 92       	push	r8
    3d06:	9f 92       	push	r9
    3d08:	af 92       	push	r10
    3d0a:	bf 92       	push	r11
    3d0c:	cf 92       	push	r12
    3d0e:	df 92       	push	r13
    3d10:	ef 92       	push	r14
    3d12:	ff 92       	push	r15
    3d14:	0f 93       	push	r16
    3d16:	1f 93       	push	r17
    3d18:	df 93       	push	r29
    3d1a:	cf 93       	push	r28
    3d1c:	cd b7       	in	r28, 0x3d	; 61
    3d1e:	de b7       	in	r29, 0x3e	; 62
    3d20:	60 97       	sbiw	r28, 0x10	; 16
    3d22:	0f b6       	in	r0, 0x3f	; 63
    3d24:	f8 94       	cli
    3d26:	de bf       	out	0x3e, r29	; 62
    3d28:	0f be       	out	0x3f, r0	; 63
    3d2a:	cd bf       	out	0x3d, r28	; 61
    3d2c:	5c 01       	movw	r10, r24
    3d2e:	6b 01       	movw	r12, r22
    int16_t f     = 1 - r;
    3d30:	61 e0       	ldi	r22, 0x01	; 1
    3d32:	e6 2e       	mov	r14, r22
    3d34:	f1 2c       	mov	r15, r1
    3d36:	e4 1a       	sub	r14, r20
    3d38:	f5 0a       	sbc	r15, r21
    int16_t ddF_x = 1;
    int16_t ddF_y = -2 * r;
    3d3a:	ca 01       	movw	r24, r20
    3d3c:	88 0f       	add	r24, r24
    3d3e:	99 1f       	adc	r25, r25
    3d40:	66 27       	eor	r22, r22
    3d42:	77 27       	eor	r23, r23
    3d44:	68 1b       	sub	r22, r24
    3d46:	79 0b       	sbc	r23, r25
    3d48:	7c 83       	std	Y+4, r23	; 0x04
    3d4a:	6b 83       	std	Y+3, r22	; 0x03
    3d4c:	16 01       	movw	r2, r12
    3d4e:	08 94       	sec
    3d50:	21 08       	sbc	r2, r1
    3d52:	31 08       	sbc	r3, r1
    3d54:	25 01       	movw	r4, r10
    3d56:	08 94       	sec
    3d58:	41 08       	sbc	r4, r1
    3d5a:	51 08       	sbc	r5, r1
    3d5c:	36 01       	movw	r6, r12
    3d5e:	08 94       	sec
    3d60:	61 1c       	adc	r6, r1
    3d62:	71 1c       	adc	r7, r1
    3d64:	45 01       	movw	r8, r10
    3d66:	08 94       	sec
    3d68:	81 1c       	adc	r8, r1
    3d6a:	91 1c       	adc	r9, r1
    3d6c:	58 8b       	std	Y+16, r21	; 0x10
    3d6e:	4f 87       	std	Y+15, r20	; 0x0f
    3d70:	81 e0       	ldi	r24, 0x01	; 1
    3d72:	90 e0       	ldi	r25, 0x00	; 0
    3d74:	9e 83       	std	Y+6, r25	; 0x06
    3d76:	8d 83       	std	Y+5, r24	; 0x05
    3d78:	1a 82       	std	Y+2, r1	; 0x02
    3d7a:	19 82       	std	Y+1, r1	; 0x01
            f     += ddF_y;
        }
        x++;
        ddF_x += 2;
        f     += ddF_x;
        if (cornername & 0x4) {
    3d7c:	30 e0       	ldi	r19, 0x00	; 0
    3d7e:	f9 01       	movw	r30, r18
    3d80:	e4 70       	andi	r30, 0x04	; 4
    3d82:	f0 70       	andi	r31, 0x00	; 0
    3d84:	f8 87       	std	Y+8, r31	; 0x08
    3d86:	ef 83       	std	Y+7, r30	; 0x07
            writePixel(x0 + x, y0 + y, color);
            writePixel(x0 + y, y0 + x, color);
        }
        if (cornername & 0x2) {
    3d88:	b9 01       	movw	r22, r18
    3d8a:	62 70       	andi	r22, 0x02	; 2
    3d8c:	70 70       	andi	r23, 0x00	; 0
    3d8e:	7a 87       	std	Y+10, r23	; 0x0a
    3d90:	69 87       	std	Y+9, r22	; 0x09
            writePixel(x0 + x, y0 - y, color);
            writePixel(x0 + y, y0 - x, color);
        }
        if (cornername & 0x8) {
    3d92:	c9 01       	movw	r24, r18
    3d94:	88 70       	andi	r24, 0x08	; 8
    3d96:	90 70       	andi	r25, 0x00	; 0
    3d98:	9c 87       	std	Y+12, r25	; 0x0c
    3d9a:	8b 87       	std	Y+11, r24	; 0x0b
            writePixel(x0 - y, y0 + x, color);
            writePixel(x0 - x, y0 + y, color);
        }
        if (cornername & 0x1) {
    3d9c:	f9 01       	movw	r30, r18
    3d9e:	e1 70       	andi	r30, 0x01	; 1
    3da0:	f0 70       	andi	r31, 0x00	; 0
    3da2:	fe 87       	std	Y+14, r31	; 0x0e
    3da4:	ed 87       	std	Y+13, r30	; 0x0d
    3da6:	7c c0       	rjmp	.+248    	; 0x3ea0 <drawCircleHelper+0x1a8>
    int16_t ddF_y = -2 * r;
    int16_t x     = 0;
    int16_t y     = r;

    while (x<y) {
        if (f >= 0) {
    3da8:	f7 fc       	sbrc	r15, 7
    3daa:	0e c0       	rjmp	.+28     	; 0x3dc8 <drawCircleHelper+0xd0>
            y--;
    3dac:	2f 85       	ldd	r18, Y+15	; 0x0f
    3dae:	38 89       	ldd	r19, Y+16	; 0x10
    3db0:	21 50       	subi	r18, 0x01	; 1
    3db2:	30 40       	sbci	r19, 0x00	; 0
    3db4:	38 8b       	std	Y+16, r19	; 0x10
    3db6:	2f 87       	std	Y+15, r18	; 0x0f
            ddF_y += 2;
    3db8:	6b 81       	ldd	r22, Y+3	; 0x03
    3dba:	7c 81       	ldd	r23, Y+4	; 0x04
    3dbc:	6e 5f       	subi	r22, 0xFE	; 254
    3dbe:	7f 4f       	sbci	r23, 0xFF	; 255
    3dc0:	7c 83       	std	Y+4, r23	; 0x04
    3dc2:	6b 83       	std	Y+3, r22	; 0x03
            f     += ddF_y;
    3dc4:	e6 0e       	add	r14, r22
    3dc6:	f7 1e       	adc	r15, r23
        }
        x++;
    3dc8:	89 81       	ldd	r24, Y+1	; 0x01
    3dca:	9a 81       	ldd	r25, Y+2	; 0x02
    3dcc:	01 96       	adiw	r24, 0x01	; 1
    3dce:	9a 83       	std	Y+2, r25	; 0x02
    3dd0:	89 83       	std	Y+1, r24	; 0x01
        ddF_x += 2;
    3dd2:	ed 81       	ldd	r30, Y+5	; 0x05
    3dd4:	fe 81       	ldd	r31, Y+6	; 0x06
    3dd6:	32 96       	adiw	r30, 0x02	; 2
    3dd8:	fe 83       	std	Y+6, r31	; 0x06
    3dda:	ed 83       	std	Y+5, r30	; 0x05
        f     += ddF_x;
    3ddc:	ee 0e       	add	r14, r30
    3dde:	ff 1e       	adc	r15, r31
        if (cornername & 0x4) {
    3de0:	2f 81       	ldd	r18, Y+7	; 0x07
    3de2:	38 85       	ldd	r19, Y+8	; 0x08
    3de4:	23 2b       	or	r18, r19
    3de6:	81 f0       	breq	.+32     	; 0x3e08 <drawCircleHelper+0x110>
}


void writePixel(int16_t x, int16_t y, uint16_t color){
    // Overwrite in subclasses if startWrite is defined!
    drawPixel(x, y, color);
    3de8:	6f 85       	ldd	r22, Y+15	; 0x0f
    3dea:	78 89       	ldd	r23, Y+16	; 0x10
    3dec:	6c 0d       	add	r22, r12
    3dee:	7d 1d       	adc	r23, r13
    3df0:	c4 01       	movw	r24, r8
    3df2:	a8 01       	movw	r20, r16
    3df4:	0e 94 f6 25 	call	0x4bec	; 0x4bec <drawPixel>
    3df8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3dfa:	98 89       	ldd	r25, Y+16	; 0x10
    3dfc:	8a 0d       	add	r24, r10
    3dfe:	9b 1d       	adc	r25, r11
    3e00:	b3 01       	movw	r22, r6
    3e02:	a8 01       	movw	r20, r16
    3e04:	0e 94 f6 25 	call	0x4bec	; 0x4bec <drawPixel>
        f     += ddF_x;
        if (cornername & 0x4) {
            writePixel(x0 + x, y0 + y, color);
            writePixel(x0 + y, y0 + x, color);
        }
        if (cornername & 0x2) {
    3e08:	69 85       	ldd	r22, Y+9	; 0x09
    3e0a:	7a 85       	ldd	r23, Y+10	; 0x0a
    3e0c:	67 2b       	or	r22, r23
    3e0e:	89 f0       	breq	.+34     	; 0x3e32 <drawCircleHelper+0x13a>
}


void writePixel(int16_t x, int16_t y, uint16_t color){
    // Overwrite in subclasses if startWrite is defined!
    drawPixel(x, y, color);
    3e10:	b6 01       	movw	r22, r12
    3e12:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e14:	98 89       	ldd	r25, Y+16	; 0x10
    3e16:	68 1b       	sub	r22, r24
    3e18:	79 0b       	sbc	r23, r25
    3e1a:	c4 01       	movw	r24, r8
    3e1c:	a8 01       	movw	r20, r16
    3e1e:	0e 94 f6 25 	call	0x4bec	; 0x4bec <drawPixel>
    3e22:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e24:	98 89       	ldd	r25, Y+16	; 0x10
    3e26:	8a 0d       	add	r24, r10
    3e28:	9b 1d       	adc	r25, r11
    3e2a:	b1 01       	movw	r22, r2
    3e2c:	a8 01       	movw	r20, r16
    3e2e:	0e 94 f6 25 	call	0x4bec	; 0x4bec <drawPixel>
        }
        if (cornername & 0x2) {
            writePixel(x0 + x, y0 - y, color);
            writePixel(x0 + y, y0 - x, color);
        }
        if (cornername & 0x8) {
    3e32:	eb 85       	ldd	r30, Y+11	; 0x0b
    3e34:	fc 85       	ldd	r31, Y+12	; 0x0c
    3e36:	ef 2b       	or	r30, r31
    3e38:	89 f0       	breq	.+34     	; 0x3e5c <drawCircleHelper+0x164>
}


void writePixel(int16_t x, int16_t y, uint16_t color){
    // Overwrite in subclasses if startWrite is defined!
    drawPixel(x, y, color);
    3e3a:	c5 01       	movw	r24, r10
    3e3c:	2f 85       	ldd	r18, Y+15	; 0x0f
    3e3e:	38 89       	ldd	r19, Y+16	; 0x10
    3e40:	82 1b       	sub	r24, r18
    3e42:	93 0b       	sbc	r25, r19
    3e44:	b3 01       	movw	r22, r6
    3e46:	a8 01       	movw	r20, r16
    3e48:	0e 94 f6 25 	call	0x4bec	; 0x4bec <drawPixel>
    3e4c:	6f 85       	ldd	r22, Y+15	; 0x0f
    3e4e:	78 89       	ldd	r23, Y+16	; 0x10
    3e50:	6c 0d       	add	r22, r12
    3e52:	7d 1d       	adc	r23, r13
    3e54:	c2 01       	movw	r24, r4
    3e56:	a8 01       	movw	r20, r16
    3e58:	0e 94 f6 25 	call	0x4bec	; 0x4bec <drawPixel>
        }
        if (cornername & 0x8) {
            writePixel(x0 - y, y0 + x, color);
            writePixel(x0 - x, y0 + y, color);
        }
        if (cornername & 0x1) {
    3e5c:	6d 85       	ldd	r22, Y+13	; 0x0d
    3e5e:	7e 85       	ldd	r23, Y+14	; 0x0e
    3e60:	67 2b       	or	r22, r23
    3e62:	91 f0       	breq	.+36     	; 0x3e88 <drawCircleHelper+0x190>
}


void writePixel(int16_t x, int16_t y, uint16_t color){
    // Overwrite in subclasses if startWrite is defined!
    drawPixel(x, y, color);
    3e64:	c5 01       	movw	r24, r10
    3e66:	ef 85       	ldd	r30, Y+15	; 0x0f
    3e68:	f8 89       	ldd	r31, Y+16	; 0x10
    3e6a:	8e 1b       	sub	r24, r30
    3e6c:	9f 0b       	sbc	r25, r31
    3e6e:	b1 01       	movw	r22, r2
    3e70:	a8 01       	movw	r20, r16
    3e72:	0e 94 f6 25 	call	0x4bec	; 0x4bec <drawPixel>
    3e76:	b6 01       	movw	r22, r12
    3e78:	2f 85       	ldd	r18, Y+15	; 0x0f
    3e7a:	38 89       	ldd	r19, Y+16	; 0x10
    3e7c:	62 1b       	sub	r22, r18
    3e7e:	73 0b       	sbc	r23, r19
    3e80:	c2 01       	movw	r24, r4
    3e82:	a8 01       	movw	r20, r16
    3e84:	0e 94 f6 25 	call	0x4bec	; 0x4bec <drawPixel>
    3e88:	08 94       	sec
    3e8a:	21 08       	sbc	r2, r1
    3e8c:	31 08       	sbc	r3, r1
    3e8e:	08 94       	sec
    3e90:	41 08       	sbc	r4, r1
    3e92:	51 08       	sbc	r5, r1
    3e94:	08 94       	sec
    3e96:	61 1c       	adc	r6, r1
    3e98:	71 1c       	adc	r7, r1
    3e9a:	08 94       	sec
    3e9c:	81 1c       	adc	r8, r1
    3e9e:	91 1c       	adc	r9, r1
    int16_t ddF_x = 1;
    int16_t ddF_y = -2 * r;
    int16_t x     = 0;
    int16_t y     = r;

    while (x<y) {
    3ea0:	69 81       	ldd	r22, Y+1	; 0x01
    3ea2:	7a 81       	ldd	r23, Y+2	; 0x02
    3ea4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ea6:	98 89       	ldd	r25, Y+16	; 0x10
    3ea8:	68 17       	cp	r22, r24
    3eaa:	79 07       	cpc	r23, r25
    3eac:	0c f4       	brge	.+2      	; 0x3eb0 <drawCircleHelper+0x1b8>
    3eae:	7c cf       	rjmp	.-264    	; 0x3da8 <drawCircleHelper+0xb0>
        if (cornername & 0x1) {
            writePixel(x0 - y, y0 - x, color);
            writePixel(x0 - x, y0 - y, color);
        }
    }
}
    3eb0:	60 96       	adiw	r28, 0x10	; 16
    3eb2:	0f b6       	in	r0, 0x3f	; 63
    3eb4:	f8 94       	cli
    3eb6:	de bf       	out	0x3e, r29	; 62
    3eb8:	0f be       	out	0x3f, r0	; 63
    3eba:	cd bf       	out	0x3d, r28	; 61
    3ebc:	cf 91       	pop	r28
    3ebe:	df 91       	pop	r29
    3ec0:	1f 91       	pop	r17
    3ec2:	0f 91       	pop	r16
    3ec4:	ff 90       	pop	r15
    3ec6:	ef 90       	pop	r14
    3ec8:	df 90       	pop	r13
    3eca:	cf 90       	pop	r12
    3ecc:	bf 90       	pop	r11
    3ece:	af 90       	pop	r10
    3ed0:	9f 90       	pop	r9
    3ed2:	8f 90       	pop	r8
    3ed4:	7f 90       	pop	r7
    3ed6:	6f 90       	pop	r6
    3ed8:	5f 90       	pop	r5
    3eda:	4f 90       	pop	r4
    3edc:	3f 90       	pop	r3
    3ede:	2f 90       	pop	r2
    3ee0:	08 95       	ret

00003ee2 <drawRoundRect>:
    endWrite();
}

// Draw a rounded rectangle
void drawRoundRect(int16_t x, int16_t y, int16_t w,
        int16_t h, int16_t r, uint16_t color) {
    3ee2:	2f 92       	push	r2
    3ee4:	3f 92       	push	r3
    3ee6:	4f 92       	push	r4
    3ee8:	5f 92       	push	r5
    3eea:	6f 92       	push	r6
    3eec:	7f 92       	push	r7
    3eee:	8f 92       	push	r8
    3ef0:	9f 92       	push	r9
    3ef2:	af 92       	push	r10
    3ef4:	bf 92       	push	r11
    3ef6:	cf 92       	push	r12
    3ef8:	df 92       	push	r13
    3efa:	ef 92       	push	r14
    3efc:	ff 92       	push	r15
    3efe:	0f 93       	push	r16
    3f00:	1f 93       	push	r17
    3f02:	df 93       	push	r29
    3f04:	cf 93       	push	r28
    3f06:	00 d0       	rcall	.+0      	; 0x3f08 <drawRoundRect+0x26>
    3f08:	00 d0       	rcall	.+0      	; 0x3f0a <drawRoundRect+0x28>
    3f0a:	cd b7       	in	r28, 0x3d	; 61
    3f0c:	de b7       	in	r29, 0x3e	; 62
    3f0e:	1c 01       	movw	r2, r24
    3f10:	3b 01       	movw	r6, r22
    3f12:	6a 01       	movw	r12, r20
    3f14:	3a 83       	std	Y+2, r19	; 0x02
    3f16:	29 83       	std	Y+1, r18	; 0x01
    3f18:	48 01       	movw	r8, r16
    // smarter version
    startWrite();
    writeFastHLine(x+r  , y    , w-2*r, color); // Top
    3f1a:	c8 01       	movw	r24, r16
    3f1c:	82 0d       	add	r24, r2
    3f1e:	93 1d       	adc	r25, r3
    3f20:	9c 83       	std	Y+4, r25	; 0x04
    3f22:	8b 83       	std	Y+3, r24	; 0x03
    3f24:	00 0f       	add	r16, r16
    3f26:	11 1f       	adc	r17, r17
    3f28:	10 95       	com	r17
    3f2a:	01 95       	neg	r16
    3f2c:	1f 4f       	sbci	r17, 0xFF	; 255
    3f2e:	28 01       	movw	r4, r16
    3f30:	44 0e       	add	r4, r20
    3f32:	55 1e       	adc	r5, r21
void writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
    3f34:	b3 01       	movw	r22, r6
    3f36:	a2 01       	movw	r20, r4
    3f38:	97 01       	movw	r18, r14
    3f3a:	0e 94 91 27 	call	0x4f22	; 0x4f22 <drawFastHLine>
void drawRoundRect(int16_t x, int16_t y, int16_t w,
        int16_t h, int16_t r, uint16_t color) {
    // smarter version
    startWrite();
    writeFastHLine(x+r  , y    , w-2*r, color); // Top
    writeFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
    3f3e:	a9 80       	ldd	r10, Y+1	; 0x01
    3f40:	ba 80       	ldd	r11, Y+2	; 0x02
    3f42:	a6 0c       	add	r10, r6
    3f44:	b7 1c       	adc	r11, r7
    3f46:	08 94       	sec
    3f48:	a1 08       	sbc	r10, r1
    3f4a:	b1 08       	sbc	r11, r1
void writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
    3f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f4e:	9c 81       	ldd	r25, Y+4	; 0x04
    3f50:	b5 01       	movw	r22, r10
    3f52:	a2 01       	movw	r20, r4
    3f54:	97 01       	movw	r18, r14
    3f56:	0e 94 91 27 	call	0x4f22	; 0x4f22 <drawFastHLine>
        int16_t h, int16_t r, uint16_t color) {
    // smarter version
    startWrite();
    writeFastHLine(x+r  , y    , w-2*r, color); // Top
    writeFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
    writeFastVLine(x    , y+r  , h-2*r, color); // Left
    3f5a:	68 0c       	add	r6, r8
    3f5c:	79 1c       	adc	r7, r9
    3f5e:	e9 81       	ldd	r30, Y+1	; 0x01
    3f60:	fa 81       	ldd	r31, Y+2	; 0x02
    3f62:	0e 0f       	add	r16, r30
    3f64:	1f 1f       	adc	r17, r31
void writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
    3f66:	c1 01       	movw	r24, r2
    3f68:	b3 01       	movw	r22, r6
    3f6a:	a8 01       	movw	r20, r16
    3f6c:	97 01       	movw	r18, r14
    3f6e:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <drawFastVLine>
    // smarter version
    startWrite();
    writeFastHLine(x+r  , y    , w-2*r, color); // Top
    writeFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
    writeFastVLine(x    , y+r  , h-2*r, color); // Left
    writeFastVLine(x+w-1, y+r  , h-2*r, color); // Right
    3f72:	c2 0c       	add	r12, r2
    3f74:	d3 1c       	adc	r13, r3
    3f76:	08 94       	sec
    3f78:	c1 08       	sbc	r12, r1
    3f7a:	d1 08       	sbc	r13, r1
void writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
    3f7c:	c6 01       	movw	r24, r12
    3f7e:	b3 01       	movw	r22, r6
    3f80:	a8 01       	movw	r20, r16
    3f82:	97 01       	movw	r18, r14
    3f84:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <drawFastVLine>
    writeFastHLine(x+r  , y    , w-2*r, color); // Top
    writeFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
    writeFastVLine(x    , y+r  , h-2*r, color); // Left
    writeFastVLine(x+w-1, y+r  , h-2*r, color); // Right
    // draw four corners
    drawCircleHelper(x+r    , y+r    , r, 1, color);
    3f88:	8b 81       	ldd	r24, Y+3	; 0x03
    3f8a:	9c 81       	ldd	r25, Y+4	; 0x04
    3f8c:	b3 01       	movw	r22, r6
    3f8e:	a4 01       	movw	r20, r8
    3f90:	21 e0       	ldi	r18, 0x01	; 1
    3f92:	87 01       	movw	r16, r14
    3f94:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
    3f98:	c8 18       	sub	r12, r8
    3f9a:	d9 08       	sbc	r13, r9
    3f9c:	c6 01       	movw	r24, r12
    3f9e:	b3 01       	movw	r22, r6
    3fa0:	a4 01       	movw	r20, r8
    3fa2:	22 e0       	ldi	r18, 0x02	; 2
    3fa4:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
    3fa8:	a8 18       	sub	r10, r8
    3faa:	b9 08       	sbc	r11, r9
    3fac:	c6 01       	movw	r24, r12
    3fae:	b5 01       	movw	r22, r10
    3fb0:	a4 01       	movw	r20, r8
    3fb2:	24 e0       	ldi	r18, 0x04	; 4
    3fb4:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <drawCircleHelper>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
    3fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    3fba:	9c 81       	ldd	r25, Y+4	; 0x04
    3fbc:	b5 01       	movw	r22, r10
    3fbe:	a4 01       	movw	r20, r8
    3fc0:	28 e0       	ldi	r18, 0x08	; 8
    3fc2:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <drawCircleHelper>
    endWrite();
}
    3fc6:	0f 90       	pop	r0
    3fc8:	0f 90       	pop	r0
    3fca:	0f 90       	pop	r0
    3fcc:	0f 90       	pop	r0
    3fce:	cf 91       	pop	r28
    3fd0:	df 91       	pop	r29
    3fd2:	1f 91       	pop	r17
    3fd4:	0f 91       	pop	r16
    3fd6:	ff 90       	pop	r15
    3fd8:	ef 90       	pop	r14
    3fda:	df 90       	pop	r13
    3fdc:	cf 90       	pop	r12
    3fde:	bf 90       	pop	r11
    3fe0:	af 90       	pop	r10
    3fe2:	9f 90       	pop	r9
    3fe4:	8f 90       	pop	r8
    3fe6:	7f 90       	pop	r7
    3fe8:	6f 90       	pop	r6
    3fea:	5f 90       	pop	r5
    3fec:	4f 90       	pop	r4
    3fee:	3f 90       	pop	r3
    3ff0:	2f 90       	pop	r2
    3ff2:	08 95       	ret

00003ff4 <drawCircle>:
}

/*   */
// Draw a circle outline
void drawCircle(int16_t x0, int16_t y0, int16_t r,
        uint16_t color) {
    3ff4:	2f 92       	push	r2
    3ff6:	3f 92       	push	r3
    3ff8:	4f 92       	push	r4
    3ffa:	5f 92       	push	r5
    3ffc:	6f 92       	push	r6
    3ffe:	7f 92       	push	r7
    4000:	8f 92       	push	r8
    4002:	9f 92       	push	r9
    4004:	af 92       	push	r10
    4006:	bf 92       	push	r11
    4008:	cf 92       	push	r12
    400a:	df 92       	push	r13
    400c:	ef 92       	push	r14
    400e:	ff 92       	push	r15
    4010:	0f 93       	push	r16
    4012:	1f 93       	push	r17
    4014:	df 93       	push	r29
    4016:	cf 93       	push	r28
    4018:	00 d0       	rcall	.+0      	; 0x401a <drawCircle+0x26>
    401a:	00 d0       	rcall	.+0      	; 0x401c <drawCircle+0x28>
    401c:	00 d0       	rcall	.+0      	; 0x401e <drawCircle+0x2a>
    401e:	cd b7       	in	r28, 0x3d	; 61
    4020:	de b7       	in	r29, 0x3e	; 62
    4022:	2c 01       	movw	r4, r24
    4024:	3b 01       	movw	r6, r22
    4026:	8a 01       	movw	r16, r20
    4028:	3e 83       	std	Y+6, r19	; 0x06
    402a:	2d 83       	std	Y+5, r18	; 0x05
    int16_t f = 1 - r;
    402c:	f1 e0       	ldi	r31, 0x01	; 1
    402e:	2f 2e       	mov	r2, r31
    4030:	31 2c       	mov	r3, r1
    4032:	24 1a       	sub	r2, r20
    4034:	35 0a       	sbc	r3, r21
    int16_t ddF_x = 1;
    int16_t ddF_y = -2 * r;
    4036:	ca 01       	movw	r24, r20
    4038:	88 0f       	add	r24, r24
    403a:	99 1f       	adc	r25, r25
    403c:	22 27       	eor	r18, r18
    403e:	33 27       	eor	r19, r19
    4040:	28 1b       	sub	r18, r24
    4042:	39 0b       	sbc	r19, r25
    4044:	3a 83       	std	Y+2, r19	; 0x02
    4046:	29 83       	std	Y+1, r18	; 0x01
}


void writePixel(int16_t x, int16_t y, uint16_t color){
    // Overwrite in subclasses if startWrite is defined!
    drawPixel(x, y, color);
    4048:	ba 01       	movw	r22, r20
    404a:	66 0d       	add	r22, r6
    404c:	77 1d       	adc	r23, r7
    404e:	c2 01       	movw	r24, r4
    4050:	4d 81       	ldd	r20, Y+5	; 0x05
    4052:	5e 81       	ldd	r21, Y+6	; 0x06
    4054:	0e 94 f6 25 	call	0x4bec	; 0x4bec <drawPixel>
    4058:	b3 01       	movw	r22, r6
    405a:	60 1b       	sub	r22, r16
    405c:	71 0b       	sbc	r23, r17
    405e:	c2 01       	movw	r24, r4
    4060:	4d 81       	ldd	r20, Y+5	; 0x05
    4062:	5e 81       	ldd	r21, Y+6	; 0x06
    4064:	0e 94 f6 25 	call	0x4bec	; 0x4bec <drawPixel>
    4068:	c8 01       	movw	r24, r16
    406a:	84 0d       	add	r24, r4
    406c:	95 1d       	adc	r25, r5
    406e:	b3 01       	movw	r22, r6
    4070:	4d 81       	ldd	r20, Y+5	; 0x05
    4072:	5e 81       	ldd	r21, Y+6	; 0x06
    4074:	0e 94 f6 25 	call	0x4bec	; 0x4bec <drawPixel>
    4078:	c2 01       	movw	r24, r4
    407a:	80 1b       	sub	r24, r16
    407c:	91 0b       	sbc	r25, r17
    407e:	b3 01       	movw	r22, r6
    4080:	4d 81       	ldd	r20, Y+5	; 0x05
    4082:	5e 81       	ldd	r21, Y+6	; 0x06
    4084:	0e 94 f6 25 	call	0x4bec	; 0x4bec <drawPixel>
    4088:	48 01       	movw	r8, r16
    408a:	81 e0       	ldi	r24, 0x01	; 1
    408c:	90 e0       	ldi	r25, 0x00	; 0
    408e:	9c 83       	std	Y+4, r25	; 0x04
    4090:	8b 83       	std	Y+3, r24	; 0x03
    4092:	aa 24       	eor	r10, r10
    4094:	bb 24       	eor	r11, r11
    4096:	5f c0       	rjmp	.+190    	; 0x4156 <drawCircle+0x162>
    writePixel(x0  , y0-r, color);
    writePixel(x0+r, y0  , color);
    writePixel(x0-r, y0  , color);

    while (x<y) {
        if (f >= 0) {
    4098:	37 fc       	sbrc	r3, 7
    409a:	0a c0       	rjmp	.+20     	; 0x40b0 <drawCircle+0xbc>
            y--;
    409c:	08 94       	sec
    409e:	81 08       	sbc	r8, r1
    40a0:	91 08       	sbc	r9, r1
            ddF_y += 2;
    40a2:	e9 81       	ldd	r30, Y+1	; 0x01
    40a4:	fa 81       	ldd	r31, Y+2	; 0x02
    40a6:	32 96       	adiw	r30, 0x02	; 2
    40a8:	fa 83       	std	Y+2, r31	; 0x02
    40aa:	e9 83       	std	Y+1, r30	; 0x01
            f += ddF_y;
    40ac:	2e 0e       	add	r2, r30
    40ae:	3f 1e       	adc	r3, r31
        }
        x++;
    40b0:	08 94       	sec
    40b2:	a1 1c       	adc	r10, r1
    40b4:	b1 1c       	adc	r11, r1
        ddF_x += 2;
    40b6:	2b 81       	ldd	r18, Y+3	; 0x03
    40b8:	3c 81       	ldd	r19, Y+4	; 0x04
    40ba:	2e 5f       	subi	r18, 0xFE	; 254
    40bc:	3f 4f       	sbci	r19, 0xFF	; 255
    40be:	3c 83       	std	Y+4, r19	; 0x04
    40c0:	2b 83       	std	Y+3, r18	; 0x03
        f += ddF_x;
    40c2:	22 0e       	add	r2, r18
    40c4:	33 1e       	adc	r3, r19
}

/*   */
// Draw a circle outline
void drawCircle(int16_t x0, int16_t y0, int16_t r,
        uint16_t color) {
    40c6:	65 01       	movw	r12, r10
    40c8:	c4 0c       	add	r12, r4
    40ca:	d5 1c       	adc	r13, r5
        }
        x++;
        ddF_x += 2;
        f += ddF_x;

        writePixel(x0 + x, y0 + y, color);
    40cc:	84 01       	movw	r16, r8
    40ce:	06 0d       	add	r16, r6
    40d0:	17 1d       	adc	r17, r7
}


void writePixel(int16_t x, int16_t y, uint16_t color){
    // Overwrite in subclasses if startWrite is defined!
    drawPixel(x, y, color);
    40d2:	c6 01       	movw	r24, r12
    40d4:	b8 01       	movw	r22, r16
    40d6:	4d 81       	ldd	r20, Y+5	; 0x05
    40d8:	5e 81       	ldd	r21, Y+6	; 0x06
    40da:	0e 94 f6 25 	call	0x4bec	; 0x4bec <drawPixel>
    40de:	72 01       	movw	r14, r4
    40e0:	ea 18       	sub	r14, r10
    40e2:	fb 08       	sbc	r15, r11
    40e4:	c7 01       	movw	r24, r14
    40e6:	b8 01       	movw	r22, r16
    40e8:	4d 81       	ldd	r20, Y+5	; 0x05
    40ea:	5e 81       	ldd	r21, Y+6	; 0x06
    40ec:	0e 94 f6 25 	call	0x4bec	; 0x4bec <drawPixel>
        ddF_x += 2;
        f += ddF_x;

        writePixel(x0 + x, y0 + y, color);
        writePixel(x0 - x, y0 + y, color);
        writePixel(x0 + x, y0 - y, color);
    40f0:	83 01       	movw	r16, r6
    40f2:	08 19       	sub	r16, r8
    40f4:	19 09       	sbc	r17, r9
}


void writePixel(int16_t x, int16_t y, uint16_t color){
    // Overwrite in subclasses if startWrite is defined!
    drawPixel(x, y, color);
    40f6:	c6 01       	movw	r24, r12
    40f8:	b8 01       	movw	r22, r16
    40fa:	4d 81       	ldd	r20, Y+5	; 0x05
    40fc:	5e 81       	ldd	r21, Y+6	; 0x06
    40fe:	0e 94 f6 25 	call	0x4bec	; 0x4bec <drawPixel>
    4102:	c7 01       	movw	r24, r14
    4104:	b8 01       	movw	r22, r16
    4106:	4d 81       	ldd	r20, Y+5	; 0x05
    4108:	5e 81       	ldd	r21, Y+6	; 0x06
    410a:	0e 94 f6 25 	call	0x4bec	; 0x4bec <drawPixel>

        writePixel(x0 + x, y0 + y, color);
        writePixel(x0 - x, y0 + y, color);
        writePixel(x0 + x, y0 - y, color);
        writePixel(x0 - x, y0 - y, color);
        writePixel(x0 + y, y0 + x, color);
    410e:	64 01       	movw	r12, r8
    4110:	c4 0c       	add	r12, r4
    4112:	d5 1c       	adc	r13, r5
}

/*   */
// Draw a circle outline
void drawCircle(int16_t x0, int16_t y0, int16_t r,
        uint16_t color) {
    4114:	85 01       	movw	r16, r10
    4116:	06 0d       	add	r16, r6
    4118:	17 1d       	adc	r17, r7
}


void writePixel(int16_t x, int16_t y, uint16_t color){
    // Overwrite in subclasses if startWrite is defined!
    drawPixel(x, y, color);
    411a:	c6 01       	movw	r24, r12
    411c:	b8 01       	movw	r22, r16
    411e:	4d 81       	ldd	r20, Y+5	; 0x05
    4120:	5e 81       	ldd	r21, Y+6	; 0x06
    4122:	0e 94 f6 25 	call	0x4bec	; 0x4bec <drawPixel>
        writePixel(x0 + x, y0 + y, color);
        writePixel(x0 - x, y0 + y, color);
        writePixel(x0 + x, y0 - y, color);
        writePixel(x0 - x, y0 - y, color);
        writePixel(x0 + y, y0 + x, color);
        writePixel(x0 - y, y0 + x, color);
    4126:	72 01       	movw	r14, r4
    4128:	e8 18       	sub	r14, r8
    412a:	f9 08       	sbc	r15, r9
}


void writePixel(int16_t x, int16_t y, uint16_t color){
    // Overwrite in subclasses if startWrite is defined!
    drawPixel(x, y, color);
    412c:	c7 01       	movw	r24, r14
    412e:	b8 01       	movw	r22, r16
    4130:	4d 81       	ldd	r20, Y+5	; 0x05
    4132:	5e 81       	ldd	r21, Y+6	; 0x06
    4134:	0e 94 f6 25 	call	0x4bec	; 0x4bec <drawPixel>
    4138:	83 01       	movw	r16, r6
    413a:	0a 19       	sub	r16, r10
    413c:	1b 09       	sbc	r17, r11
    413e:	c6 01       	movw	r24, r12
    4140:	b8 01       	movw	r22, r16
    4142:	4d 81       	ldd	r20, Y+5	; 0x05
    4144:	5e 81       	ldd	r21, Y+6	; 0x06
    4146:	0e 94 f6 25 	call	0x4bec	; 0x4bec <drawPixel>
    414a:	c7 01       	movw	r24, r14
    414c:	b8 01       	movw	r22, r16
    414e:	4d 81       	ldd	r20, Y+5	; 0x05
    4150:	5e 81       	ldd	r21, Y+6	; 0x06
    4152:	0e 94 f6 25 	call	0x4bec	; 0x4bec <drawPixel>
    writePixel(x0  , y0+r, color);
    writePixel(x0  , y0-r, color);
    writePixel(x0+r, y0  , color);
    writePixel(x0-r, y0  , color);

    while (x<y) {
    4156:	a8 14       	cp	r10, r8
    4158:	b9 04       	cpc	r11, r9
    415a:	0c f4       	brge	.+2      	; 0x415e <drawCircle+0x16a>
    415c:	9d cf       	rjmp	.-198    	; 0x4098 <drawCircle+0xa4>
        writePixel(x0 - y, y0 + x, color);
        writePixel(x0 + y, y0 - x, color);
        writePixel(x0 - y, y0 - x, color);
    }
    endWrite();
}
    415e:	26 96       	adiw	r28, 0x06	; 6
    4160:	0f b6       	in	r0, 0x3f	; 63
    4162:	f8 94       	cli
    4164:	de bf       	out	0x3e, r29	; 62
    4166:	0f be       	out	0x3f, r0	; 63
    4168:	cd bf       	out	0x3d, r28	; 61
    416a:	cf 91       	pop	r28
    416c:	df 91       	pop	r29
    416e:	1f 91       	pop	r17
    4170:	0f 91       	pop	r16
    4172:	ff 90       	pop	r15
    4174:	ef 90       	pop	r14
    4176:	df 90       	pop	r13
    4178:	cf 90       	pop	r12
    417a:	bf 90       	pop	r11
    417c:	af 90       	pop	r10
    417e:	9f 90       	pop	r9
    4180:	8f 90       	pop	r8
    4182:	7f 90       	pop	r7
    4184:	6f 90       	pop	r6
    4186:	5f 90       	pop	r5
    4188:	4f 90       	pop	r4
    418a:	3f 90       	pop	r3
    418c:	2f 90       	pop	r2
    418e:	08 95       	ret

00004190 <writeLine>:
}


// Bresenham's algorithm - thx wikpedia
void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
    4190:	2f 92       	push	r2
    4192:	3f 92       	push	r3
    4194:	4f 92       	push	r4
    4196:	5f 92       	push	r5
    4198:	6f 92       	push	r6
    419a:	7f 92       	push	r7
    419c:	8f 92       	push	r8
    419e:	9f 92       	push	r9
    41a0:	af 92       	push	r10
    41a2:	bf 92       	push	r11
    41a4:	cf 92       	push	r12
    41a6:	df 92       	push	r13
    41a8:	ef 92       	push	r14
    41aa:	ff 92       	push	r15
    41ac:	0f 93       	push	r16
    41ae:	1f 93       	push	r17
    41b0:	cf 93       	push	r28
    41b2:	df 93       	push	r29
    41b4:	7c 01       	movw	r14, r24
    41b6:	6b 01       	movw	r12, r22
    41b8:	5a 01       	movw	r10, r20
    41ba:	a9 01       	movw	r20, r18
    41bc:	18 01       	movw	r2, r16
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    41be:	44 24       	eor	r4, r4
    41c0:	55 24       	eor	r5, r5
    41c2:	26 1b       	sub	r18, r22
    41c4:	37 0b       	sbc	r19, r23
    41c6:	37 ff       	sbrs	r19, 7
    41c8:	03 c0       	rjmp	.+6      	; 0x41d0 <writeLine+0x40>
    41ca:	30 95       	com	r19
    41cc:	21 95       	neg	r18
    41ce:	3f 4f       	sbci	r19, 0xFF	; 255
    41d0:	c5 01       	movw	r24, r10
    41d2:	8e 19       	sub	r24, r14
    41d4:	9f 09       	sbc	r25, r15
    41d6:	97 ff       	sbrs	r25, 7
    41d8:	03 c0       	rjmp	.+6      	; 0x41e0 <writeLine+0x50>
    41da:	90 95       	com	r25
    41dc:	81 95       	neg	r24
    41de:	9f 4f       	sbci	r25, 0xFF	; 255
    41e0:	82 17       	cp	r24, r18
    41e2:	93 07       	cpc	r25, r19
    41e4:	4c f4       	brge	.+18     	; 0x41f8 <writeLine+0x68>
    41e6:	b1 e0       	ldi	r27, 0x01	; 1
    41e8:	4b 2e       	mov	r4, r27
    41ea:	51 2c       	mov	r5, r1
    if (steep) {
    41ec:	c6 01       	movw	r24, r12
    41ee:	67 01       	movw	r12, r14
    41f0:	7c 01       	movw	r14, r24
    41f2:	ca 01       	movw	r24, r20
    41f4:	a5 01       	movw	r20, r10
    41f6:	5c 01       	movw	r10, r24
        _swap_int16_t(x0, y0);
        _swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
    41f8:	ae 14       	cp	r10, r14
    41fa:	bf 04       	cpc	r11, r15
    41fc:	34 f4       	brge	.+12     	; 0x420a <writeLine+0x7a>
    41fe:	c5 01       	movw	r24, r10
    4200:	57 01       	movw	r10, r14
    4202:	7c 01       	movw	r14, r24
    4204:	ca 01       	movw	r24, r20
    4206:	a6 01       	movw	r20, r12
    4208:	6c 01       	movw	r12, r24
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
    420a:	35 01       	movw	r6, r10
    420c:	6e 18       	sub	r6, r14
    420e:	7f 08       	sbc	r7, r15
    dy = abs(y1 - y0);
    4210:	8a 01       	movw	r16, r20
    4212:	0c 19       	sub	r16, r12
    4214:	1d 09       	sbc	r17, r13
    4216:	17 ff       	sbrs	r17, 7
    4218:	03 c0       	rjmp	.+6      	; 0x4220 <writeLine+0x90>
    421a:	10 95       	com	r17
    421c:	01 95       	neg	r16
    421e:	1f 4f       	sbci	r17, 0xFF	; 255

    int16_t err = dx / 2;
    int16_t ystep;

    if (y0 < y1) {
    4220:	c4 16       	cp	r12, r20
    4222:	d5 06       	cpc	r13, r21
    4224:	24 f0       	brlt	.+8      	; 0x422e <writeLine+0x9e>
    4226:	88 24       	eor	r8, r8
    4228:	8a 94       	dec	r8
    422a:	98 2c       	mov	r9, r8
    422c:	03 c0       	rjmp	.+6      	; 0x4234 <writeLine+0xa4>
    422e:	a1 e0       	ldi	r26, 0x01	; 1
    4230:	8a 2e       	mov	r8, r26
    4232:	91 2c       	mov	r9, r1

    int16_t dx, dy;
    dx = x1 - x0;
    dy = abs(y1 - y0);

    int16_t err = dx / 2;
    4234:	c3 01       	movw	r24, r6
    4236:	62 e0       	ldi	r22, 0x02	; 2
    4238:	70 e0       	ldi	r23, 0x00	; 0
    423a:	0e 94 42 29 	call	0x5284	; 0x5284 <__divmodhi4>
    423e:	eb 01       	movw	r28, r22
    4240:	16 c0       	rjmp	.+44     	; 0x426e <writeLine+0xde>
    } else {
        ystep = -1;
    }

    for (; x0<=x1; x0++) {
        if (steep) {
    4242:	41 14       	cp	r4, r1
    4244:	51 04       	cpc	r5, r1
    4246:	19 f0       	breq	.+6      	; 0x424e <writeLine+0xbe>
}


void writePixel(int16_t x, int16_t y, uint16_t color){
    // Overwrite in subclasses if startWrite is defined!
    drawPixel(x, y, color);
    4248:	c6 01       	movw	r24, r12
    424a:	b7 01       	movw	r22, r14
    424c:	02 c0       	rjmp	.+4      	; 0x4252 <writeLine+0xc2>
    424e:	c7 01       	movw	r24, r14
    4250:	b6 01       	movw	r22, r12
    4252:	a1 01       	movw	r20, r2
    4254:	0e 94 f6 25 	call	0x4bec	; 0x4bec <drawPixel>
        if (steep) {
            writePixel(y0, x0, color);
        } else {
            writePixel(x0, y0, color);
        }
        err -= dy;
    4258:	c0 1b       	sub	r28, r16
    425a:	d1 0b       	sbc	r29, r17
        if (err < 0) {
    425c:	d7 ff       	sbrs	r29, 7
    425e:	04 c0       	rjmp	.+8      	; 0x4268 <writeLine+0xd8>
            y0 += ystep;
    4260:	c8 0c       	add	r12, r8
    4262:	d9 1c       	adc	r13, r9
            err += dx;
    4264:	c6 0d       	add	r28, r6
    4266:	d7 1d       	adc	r29, r7
        ystep = 1;
    } else {
        ystep = -1;
    }

    for (; x0<=x1; x0++) {
    4268:	08 94       	sec
    426a:	e1 1c       	adc	r14, r1
    426c:	f1 1c       	adc	r15, r1
    426e:	ae 14       	cp	r10, r14
    4270:	bf 04       	cpc	r11, r15
    4272:	3c f7       	brge	.-50     	; 0x4242 <writeLine+0xb2>
        if (err < 0) {
            y0 += ystep;
            err += dx;
        }
    }
}
    4274:	df 91       	pop	r29
    4276:	cf 91       	pop	r28
    4278:	1f 91       	pop	r17
    427a:	0f 91       	pop	r16
    427c:	ff 90       	pop	r15
    427e:	ef 90       	pop	r14
    4280:	df 90       	pop	r13
    4282:	cf 90       	pop	r12
    4284:	bf 90       	pop	r11
    4286:	af 90       	pop	r10
    4288:	9f 90       	pop	r9
    428a:	8f 90       	pop	r8
    428c:	7f 90       	pop	r7
    428e:	6f 90       	pop	r6
    4290:	5f 90       	pop	r5
    4292:	4f 90       	pop	r4
    4294:	3f 90       	pop	r3
    4296:	2f 90       	pop	r2
    4298:	08 95       	ret

0000429a <drawLine>:




void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
    429a:	0f 93       	push	r16
    429c:	1f 93       	push	r17
    429e:	dc 01       	movw	r26, r24
    42a0:	f9 01       	movw	r30, r18
    // Update in subclasses if desired!
    if(x0 == x1){
    42a2:	84 17       	cp	r24, r20
    42a4:	95 07       	cpc	r25, r21
    42a6:	71 f4       	brne	.+28     	; 0x42c4 <drawLine+0x2a>
        if(y0 > y1) _swap_int16_t(y0, y1);
    42a8:	26 17       	cp	r18, r22
    42aa:	37 07       	cpc	r19, r23
    42ac:	14 f4       	brge	.+4      	; 0x42b2 <drawLine+0x18>
    42ae:	fb 01       	movw	r30, r22
    42b0:	b9 01       	movw	r22, r18
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
    42b2:	31 96       	adiw	r30, 0x01	; 1
    42b4:	e6 1b       	sub	r30, r22
    42b6:	f7 0b       	sbc	r31, r23
    42b8:	cd 01       	movw	r24, r26
    42ba:	af 01       	movw	r20, r30
    42bc:	98 01       	movw	r18, r16
    42be:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <drawFastVLine>
    42c2:	14 c0       	rjmp	.+40     	; 0x42ec <drawLine+0x52>
    } else if(y0 == y1){
    42c4:	62 17       	cp	r22, r18
    42c6:	73 07       	cpc	r23, r19
    42c8:	79 f4       	brne	.+30     	; 0x42e8 <drawLine+0x4e>
        if(x0 > x1) _swap_int16_t(x0, x1);
    42ca:	48 17       	cp	r20, r24
    42cc:	59 07       	cpc	r21, r25
    42ce:	1c f4       	brge	.+6      	; 0x42d6 <drawLine+0x3c>
    42d0:	ca 01       	movw	r24, r20
    42d2:	ad 01       	movw	r20, r26
    42d4:	dc 01       	movw	r26, r24
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    42d6:	4f 5f       	subi	r20, 0xFF	; 255
    42d8:	5f 4f       	sbci	r21, 0xFF	; 255
    42da:	4a 1b       	sub	r20, r26
    42dc:	5b 0b       	sbc	r21, r27
    42de:	cd 01       	movw	r24, r26
    42e0:	98 01       	movw	r18, r16
    42e2:	0e 94 91 27 	call	0x4f22	; 0x4f22 <drawFastHLine>
    42e6:	02 c0       	rjmp	.+4      	; 0x42ec <drawLine+0x52>
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
    42e8:	0e 94 c8 20 	call	0x4190	; 0x4190 <writeLine>
        endWrite();
    }
}
    42ec:	1f 91       	pop	r17
    42ee:	0f 91       	pop	r16
    42f0:	08 95       	ret

000042f2 <drawTriangle>:
    endWrite();
}

// Draw a triangle
void drawTriangle(int16_t x0, int16_t y0,
        int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
    42f2:	2f 92       	push	r2
    42f4:	3f 92       	push	r3
    42f6:	4f 92       	push	r4
    42f8:	5f 92       	push	r5
    42fa:	6f 92       	push	r6
    42fc:	7f 92       	push	r7
    42fe:	8f 92       	push	r8
    4300:	9f 92       	push	r9
    4302:	af 92       	push	r10
    4304:	bf 92       	push	r11
    4306:	cf 92       	push	r12
    4308:	df 92       	push	r13
    430a:	ef 92       	push	r14
    430c:	ff 92       	push	r15
    430e:	0f 93       	push	r16
    4310:	1f 93       	push	r17
    4312:	2c 01       	movw	r4, r24
    4314:	1b 01       	movw	r2, r22
    4316:	5a 01       	movw	r10, r20
    4318:	49 01       	movw	r8, r18
    431a:	38 01       	movw	r6, r16
    drawLine(x0, y0, x1, y1, color);
    431c:	86 01       	movw	r16, r12
    431e:	0e 94 4d 21 	call	0x429a	; 0x429a <drawLine>
    drawLine(x1, y1, x2, y2, color);
    4322:	c5 01       	movw	r24, r10
    4324:	b4 01       	movw	r22, r8
    4326:	a3 01       	movw	r20, r6
    4328:	97 01       	movw	r18, r14
    432a:	0e 94 4d 21 	call	0x429a	; 0x429a <drawLine>
    drawLine(x2, y2, x0, y0, color);
    432e:	c3 01       	movw	r24, r6
    4330:	b7 01       	movw	r22, r14
    4332:	a2 01       	movw	r20, r4
    4334:	91 01       	movw	r18, r2
    4336:	0e 94 4d 21 	call	0x429a	; 0x429a <drawLine>
}
    433a:	1f 91       	pop	r17
    433c:	0f 91       	pop	r16
    433e:	ff 90       	pop	r15
    4340:	ef 90       	pop	r14
    4342:	df 90       	pop	r13
    4344:	cf 90       	pop	r12
    4346:	bf 90       	pop	r11
    4348:	af 90       	pop	r10
    434a:	9f 90       	pop	r9
    434c:	8f 90       	pop	r8
    434e:	7f 90       	pop	r7
    4350:	6f 90       	pop	r6
    4352:	5f 90       	pop	r5
    4354:	4f 90       	pop	r4
    4356:	3f 90       	pop	r3
    4358:	2f 90       	pop	r2
    435a:	08 95       	ret

0000435c <delay>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    435c:	20 e9       	ldi	r18, 0x90	; 144
    435e:	31 e0       	ldi	r19, 0x01	; 1
    4360:	04 c0       	rjmp	.+8      	; 0x436a <delay+0xe>
    4362:	f9 01       	movw	r30, r18
    4364:	31 97       	sbiw	r30, 0x01	; 1
    4366:	f1 f7       	brne	.-4      	; 0x4364 <delay+0x8>
    4368:	01 97       	sbiw	r24, 0x01	; 1
//*****************************************************
//*****************************************************


void delay(uint16_t d) {
  while(d--) _delay_ms(1);
    436a:	00 97       	sbiw	r24, 0x00	; 0
    436c:	d1 f7       	brne	.-12     	; 0x4362 <delay+0x6>
}
    436e:	08 95       	ret

00004370 <tft_init>:
//*****************************************************

void tft_init(void)
{
	CTRL_DIR |=  RD_MASK | WR_MASK | CD_MASK | CS_MASK | RST_MASK;
    4370:	84 b3       	in	r24, 0x14	; 20
    4372:	8c 67       	ori	r24, 0x7C	; 124
    4374:	84 bb       	out	0x14, r24	; 20
	CTRL_PORT |= RD_MASK | WR_MASK | CD_MASK | CS_MASK | RST_MASK;
    4376:	85 b3       	in	r24, 0x15	; 21
    4378:	8c 67       	ori	r24, 0x7C	; 124
    437a:	85 bb       	out	0x15, r24	; 21
	DATA_DIR      |=    0xFF;  // as output
    437c:	8a b3       	in	r24, 0x1a	; 26
    437e:	8f ef       	ldi	r24, 0xFF	; 255
    4380:	8a bb       	out	0x1a, r24	; 26
	DATA_PORT    =   0xFF;   // all pins high / pullups on
    4382:	8b bb       	out	0x1b, r24	; 27
    setWriteDir(); // Set up LCD data port(s) for WRITE operations
    4384:	8a bb       	out	0x1a, r24	; 26
    rotation  = 0;
    4386:	10 92 47 01 	sts	0x0147, r1
    cursor_y  = cursor_x = 0;
    438a:	10 92 4c 01 	sts	0x014C, r1
    438e:	10 92 4b 01 	sts	0x014B, r1
    4392:	10 92 46 01 	sts	0x0146, r1
    4396:	10 92 45 01 	sts	0x0145, r1
    textsize  = 1;
    439a:	81 e0       	ldi	r24, 0x01	; 1
    439c:	80 93 4e 01 	sts	0x014E, r24
    textcolor = 0xFFFF;
    43a0:	8f ef       	ldi	r24, 0xFF	; 255
    43a2:	9f ef       	ldi	r25, 0xFF	; 255
    43a4:	90 93 54 01 	sts	0x0154, r25
    43a8:	80 93 53 01 	sts	0x0153, r24
    _width    = TFTWIDTH;
    43ac:	80 ef       	ldi	r24, 0xF0	; 240
    43ae:	90 e0       	ldi	r25, 0x00	; 0
    43b0:	90 93 4a 01 	sts	0x014A, r25
    43b4:	80 93 49 01 	sts	0x0149, r24
    _height   = TFTHEIGHT;
    43b8:	80 e4       	ldi	r24, 0x40	; 64
    43ba:	91 e0       	ldi	r25, 0x01	; 1
    43bc:	90 93 50 01 	sts	0x0150, r25
    43c0:	80 93 4f 01 	sts	0x014F, r24

}
    43c4:	08 95       	ret

000043c6 <writeRegister8>:
//*****************************************************

// Set value of TFT register: 8-bit address, 8-bit value
void writeRegister8(uint8_t a, uint8_t d) {
  CD_COMMAND; write8(a); CD_DATA; write8(d);
    43c6:	ab 98       	cbi	0x15, 3	; 21
    43c8:	8b bb       	out	0x1b, r24	; 27
    43ca:	ac 98       	cbi	0x15, 4	; 21
    43cc:	ac 9a       	sbi	0x15, 4	; 21
    43ce:	ab 9a       	sbi	0x15, 3	; 21
    43d0:	6b bb       	out	0x1b, r22	; 27
    43d2:	ac 98       	cbi	0x15, 4	; 21
    43d4:	ac 9a       	sbi	0x15, 4	; 21
}
    43d6:	08 95       	ret

000043d8 <writeRegister16>:
//*****************************************************
// Set value of TFT register: 16-bit address, 16-bit value
// See notes at top about macro expansion, hence hi & lo temp vars
void writeRegister16(uint16_t a, uint16_t d) {
  uint8_t hi, lo;
  hi = (a) >> 8; lo = (a); CD_COMMAND; write8(hi); write8(lo);
    43d8:	ab 98       	cbi	0x15, 3	; 21
    43da:	9b bb       	out	0x1b, r25	; 27
    43dc:	ac 98       	cbi	0x15, 4	; 21
    43de:	ac 9a       	sbi	0x15, 4	; 21
    43e0:	8b bb       	out	0x1b, r24	; 27
    43e2:	ac 98       	cbi	0x15, 4	; 21
    43e4:	ac 9a       	sbi	0x15, 4	; 21
  hi = (d) >> 8; lo = (d); CD_DATA   ; write8(hi); write8(lo);
    43e6:	ab 9a       	sbi	0x15, 3	; 21
    43e8:	7b bb       	out	0x1b, r23	; 27
    43ea:	ac 98       	cbi	0x15, 4	; 21
    43ec:	ac 9a       	sbi	0x15, 4	; 21
    43ee:	6b bb       	out	0x1b, r22	; 27
    43f0:	ac 98       	cbi	0x15, 4	; 21
    43f2:	ac 9a       	sbi	0x15, 4	; 21
}
    43f4:	08 95       	ret

000043f6 <writeRegisterPair>:
//*****************************************************
// Set value of 2 TFT registers: Two 8-bit addresses (hi & lo), 16-bit value
static void writeRegisterPair(uint8_t aH, uint8_t aL, uint16_t d) {
  uint8_t hi = (d) >> 8, lo = (d);
  CD_COMMAND; write8(aH); CD_DATA; write8(hi);
    43f6:	ab 98       	cbi	0x15, 3	; 21
    43f8:	8b bb       	out	0x1b, r24	; 27
    43fa:	ac 98       	cbi	0x15, 4	; 21
    43fc:	ac 9a       	sbi	0x15, 4	; 21
    43fe:	ab 9a       	sbi	0x15, 3	; 21
    4400:	5b bb       	out	0x1b, r21	; 27
    4402:	ac 98       	cbi	0x15, 4	; 21
    4404:	ac 9a       	sbi	0x15, 4	; 21
  CD_COMMAND; write8(aL); CD_DATA; write8(lo);
    4406:	ab 98       	cbi	0x15, 3	; 21
    4408:	6b bb       	out	0x1b, r22	; 27
    440a:	ac 98       	cbi	0x15, 4	; 21
    440c:	ac 9a       	sbi	0x15, 4	; 21
    440e:	ab 9a       	sbi	0x15, 3	; 21
    4410:	4b bb       	out	0x1b, r20	; 27
    4412:	ac 98       	cbi	0x15, 4	; 21
    4414:	ac 9a       	sbi	0x15, 4	; 21
}
    4416:	08 95       	ret

00004418 <reset>:
//*****************************************************

void reset(void) {
  CS_IDLE;
    4418:	aa 9a       	sbi	0x15, 2	; 21
  WR_IDLE;
    441a:	ac 9a       	sbi	0x15, 4	; 21
  RD_IDLE;
    441c:	ad 9a       	sbi	0x15, 5	; 21

  CTRL_PORT &= ~ RST_MASK;
    441e:	ae 98       	cbi	0x15, 6	; 21
    4420:	80 e9       	ldi	r24, 0x90	; 144
    4422:	91 e0       	ldi	r25, 0x01	; 1
    4424:	fc 01       	movw	r30, r24
    4426:	31 97       	sbiw	r30, 0x01	; 1
    4428:	f1 f7       	brne	.-4      	; 0x4426 <reset+0xe>
    442a:	01 97       	sbiw	r24, 0x01	; 1
    442c:	f1 f7       	brne	.-4      	; 0x442a <reset+0x12>
  delay(2);
  CTRL_PORT |= RST_MASK;
    442e:	ae 9a       	sbi	0x15, 6	; 21

  // Data transfer sync
  CS_ACTIVE;
    4430:	aa 98       	cbi	0x15, 2	; 21
  CD_COMMAND;
    4432:	ab 98       	cbi	0x15, 3	; 21
  write8(0x00);
    4434:	1b ba       	out	0x1b, r1	; 27
    4436:	ac 98       	cbi	0x15, 4	; 21
    4438:	ac 9a       	sbi	0x15, 4	; 21
  for(uint8_t i = 0; i < 3; i++)
  WR_STROBE; // Three extra 0x00s
    443a:	ac 98       	cbi	0x15, 4	; 21
    443c:	ac 9a       	sbi	0x15, 4	; 21
    443e:	ac 98       	cbi	0x15, 4	; 21
    4440:	ac 9a       	sbi	0x15, 4	; 21
    4442:	ac 98       	cbi	0x15, 4	; 21
    4444:	ac 9a       	sbi	0x15, 4	; 21
  CS_IDLE;
    4446:	aa 9a       	sbi	0x15, 2	; 21
}
    4448:	08 95       	ret

0000444a <setLR>:
// 7575 needs the address window set on all graphics operations.  In order
// to save a few register writes on each pixel drawn, the lower-right
// corner of the address window is reset after most fill operations, so
// that drawPixel only needs to change the upper left each time.
void setLR(void) {
  if(busy) return;
    444a:	80 91 8e 00 	lds	r24, 0x008E
    444e:	88 23       	and	r24, r24
    4450:	b1 f4       	brne	.+44     	; 0x447e <setLR+0x34>
  CS_ACTIVE;
    4452:	aa 98       	cbi	0x15, 2	; 21
  writeRegisterPair(HX8347G_COLADDREND_HI, HX8347G_COLADDREND_LO, _width  - 1);
    4454:	40 91 49 01 	lds	r20, 0x0149
    4458:	50 91 4a 01 	lds	r21, 0x014A
    445c:	41 50       	subi	r20, 0x01	; 1
    445e:	50 40       	sbci	r21, 0x00	; 0
    4460:	84 e0       	ldi	r24, 0x04	; 4
    4462:	65 e0       	ldi	r22, 0x05	; 5
    4464:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <writeRegisterPair>
  writeRegisterPair(HX8347G_ROWADDREND_HI, HX8347G_ROWADDREND_LO, _height - 1);
    4468:	40 91 4f 01 	lds	r20, 0x014F
    446c:	50 91 50 01 	lds	r21, 0x0150
    4470:	41 50       	subi	r20, 0x01	; 1
    4472:	50 40       	sbci	r21, 0x00	; 0
    4474:	88 e0       	ldi	r24, 0x08	; 8
    4476:	69 e0       	ldi	r22, 0x09	; 9
    4478:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <writeRegisterPair>
  CS_IDLE;
    447c:	aa 9a       	sbi	0x15, 2	; 21
    447e:	08 95       	ret

00004480 <flood>:
//*****************************************************

// Fast block fill operation for fillScreen, fillRect, H/V line, etc.
// Requires setAddrWindow() has previously been called to set the fill
// bounds.  'len' is inclusive, MUST be >= 1.
void flood(uint16_t color, uint32_t len) {
    4480:	f8 2f       	mov	r31, r24
    4482:	e9 2f       	mov	r30, r25
  if(busy) return;
    4484:	80 91 8e 00 	lds	r24, 0x008E
    4488:	88 23       	and	r24, r24
    448a:	09 f0       	breq	.+2      	; 0x448e <flood+0xe>
    448c:	78 c0       	rjmp	.+240    	; 0x457e <flood+0xfe>
  uint16_t blocks;
  uint8_t  i, hi = color >> 8,
                lo = color;

  CS_ACTIVE;
    448e:	aa 98       	cbi	0x15, 2	; 21
  CD_COMMAND;
    4490:	ab 98       	cbi	0x15, 3	; 21
  if (driver == ID_9341) {
    4492:	80 91 89 00 	lds	r24, 0x0089
    4496:	82 30       	cpi	r24, 0x02	; 2
    4498:	41 f0       	breq	.+16     	; 0x44aa <flood+0x2a>
    write8(0x2C);
  } else if (driver == ID_932X) {
    449a:	88 23       	and	r24, r24
    449c:	21 f4       	brne	.+8      	; 0x44a6 <flood+0x26>
    write8(0x00); // High byte of GRAM register...
    449e:	1b ba       	out	0x1b, r1	; 27
    44a0:	ac 98       	cbi	0x15, 4	; 21
    44a2:	ac 9a       	sbi	0x15, 4	; 21
    44a4:	04 c0       	rjmp	.+8      	; 0x44ae <flood+0x2e>
    write8(0x22); // Write data to GRAM
  } else if (driver == ID_HX8357D) {
    44a6:	83 30       	cpi	r24, 0x03	; 3
    44a8:	11 f4       	brne	.+4      	; 0x44ae <flood+0x2e>
    write8(HX8357_RAMWR);
    44aa:	8c e2       	ldi	r24, 0x2C	; 44
    44ac:	01 c0       	rjmp	.+2      	; 0x44b0 <flood+0x30>
  } else {
    write8(0x22); // Write data to GRAM
    44ae:	82 e2       	ldi	r24, 0x22	; 34
    44b0:	8b bb       	out	0x1b, r24	; 27
    44b2:	ac 98       	cbi	0x15, 4	; 21
    44b4:	ac 9a       	sbi	0x15, 4	; 21
  }

  // Write first pixel normally, decrement counter by 1
  CD_DATA;
    44b6:	ab 9a       	sbi	0x15, 3	; 21
  write8(hi);
    44b8:	eb bb       	out	0x1b, r30	; 27
    44ba:	ac 98       	cbi	0x15, 4	; 21
    44bc:	ac 9a       	sbi	0x15, 4	; 21
  write8(lo);
    44be:	fb bb       	out	0x1b, r31	; 27
    44c0:	ac 98       	cbi	0x15, 4	; 21
    44c2:	ac 9a       	sbi	0x15, 4	; 21
  len--;
    44c4:	41 50       	subi	r20, 0x01	; 1
    44c6:	50 40       	sbci	r21, 0x00	; 0
    44c8:	60 40       	sbci	r22, 0x00	; 0
    44ca:	70 40       	sbci	r23, 0x00	; 0

  blocks = (uint16_t)(len / 64); // 64 pixels/block
    44cc:	db 01       	movw	r26, r22
    44ce:	ca 01       	movw	r24, r20
    44d0:	26 e0       	ldi	r18, 0x06	; 6
    44d2:	b6 95       	lsr	r27
    44d4:	a7 95       	ror	r26
    44d6:	97 95       	ror	r25
    44d8:	87 95       	ror	r24
    44da:	2a 95       	dec	r18
    44dc:	d1 f7       	brne	.-12     	; 0x44d2 <flood+0x52>
  if(hi == lo) {
    44de:	ef 17       	cp	r30, r31
    44e0:	b1 f0       	breq	.+44     	; 0x450e <flood+0x8e>
    44e2:	9c 01       	movw	r18, r24
    44e4:	3d c0       	rjmp	.+122    	; 0x4560 <flood+0xe0>
    44e6:	20 e1       	ldi	r18, 0x10	; 16
    // High and low bytes are identical.  Leave prior data
    // on the port(s) and just toggle the write strobe.
    while(blocks--) {
      i = 16; // 64 pixels/block / 4 pixels/pass
      do {
        WR_STROBE; WR_STROBE; WR_STROBE; WR_STROBE; // 2 bytes/pixel
    44e8:	ac 98       	cbi	0x15, 4	; 21
    44ea:	ac 9a       	sbi	0x15, 4	; 21
    44ec:	ac 98       	cbi	0x15, 4	; 21
    44ee:	ac 9a       	sbi	0x15, 4	; 21
    44f0:	ac 98       	cbi	0x15, 4	; 21
    44f2:	ac 9a       	sbi	0x15, 4	; 21
    44f4:	ac 98       	cbi	0x15, 4	; 21
    44f6:	ac 9a       	sbi	0x15, 4	; 21
        WR_STROBE; WR_STROBE; WR_STROBE; WR_STROBE; // x 4 pixels
    44f8:	ac 98       	cbi	0x15, 4	; 21
    44fa:	ac 9a       	sbi	0x15, 4	; 21
    44fc:	ac 98       	cbi	0x15, 4	; 21
    44fe:	ac 9a       	sbi	0x15, 4	; 21
    4500:	ac 98       	cbi	0x15, 4	; 21
    4502:	ac 9a       	sbi	0x15, 4	; 21
    4504:	ac 98       	cbi	0x15, 4	; 21
    4506:	ac 9a       	sbi	0x15, 4	; 21
      } while(--i);
    4508:	21 50       	subi	r18, 0x01	; 1
    450a:	71 f7       	brne	.-36     	; 0x44e8 <flood+0x68>
    450c:	01 97       	sbiw	r24, 0x01	; 1

  blocks = (uint16_t)(len / 64); // 64 pixels/block
  if(hi == lo) {
    // High and low bytes are identical.  Leave prior data
    // on the port(s) and just toggle the write strobe.
    while(blocks--) {
    450e:	00 97       	sbiw	r24, 0x00	; 0
    4510:	51 f7       	brne	.-44     	; 0x44e6 <flood+0x66>
        WR_STROBE; WR_STROBE; WR_STROBE; WR_STROBE; // 2 bytes/pixel
        WR_STROBE; WR_STROBE; WR_STROBE; WR_STROBE; // x 4 pixels
      } while(--i);
    }
    // Fill any remaining pixels (1 to 64)
    for(i = (uint8_t)len & 63; i--; ) {
    4512:	4f 73       	andi	r20, 0x3F	; 63
    4514:	05 c0       	rjmp	.+10     	; 0x4520 <flood+0xa0>
      WR_STROBE;
    4516:	ac 98       	cbi	0x15, 4	; 21
    4518:	ac 9a       	sbi	0x15, 4	; 21
      WR_STROBE;
    451a:	ac 98       	cbi	0x15, 4	; 21
    451c:	ac 9a       	sbi	0x15, 4	; 21
    451e:	41 50       	subi	r20, 0x01	; 1
        WR_STROBE; WR_STROBE; WR_STROBE; WR_STROBE; // 2 bytes/pixel
        WR_STROBE; WR_STROBE; WR_STROBE; WR_STROBE; // x 4 pixels
      } while(--i);
    }
    // Fill any remaining pixels (1 to 64)
    for(i = (uint8_t)len & 63; i--; ) {
    4520:	44 23       	and	r20, r20
    4522:	c9 f7       	brne	.-14     	; 0x4516 <flood+0x96>
    4524:	2b c0       	rjmp	.+86     	; 0x457c <flood+0xfc>
    4526:	80 e1       	ldi	r24, 0x10	; 16
    }
  } else {
    while(blocks--) {
      i = 16; // 64 pixels/block / 4 pixels/pass
      do {
        write8(hi); write8(lo); write8(hi); write8(lo);
    4528:	eb bb       	out	0x1b, r30	; 27
    452a:	ac 98       	cbi	0x15, 4	; 21
    452c:	ac 9a       	sbi	0x15, 4	; 21
    452e:	fb bb       	out	0x1b, r31	; 27
    4530:	ac 98       	cbi	0x15, 4	; 21
    4532:	ac 9a       	sbi	0x15, 4	; 21
    4534:	eb bb       	out	0x1b, r30	; 27
    4536:	ac 98       	cbi	0x15, 4	; 21
    4538:	ac 9a       	sbi	0x15, 4	; 21
    453a:	fb bb       	out	0x1b, r31	; 27
    453c:	ac 98       	cbi	0x15, 4	; 21
    453e:	ac 9a       	sbi	0x15, 4	; 21
        write8(hi); write8(lo); write8(hi); write8(lo);
    4540:	eb bb       	out	0x1b, r30	; 27
    4542:	ac 98       	cbi	0x15, 4	; 21
    4544:	ac 9a       	sbi	0x15, 4	; 21
    4546:	fb bb       	out	0x1b, r31	; 27
    4548:	ac 98       	cbi	0x15, 4	; 21
    454a:	ac 9a       	sbi	0x15, 4	; 21
    454c:	eb bb       	out	0x1b, r30	; 27
    454e:	ac 98       	cbi	0x15, 4	; 21
    4550:	ac 9a       	sbi	0x15, 4	; 21
    4552:	fb bb       	out	0x1b, r31	; 27
    4554:	ac 98       	cbi	0x15, 4	; 21
    4556:	ac 9a       	sbi	0x15, 4	; 21
      } while(--i);
    4558:	81 50       	subi	r24, 0x01	; 1
    455a:	31 f7       	brne	.-52     	; 0x4528 <flood+0xa8>
    455c:	21 50       	subi	r18, 0x01	; 1
    455e:	30 40       	sbci	r19, 0x00	; 0
    for(i = (uint8_t)len & 63; i--; ) {
      WR_STROBE;
      WR_STROBE;
    }
  } else {
    while(blocks--) {
    4560:	21 15       	cp	r18, r1
    4562:	31 05       	cpc	r19, r1
    4564:	01 f7       	brne	.-64     	; 0x4526 <flood+0xa6>
      do {
        write8(hi); write8(lo); write8(hi); write8(lo);
        write8(hi); write8(lo); write8(hi); write8(lo);
      } while(--i);
    }
    for(i = (uint8_t)len & 63; i--; ) {
    4566:	4f 73       	andi	r20, 0x3F	; 63
    4568:	07 c0       	rjmp	.+14     	; 0x4578 <flood+0xf8>
      write8(hi);
    456a:	eb bb       	out	0x1b, r30	; 27
    456c:	ac 98       	cbi	0x15, 4	; 21
    456e:	ac 9a       	sbi	0x15, 4	; 21
      write8(lo);
    4570:	fb bb       	out	0x1b, r31	; 27
    4572:	ac 98       	cbi	0x15, 4	; 21
    4574:	ac 9a       	sbi	0x15, 4	; 21
    4576:	41 50       	subi	r20, 0x01	; 1
      do {
        write8(hi); write8(lo); write8(hi); write8(lo);
        write8(hi); write8(lo); write8(hi); write8(lo);
      } while(--i);
    }
    for(i = (uint8_t)len & 63; i--; ) {
    4578:	44 23       	and	r20, r20
    457a:	b9 f7       	brne	.-18     	; 0x456a <flood+0xea>
      write8(hi);
      write8(lo);
    }
  }
  CS_IDLE;
    457c:	aa 9a       	sbi	0x15, 2	; 21
    457e:	08 95       	ret

00004580 <pushColors>:

// Issues 'raw' an array of 16-bit color values to the LCD; used
// externally by BMP examples.  Assumes that setWindowAddr() has
// previously been set to define the bounds.  Max 255 pixels at
// a time (BMP examples read in small chunks due to limited RAM).
void pushColors(uint16_t *data, uint8_t len, boolean first) {
    4580:	fc 01       	movw	r30, r24
 if( busy ) return;
    4582:	80 91 8e 00 	lds	r24, 0x008E
    4586:	88 23       	and	r24, r24
    4588:	19 f5       	brne	.+70     	; 0x45d0 <pushColors+0x50>
  uint16_t color;
  uint8_t  hi, lo;
  CS_ACTIVE;
    458a:	aa 98       	cbi	0x15, 2	; 21
  if(first == true) { // Issue GRAM write command only on first call
    458c:	44 23       	and	r20, r20
    458e:	89 f0       	breq	.+34     	; 0x45b2 <pushColors+0x32>
    CD_COMMAND;
    4590:	ab 98       	cbi	0x15, 3	; 21
    if(driver == ID_932X) write8(0x00);
    4592:	80 91 89 00 	lds	r24, 0x0089
    4596:	88 23       	and	r24, r24
    4598:	19 f4       	brne	.+6      	; 0x45a0 <pushColors+0x20>
    459a:	1b ba       	out	0x1b, r1	; 27
    459c:	ac 98       	cbi	0x15, 4	; 21
    459e:	ac 9a       	sbi	0x15, 4	; 21
    if ((driver == ID_9341) || (driver == ID_HX8357D)){
    45a0:	82 50       	subi	r24, 0x02	; 2
    45a2:	82 30       	cpi	r24, 0x02	; 2
    45a4:	10 f4       	brcc	.+4      	; 0x45aa <pushColors+0x2a>
       write8(0x2C);
    45a6:	8c e2       	ldi	r24, 0x2C	; 44
    45a8:	01 c0       	rjmp	.+2      	; 0x45ac <pushColors+0x2c>
     }  else {
       write8(0x22);
    45aa:	82 e2       	ldi	r24, 0x22	; 34
    45ac:	8b bb       	out	0x1b, r24	; 27
    45ae:	ac 98       	cbi	0x15, 4	; 21
    45b0:	ac 9a       	sbi	0x15, 4	; 21
     }
  }
  CD_DATA;
    45b2:	ab 9a       	sbi	0x15, 3	; 21
    45b4:	0a c0       	rjmp	.+20     	; 0x45ca <pushColors+0x4a>
  while(len--) {
    color = *data++;
    45b6:	90 81       	ld	r25, Z
    45b8:	81 81       	ldd	r24, Z+1	; 0x01
    45ba:	32 96       	adiw	r30, 0x02	; 2
    hi    = color >> 8; // Don't simplify or merge these
    lo    = color;      // lines, there's macro shenanigans
    write8(hi);         // going on.
    45bc:	8b bb       	out	0x1b, r24	; 27
    45be:	ac 98       	cbi	0x15, 4	; 21
    45c0:	ac 9a       	sbi	0x15, 4	; 21
    write8(lo);
    45c2:	9b bb       	out	0x1b, r25	; 27
    45c4:	ac 98       	cbi	0x15, 4	; 21
    45c6:	ac 9a       	sbi	0x15, 4	; 21
    45c8:	61 50       	subi	r22, 0x01	; 1
     }  else {
       write8(0x22);
     }
  }
  CD_DATA;
  while(len--) {
    45ca:	66 23       	and	r22, r22
    45cc:	a1 f7       	brne	.-24     	; 0x45b6 <pushColors+0x36>
    hi    = color >> 8; // Don't simplify or merge these
    lo    = color;      // lines, there's macro shenanigans
    write8(hi);         // going on.
    write8(lo);
  }
  CS_IDLE;
    45ce:	aa 9a       	sbi	0x15, 2	; 21
    45d0:	08 95       	ret

000045d2 <readReg>:
uint32_t readReg(uint8_t r) {
  uint32_t id;
  uint8_t x;

  // try reading register #4
  CS_ACTIVE;
    45d2:	aa 98       	cbi	0x15, 2	; 21
  CD_COMMAND;
    45d4:	ab 98       	cbi	0x15, 3	; 21
  write8(r);
    45d6:	8b bb       	out	0x1b, r24	; 27
    45d8:	ac 98       	cbi	0x15, 4	; 21
    45da:	ac 9a       	sbi	0x15, 4	; 21
  setReadDir();  // Set up LCD data port(s) for READ operations
    45dc:	1a ba       	out	0x1a, r1	; 26
  CD_DATA;
    45de:	ab 9a       	sbi	0x15, 3	; 21
 // delayMicroseconds(50);
  read8(x);
    45e0:	80 91 8e 00 	lds	r24, 0x008E
    45e4:	88 23       	and	r24, r24
    45e6:	29 f0       	breq	.+10     	; 0x45f2 <readReg+0x20>
    45e8:	20 e0       	ldi	r18, 0x00	; 0
    45ea:	30 e0       	ldi	r19, 0x00	; 0
    45ec:	40 e0       	ldi	r20, 0x00	; 0
    45ee:	50 e0       	ldi	r21, 0x00	; 0
    45f0:	43 c0       	rjmp	.+134    	; 0x4678 <readReg+0xa6>
    45f2:	ad 98       	cbi	0x15, 5	; 21
    45f4:	00 c0       	rjmp	.+0      	; 0x45f6 <readReg+0x24>
    45f6:	00 c0       	rjmp	.+0      	; 0x45f8 <readReg+0x26>
    45f8:	00 c0       	rjmp	.+0      	; 0x45fa <readReg+0x28>
    45fa:	00 00       	nop
    45fc:	29 b3       	in	r18, 0x19	; 25
    45fe:	ad 9a       	sbi	0x15, 5	; 21
  id = x;          // Do not merge or otherwise simplify
    4600:	30 e0       	ldi	r19, 0x00	; 0
    4602:	40 e0       	ldi	r20, 0x00	; 0
    4604:	50 e0       	ldi	r21, 0x00	; 0
  id <<= 8;              // these lines.  It's an unfortunate
    4606:	54 2f       	mov	r21, r20
    4608:	43 2f       	mov	r20, r19
    460a:	32 2f       	mov	r19, r18
    460c:	22 27       	eor	r18, r18
  read8(x);
    460e:	ad 98       	cbi	0x15, 5	; 21
    4610:	00 c0       	rjmp	.+0      	; 0x4612 <readReg+0x40>
    4612:	00 c0       	rjmp	.+0      	; 0x4614 <readReg+0x42>
    4614:	00 c0       	rjmp	.+0      	; 0x4616 <readReg+0x44>
    4616:	00 00       	nop
    4618:	89 b3       	in	r24, 0x19	; 25
    461a:	ad 9a       	sbi	0x15, 5	; 21
  id  |= x;        // shenanigans that are going on.
    461c:	90 e0       	ldi	r25, 0x00	; 0
    461e:	a0 e0       	ldi	r26, 0x00	; 0
    4620:	b0 e0       	ldi	r27, 0x00	; 0
    4622:	28 2b       	or	r18, r24
    4624:	39 2b       	or	r19, r25
    4626:	4a 2b       	or	r20, r26
    4628:	5b 2b       	or	r21, r27
  id <<= 8;              // these lines.  It's an unfortunate
    462a:	54 2f       	mov	r21, r20
    462c:	43 2f       	mov	r20, r19
    462e:	32 2f       	mov	r19, r18
    4630:	22 27       	eor	r18, r18
  read8(x);
    4632:	ad 98       	cbi	0x15, 5	; 21
    4634:	00 c0       	rjmp	.+0      	; 0x4636 <readReg+0x64>
    4636:	00 c0       	rjmp	.+0      	; 0x4638 <readReg+0x66>
    4638:	00 c0       	rjmp	.+0      	; 0x463a <readReg+0x68>
    463a:	00 00       	nop
    463c:	89 b3       	in	r24, 0x19	; 25
    463e:	ad 9a       	sbi	0x15, 5	; 21
  id  |= x;        // shenanigans that are going on.
    4640:	90 e0       	ldi	r25, 0x00	; 0
    4642:	a0 e0       	ldi	r26, 0x00	; 0
    4644:	b0 e0       	ldi	r27, 0x00	; 0
    4646:	28 2b       	or	r18, r24
    4648:	39 2b       	or	r19, r25
    464a:	4a 2b       	or	r20, r26
    464c:	5b 2b       	or	r21, r27
  id <<= 8;              // these lines.  It's an unfortunate
    464e:	54 2f       	mov	r21, r20
    4650:	43 2f       	mov	r20, r19
    4652:	32 2f       	mov	r19, r18
    4654:	22 27       	eor	r18, r18
  read8(x);
    4656:	ad 98       	cbi	0x15, 5	; 21
    4658:	00 c0       	rjmp	.+0      	; 0x465a <readReg+0x88>
    465a:	00 c0       	rjmp	.+0      	; 0x465c <readReg+0x8a>
    465c:	00 c0       	rjmp	.+0      	; 0x465e <readReg+0x8c>
    465e:	00 00       	nop
    4660:	89 b3       	in	r24, 0x19	; 25
    4662:	ad 9a       	sbi	0x15, 5	; 21
  id  |= x;        // shenanigans that are going on.
    4664:	90 e0       	ldi	r25, 0x00	; 0
    4666:	a0 e0       	ldi	r26, 0x00	; 0
    4668:	b0 e0       	ldi	r27, 0x00	; 0
    466a:	28 2b       	or	r18, r24
    466c:	39 2b       	or	r19, r25
    466e:	4a 2b       	or	r20, r26
    4670:	5b 2b       	or	r21, r27
  CS_IDLE;
    4672:	aa 9a       	sbi	0x15, 2	; 21
  setWriteDir();  // Restore LCD data port(s) to WRITE configuration
    4674:	8f ef       	ldi	r24, 0xFF	; 255
    4676:	8a bb       	out	0x1a, r24	; 26

  return id;
}
    4678:	b9 01       	movw	r22, r18
    467a:	ca 01       	movw	r24, r20
    467c:	08 95       	ret

0000467e <color565>:
//*****************************************************
#endif

// Pass 8-bit (each) R,G,B, get back 16-bit packed color
uint16_t color565(uint8_t r, uint8_t g, uint8_t b) {
    467e:	70 e0       	ldi	r23, 0x00	; 0
    4680:	6c 7f       	andi	r22, 0xFC	; 252
    4682:	70 70       	andi	r23, 0x00	; 0
    4684:	a3 e0       	ldi	r26, 0x03	; 3
    4686:	66 0f       	add	r22, r22
    4688:	77 1f       	adc	r23, r23
    468a:	aa 95       	dec	r26
    468c:	e1 f7       	brne	.-8      	; 0x4686 <color565+0x8>
    468e:	46 95       	lsr	r20
    4690:	46 95       	lsr	r20
    4692:	46 95       	lsr	r20
    4694:	50 e0       	ldi	r21, 0x00	; 0
    4696:	64 2b       	or	r22, r20
    4698:	75 2b       	or	r23, r21
    469a:	90 e0       	ldi	r25, 0x00	; 0
    469c:	88 7f       	andi	r24, 0xF8	; 248
    469e:	90 70       	andi	r25, 0x00	; 0
    46a0:	98 2f       	mov	r25, r24
    46a2:	88 27       	eor	r24, r24
    46a4:	68 2b       	or	r22, r24
    46a6:	79 2b       	or	r23, r25
  return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
}
    46a8:	cb 01       	movw	r24, r22
    46aa:	08 95       	ret

000046ac <writeRegister24>:
//*****************************************************

void writeRegister24(uint8_t r, uint32_t d) {
  CS_ACTIVE;
    46ac:	aa 98       	cbi	0x15, 2	; 21
  CD_COMMAND;
    46ae:	ab 98       	cbi	0x15, 3	; 21
  write8(r);
    46b0:	8b bb       	out	0x1b, r24	; 27
    46b2:	ac 98       	cbi	0x15, 4	; 21
    46b4:	ac 9a       	sbi	0x15, 4	; 21
  CD_DATA;
    46b6:	ab 9a       	sbi	0x15, 3	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    46b8:	25 e0       	ldi	r18, 0x05	; 5
    46ba:	82 2f       	mov	r24, r18
    46bc:	8a 95       	dec	r24
    46be:	f1 f7       	brne	.-4      	; 0x46bc <writeRegister24+0x10>
  delayMicroseconds(10);
  write8(d >> 16);
    46c0:	cb 01       	movw	r24, r22
    46c2:	aa 27       	eor	r26, r26
    46c4:	bb 27       	eor	r27, r27
    46c6:	8b bb       	out	0x1b, r24	; 27
    46c8:	ac 98       	cbi	0x15, 4	; 21
    46ca:	ac 9a       	sbi	0x15, 4	; 21
    46cc:	82 2f       	mov	r24, r18
    46ce:	8a 95       	dec	r24
    46d0:	f1 f7       	brne	.-4      	; 0x46ce <writeRegister24+0x22>
  delayMicroseconds(10);
  write8(d >> 8);
    46d2:	bb 27       	eor	r27, r27
    46d4:	a7 2f       	mov	r26, r23
    46d6:	96 2f       	mov	r25, r22
    46d8:	85 2f       	mov	r24, r21
    46da:	8b bb       	out	0x1b, r24	; 27
    46dc:	ac 98       	cbi	0x15, 4	; 21
    46de:	ac 9a       	sbi	0x15, 4	; 21
    46e0:	2a 95       	dec	r18
    46e2:	f1 f7       	brne	.-4      	; 0x46e0 <writeRegister24+0x34>
  delayMicroseconds(10);
  write8(d);
    46e4:	4b bb       	out	0x1b, r20	; 27
    46e6:	ac 98       	cbi	0x15, 4	; 21
    46e8:	ac 9a       	sbi	0x15, 4	; 21
  CS_IDLE;
    46ea:	aa 9a       	sbi	0x15, 2	; 21
}
    46ec:	08 95       	ret

000046ee <readID>:

// Ditto with the read/write port directions, as above.
uint16_t readID(void) {
  uint8_t hi, lo;

  if (readReg(0x04) == 0x8000) { // eh close enough
    46ee:	84 e0       	ldi	r24, 0x04	; 4
    46f0:	0e 94 e9 22 	call	0x45d2	; 0x45d2 <readReg>
    46f4:	60 50       	subi	r22, 0x00	; 0
    46f6:	70 48       	sbci	r23, 0x80	; 128
    46f8:	80 40       	sbci	r24, 0x00	; 0
    46fa:	90 40       	sbci	r25, 0x00	; 0
    46fc:	01 f5       	brne	.+64     	; 0x473e <readID+0x50>
    // setc!

    writeRegister24(HX8357D_SETC, 0xFF8357);
    46fe:	89 eb       	ldi	r24, 0xB9	; 185
    4700:	47 e5       	ldi	r20, 0x57	; 87
    4702:	53 e8       	ldi	r21, 0x83	; 131
    4704:	6f ef       	ldi	r22, 0xFF	; 255
    4706:	70 e0       	ldi	r23, 0x00	; 0
    4708:	0e 94 56 23 	call	0x46ac	; 0x46ac <writeRegister24>
    470c:	2c e2       	ldi	r18, 0x2C	; 44
    470e:	31 e0       	ldi	r19, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4710:	40 e9       	ldi	r20, 0x90	; 144
    4712:	51 e0       	ldi	r21, 0x01	; 1
    4714:	03 c0       	rjmp	.+6      	; 0x471c <readID+0x2e>
    4716:	ca 01       	movw	r24, r20
    4718:	01 97       	sbiw	r24, 0x01	; 1
    471a:	f1 f7       	brne	.-4      	; 0x4718 <readID+0x2a>
//*****************************************************
//*****************************************************


void delay(uint16_t d) {
  while(d--) _delay_ms(1);
    471c:	21 50       	subi	r18, 0x01	; 1
    471e:	30 40       	sbci	r19, 0x00	; 0
    4720:	8f ef       	ldi	r24, 0xFF	; 255
    4722:	2f 3f       	cpi	r18, 0xFF	; 255
    4724:	38 07       	cpc	r19, r24
    4726:	b9 f7       	brne	.-18     	; 0x4716 <readID+0x28>
    // setc!

    writeRegister24(HX8357D_SETC, 0xFF8357);
    delay(300);
    //Serial.println(readReg(0xD0), HEX);
    if (readReg(0xD0) == 0x990000) {
    4728:	80 ed       	ldi	r24, 0xD0	; 208
    472a:	0e 94 e9 22 	call	0x45d2	; 0x45d2 <readReg>
    472e:	60 50       	subi	r22, 0x00	; 0
    4730:	70 40       	sbci	r23, 0x00	; 0
    4732:	89 49       	sbci	r24, 0x99	; 153
    4734:	90 40       	sbci	r25, 0x00	; 0
    4736:	19 f4       	brne	.+6      	; 0x473e <readID+0x50>
    4738:	27 e5       	ldi	r18, 0x57	; 87
    473a:	33 e8       	ldi	r19, 0x83	; 131
    473c:	42 c0       	rjmp	.+132    	; 0x47c2 <readID+0xd4>
      return 0x8357;
    }
  }

  uint16_t id = readReg(0xD3);
    473e:	83 ed       	ldi	r24, 0xD3	; 211
    4740:	0e 94 e9 22 	call	0x45d2	; 0x45d2 <readReg>
    4744:	9b 01       	movw	r18, r22
  if (id == 0x9341) {
    4746:	83 e9       	ldi	r24, 0x93	; 147
    4748:	21 34       	cpi	r18, 0x41	; 65
    474a:	38 07       	cpc	r19, r24
    474c:	09 f4       	brne	.+2      	; 0x4750 <readID+0x62>
    474e:	39 c0       	rjmp	.+114    	; 0x47c2 <readID+0xd4>
    return 0x9341;
  }
  if (id == 0x9488) {
    4750:	84 e9       	ldi	r24, 0x94	; 148
    4752:	28 38       	cpi	r18, 0x88	; 136
    4754:	38 07       	cpc	r19, r24
    4756:	09 f4       	brne	.+2      	; 0x475a <readID+0x6c>
    4758:	34 c0       	rjmp	.+104    	; 0x47c2 <readID+0xd4>
	return 0x9488;
  }

  id = readReg(0xEF);
    475a:	8f ee       	ldi	r24, 0xEF	; 239
    475c:	0e 94 e9 22 	call	0x45d2	; 0x45d2 <readReg>
    4760:	9b 01       	movw	r18, r22
  if (id == 0x9327) {
    4762:	83 e9       	ldi	r24, 0x93	; 147
    4764:	27 32       	cpi	r18, 0x27	; 39
    4766:	38 07       	cpc	r19, r24
    4768:	61 f1       	breq	.+88     	; 0x47c2 <readID+0xd4>
	return 0x9327;
  }

  CS_ACTIVE;
    476a:	aa 98       	cbi	0x15, 2	; 21
  CD_COMMAND;
    476c:	ab 98       	cbi	0x15, 3	; 21
  write8(0x00);
    476e:	1b ba       	out	0x1b, r1	; 27
    4770:	ac 98       	cbi	0x15, 4	; 21
    4772:	ac 9a       	sbi	0x15, 4	; 21
  WR_STROBE;     // Repeat prior byte (0x00)
    4774:	ac 98       	cbi	0x15, 4	; 21
    4776:	ac 9a       	sbi	0x15, 4	; 21
  setReadDir();  // Set up LCD data port(s) for READ operations
    4778:	1a ba       	out	0x1a, r1	; 26
  CD_DATA;
    477a:	ab 9a       	sbi	0x15, 3	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    477c:	85 e0       	ldi	r24, 0x05	; 5
    477e:	8a 95       	dec	r24
    4780:	f1 f7       	brne	.-4      	; 0x477e <readID+0x90>
  delayMicroseconds(10);
  read8(hi);
    4782:	80 91 8e 00 	lds	r24, 0x008E
    4786:	88 23       	and	r24, r24
    4788:	19 f0       	breq	.+6      	; 0x4790 <readID+0xa2>
    478a:	20 e0       	ldi	r18, 0x00	; 0
    478c:	30 e0       	ldi	r19, 0x00	; 0
    478e:	19 c0       	rjmp	.+50     	; 0x47c2 <readID+0xd4>
    4790:	ad 98       	cbi	0x15, 5	; 21
    4792:	00 c0       	rjmp	.+0      	; 0x4794 <readID+0xa6>
    4794:	00 c0       	rjmp	.+0      	; 0x4796 <readID+0xa8>
    4796:	00 c0       	rjmp	.+0      	; 0x4798 <readID+0xaa>
    4798:	00 00       	nop
    479a:	39 b3       	in	r19, 0x19	; 25
    479c:	ad 9a       	sbi	0x15, 5	; 21
    479e:	85 e0       	ldi	r24, 0x05	; 5
    47a0:	8a 95       	dec	r24
    47a2:	f1 f7       	brne	.-4      	; 0x47a0 <readID+0xb2>
  delayMicroseconds(10);
  read8(lo);
    47a4:	ad 98       	cbi	0x15, 5	; 21
    47a6:	00 c0       	rjmp	.+0      	; 0x47a8 <readID+0xba>
    47a8:	00 c0       	rjmp	.+0      	; 0x47aa <readID+0xbc>
    47aa:	00 c0       	rjmp	.+0      	; 0x47ac <readID+0xbe>
    47ac:	00 00       	nop
    47ae:	29 b3       	in	r18, 0x19	; 25
    47b0:	ad 9a       	sbi	0x15, 5	; 21
  setWriteDir();  // Restore LCD data port(s) to WRITE configuration
    47b2:	8f ef       	ldi	r24, 0xFF	; 255
    47b4:	8a bb       	out	0x1a, r24	; 26
  CS_IDLE;
    47b6:	aa 9a       	sbi	0x15, 2	; 21

  id = hi;
  id <<= 8;
    47b8:	93 2f       	mov	r25, r19
    47ba:	80 e0       	ldi	r24, 0x00	; 0
  id |= lo;
    47bc:	30 e0       	ldi	r19, 0x00	; 0
    47be:	28 2b       	or	r18, r24
    47c0:	39 2b       	or	r19, r25
  return id;
}
    47c2:	c9 01       	movw	r24, r18
    47c4:	08 95       	ret

000047c6 <writeRegister32>:
  CS_IDLE;
}
//*****************************************************

void writeRegister32(uint8_t r, uint32_t d) {
  CS_ACTIVE;
    47c6:	aa 98       	cbi	0x15, 2	; 21
  CD_COMMAND;
    47c8:	ab 98       	cbi	0x15, 3	; 21
  write8(r);
    47ca:	8b bb       	out	0x1b, r24	; 27
    47cc:	ac 98       	cbi	0x15, 4	; 21
    47ce:	ac 9a       	sbi	0x15, 4	; 21
  CD_DATA;
    47d0:	ab 9a       	sbi	0x15, 3	; 21
    47d2:	25 e0       	ldi	r18, 0x05	; 5
    47d4:	82 2f       	mov	r24, r18
    47d6:	8a 95       	dec	r24
    47d8:	f1 f7       	brne	.-4      	; 0x47d6 <writeRegister32+0x10>
  delayMicroseconds(10);
  write8(d >> 24);
    47da:	87 2f       	mov	r24, r23
    47dc:	99 27       	eor	r25, r25
    47de:	aa 27       	eor	r26, r26
    47e0:	bb 27       	eor	r27, r27
    47e2:	8b bb       	out	0x1b, r24	; 27
    47e4:	ac 98       	cbi	0x15, 4	; 21
    47e6:	ac 9a       	sbi	0x15, 4	; 21
    47e8:	82 2f       	mov	r24, r18
    47ea:	8a 95       	dec	r24
    47ec:	f1 f7       	brne	.-4      	; 0x47ea <writeRegister32+0x24>
  delayMicroseconds(10);
  write8(d >> 16);
    47ee:	cb 01       	movw	r24, r22
    47f0:	aa 27       	eor	r26, r26
    47f2:	bb 27       	eor	r27, r27
    47f4:	8b bb       	out	0x1b, r24	; 27
    47f6:	ac 98       	cbi	0x15, 4	; 21
    47f8:	ac 9a       	sbi	0x15, 4	; 21
    47fa:	82 2f       	mov	r24, r18
    47fc:	8a 95       	dec	r24
    47fe:	f1 f7       	brne	.-4      	; 0x47fc <writeRegister32+0x36>
  delayMicroseconds(10);
  write8(d >> 8);
    4800:	bb 27       	eor	r27, r27
    4802:	a7 2f       	mov	r26, r23
    4804:	96 2f       	mov	r25, r22
    4806:	85 2f       	mov	r24, r21
    4808:	8b bb       	out	0x1b, r24	; 27
    480a:	ac 98       	cbi	0x15, 4	; 21
    480c:	ac 9a       	sbi	0x15, 4	; 21
    480e:	2a 95       	dec	r18
    4810:	f1 f7       	brne	.-4      	; 0x480e <writeRegister32+0x48>
  delayMicroseconds(10);
  write8(d);
    4812:	4b bb       	out	0x1b, r20	; 27
    4814:	ac 98       	cbi	0x15, 4	; 21
    4816:	ac 9a       	sbi	0x15, 4	; 21
  CS_IDLE;
    4818:	aa 9a       	sbi	0x15, 2	; 21
}
    481a:	08 95       	ret

0000481c <setAddrWindow>:


// Sets the LCD address window (and address counter, on 932X).
// Relevant to rect/screen fills and H/V lines.  Input coordinates are
// assumed pre-sorted (e.g. x2 >= x1).
void setAddrWindow(int x1, int y1, int x2, int y2) {
    481c:	8f 92       	push	r8
    481e:	9f 92       	push	r9
    4820:	af 92       	push	r10
    4822:	bf 92       	push	r11
    4824:	cf 92       	push	r12
    4826:	df 92       	push	r13
    4828:	ef 92       	push	r14
    482a:	ff 92       	push	r15
    482c:	0f 93       	push	r16
    482e:	1f 93       	push	r17
    4830:	cf 93       	push	r28
    4832:	df 93       	push	r29
    4834:	fc 01       	movw	r30, r24
    4836:	7b 01       	movw	r14, r22
    4838:	6a 01       	movw	r12, r20
    483a:	59 01       	movw	r10, r18
                         if( busy ) return;
    483c:	80 91 8e 00 	lds	r24, 0x008E
    4840:	88 23       	and	r24, r24
    4842:	09 f0       	breq	.+2      	; 0x4846 <setAddrWindow+0x2a>
    4844:	cc c0       	rjmp	.+408    	; 0x49de <setAddrWindow+0x1c2>
	 CS_ACTIVE;
    4846:	aa 98       	cbi	0x15, 2	; 21
     if( driver == ID_932X || driver == ID_S6D0154  ) {    //|| driver == ID_ST7781
    4848:	40 91 89 00 	lds	r20, 0x0089
    484c:	44 23       	and	r20, r20
    484e:	19 f0       	breq	.+6      	; 0x4856 <setAddrWindow+0x3a>
    4850:	44 30       	cpi	r20, 0x04	; 4
    4852:	09 f0       	breq	.+2      	; 0x4856 <setAddrWindow+0x3a>
    4854:	7c c0       	rjmp	.+248    	; 0x494e <setAddrWindow+0x132>
    // done in any direction, the current screen rotation is applied
    // because some users find it disconcerting when a fill does not
    // occur top-to-bottom.

	int x, y, t;
    switch(rotation) {
    4856:	80 91 47 01 	lds	r24, 0x0147
    485a:	82 30       	cpi	r24, 0x02	; 2
    485c:	b1 f0       	breq	.+44     	; 0x488a <setAddrWindow+0x6e>
    485e:	83 30       	cpi	r24, 0x03	; 3
    4860:	31 f1       	breq	.+76     	; 0x48ae <setAddrWindow+0x92>
    4862:	81 30       	cpi	r24, 0x01	; 1
    4864:	29 f0       	breq	.+10     	; 0x4870 <setAddrWindow+0x54>
    4866:	e6 01       	movw	r28, r12
    4868:	85 01       	movw	r16, r10
    486a:	4f 01       	movw	r8, r30
    486c:	67 01       	movw	r12, r14
    486e:	2b c0       	rjmp	.+86     	; 0x48c6 <setAddrWindow+0xaa>
      y  = y1;
      break;
      case 1:
      t  = y1;
      y1 = x1;
      x1 = TFTWIDTH  - 1 - y2;
    4870:	8f ee       	ldi	r24, 0xEF	; 239
    4872:	90 e0       	ldi	r25, 0x00	; 0
      y2 = x2;
      x2 = TFTWIDTH  - 1 - t;
    4874:	ec 01       	movw	r28, r24
    4876:	ce 19       	sub	r28, r14
    4878:	df 09       	sbc	r29, r15
    487a:	7f 01       	movw	r14, r30
    487c:	86 01       	movw	r16, r12
    487e:	4e 01       	movw	r8, r28
    4880:	6f 01       	movw	r12, r30
    4882:	fc 01       	movw	r30, r24
    4884:	ea 19       	sub	r30, r10
    4886:	fb 09       	sbc	r31, r11
    4888:	1e c0       	rjmp	.+60     	; 0x48c6 <setAddrWindow+0xaa>
      x  = x2;
      y  = y1;
      break;
      case 2:
      t  = x1;
      x1 = TFTWIDTH  - 1 - x2;
    488a:	2f ee       	ldi	r18, 0xEF	; 239
    488c:	30 e0       	ldi	r19, 0x00	; 0
      x2 = TFTWIDTH  - 1 - t;
    488e:	e9 01       	movw	r28, r18
    4890:	ce 1b       	sub	r28, r30
    4892:	df 0b       	sbc	r29, r31
      t  = y1;
      y1 = TFTHEIGHT - 1 - y2;
    4894:	8f e3       	ldi	r24, 0x3F	; 63
    4896:	91 e0       	ldi	r25, 0x01	; 1
      y2 = TFTHEIGHT - 1 - t;
    4898:	8c 01       	movw	r16, r24
    489a:	0e 19       	sub	r16, r14
    489c:	1f 09       	sbc	r17, r15
    489e:	f9 01       	movw	r30, r18
    48a0:	ec 19       	sub	r30, r12
    48a2:	fd 09       	sbc	r31, r13
    48a4:	7c 01       	movw	r14, r24
    48a6:	ea 18       	sub	r14, r10
    48a8:	fb 08       	sbc	r15, r11
    48aa:	4e 01       	movw	r8, r28
    48ac:	0b c0       	rjmp	.+22     	; 0x48c4 <setAddrWindow+0xa8>
      y  = y2;
      break;
      case 3:
      t  = x1;
      x1 = y1;
      y1 = TFTHEIGHT - 1 - x2;
    48ae:	8f e3       	ldi	r24, 0x3F	; 63
    48b0:	91 e0       	ldi	r25, 0x01	; 1
      x2 = y2;
      y2 = TFTHEIGHT - 1 - t;
    48b2:	8c 01       	movw	r16, r24
    48b4:	0e 1b       	sub	r16, r30
    48b6:	1f 0b       	sbc	r17, r31
    48b8:	f7 01       	movw	r30, r14
    48ba:	e5 01       	movw	r28, r10
    48bc:	47 01       	movw	r8, r14
    48be:	7c 01       	movw	r14, r24
    48c0:	ec 18       	sub	r14, r12
    48c2:	fd 08       	sbc	r15, r13
    48c4:	68 01       	movw	r12, r16
      x  = x1;
      y  = y2;
      break;
    }
    /**/	if(driver == ID_S6D0154) {
    48c6:	44 30       	cpi	r20, 0x04	; 4
    48c8:	19 f5       	brne	.+70     	; 0x4910 <setAddrWindow+0xf4>
	writeRegister16(0x37, x1); //HorizontalStartAddress
    48ca:	87 e3       	ldi	r24, 0x37	; 55
    48cc:	90 e0       	ldi	r25, 0x00	; 0
    48ce:	bf 01       	movw	r22, r30
    48d0:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <writeRegister16>
	writeRegister16(0x36, x2); //HorizontalEndAddress
    48d4:	86 e3       	ldi	r24, 0x36	; 54
    48d6:	90 e0       	ldi	r25, 0x00	; 0
    48d8:	be 01       	movw	r22, r28
    48da:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <writeRegister16>
	writeRegister16(0x39, y1); //VerticalStartAddress
    48de:	89 e3       	ldi	r24, 0x39	; 57
    48e0:	90 e0       	ldi	r25, 0x00	; 0
    48e2:	b7 01       	movw	r22, r14
    48e4:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <writeRegister16>
	writeRegister16(0x38, y2); //VertocalEndAddress
    48e8:	88 e3       	ldi	r24, 0x38	; 56
    48ea:	90 e0       	ldi	r25, 0x00	; 0
    48ec:	b8 01       	movw	r22, r16
    48ee:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <writeRegister16>
	writeRegister16(0x20,  x); //GRAM Address Set
    48f2:	80 e2       	ldi	r24, 0x20	; 32
    48f4:	90 e0       	ldi	r25, 0x00	; 0
    48f6:	b4 01       	movw	r22, r8
    48f8:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <writeRegister16>
	writeRegister16(0x21,  y);
    48fc:	81 e2       	ldi	r24, 0x21	; 33
    48fe:	90 e0       	ldi	r25, 0x00	; 0
    4900:	b6 01       	movw	r22, r12
    4902:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <writeRegister16>
	writeRegister8 (0x22,  0);
    4906:	82 e2       	ldi	r24, 0x22	; 34
    4908:	60 e0       	ldi	r22, 0x00	; 0
    490a:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <writeRegister8>
    490e:	66 c0       	rjmp	.+204    	; 0x49dc <setAddrWindow+0x1c0>
	} else {
    //if( driver == ID_932X )
	writeRegister16(0x0050, x1); // Set address window ,Horizontal and Vertical RAM Address Position (R50h, R51h, R52h, R53h)
    4910:	80 e5       	ldi	r24, 0x50	; 80
    4912:	90 e0       	ldi	r25, 0x00	; 0
    4914:	bf 01       	movw	r22, r30
    4916:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <writeRegister16>
    writeRegister16(0x0051, x2);
    491a:	81 e5       	ldi	r24, 0x51	; 81
    491c:	90 e0       	ldi	r25, 0x00	; 0
    491e:	be 01       	movw	r22, r28
    4920:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <writeRegister16>
    //if( driver == ID_932X )
	writeRegister16(0x0052, y1);
    4924:	82 e5       	ldi	r24, 0x52	; 82
    4926:	90 e0       	ldi	r25, 0x00	; 0
    4928:	b7 01       	movw	r22, r14
    492a:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <writeRegister16>
    writeRegister16(0x0053, y2);
    492e:	83 e5       	ldi	r24, 0x53	; 83
    4930:	90 e0       	ldi	r25, 0x00	; 0
    4932:	b8 01       	movw	r22, r16
    4934:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <writeRegister16>
    writeRegister16(0x0020, x );     // GRAM Address Set (Horizontal Address) (R20h)
    4938:	80 e2       	ldi	r24, 0x20	; 32
    493a:	90 e0       	ldi	r25, 0x00	; 0
    493c:	b4 01       	movw	r22, r8
    493e:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <writeRegister16>
    writeRegister16(0x0021, y );    // GRAM Address Set (Vertical Address) (R21h)
    4942:	81 e2       	ldi	r24, 0x21	; 33
    4944:	90 e0       	ldi	r25, 0x00	; 0
    4946:	b6 01       	movw	r22, r12
    4948:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <writeRegister16>
    494c:	47 c0       	rjmp	.+142    	; 0x49dc <setAddrWindow+0x1c0>
//	if( driver == ID_ST7781 ) writeRegister8(0x22, 0); // Write Data to GRAM (R22h)
	}

  } else
      if((driver == ID_9341) || (driver == ID_HX8357D) ||
    494e:	84 2f       	mov	r24, r20
    4950:	82 50       	subi	r24, 0x02	; 2
    4952:	82 30       	cpi	r24, 0x02	; 2
    4954:	20 f0       	brcs	.+8      	; 0x495e <setAddrWindow+0x142>
    4956:	45 30       	cpi	r20, 0x05	; 5
    4958:	11 f0       	breq	.+4      	; 0x495e <setAddrWindow+0x142>
    495a:	46 30       	cpi	r20, 0x06	; 6
    495c:	49 f5       	brne	.+82     	; 0x49b0 <setAddrWindow+0x194>
      (driver == ID_ILI9327) || (driver == ID_ILI9488)) {
    uint32_t t;

    t = x1;
    495e:	cf 01       	movw	r24, r30
    4960:	aa 27       	eor	r26, r26
    4962:	97 fd       	sbrc	r25, 7
    4964:	a0 95       	com	r26
    4966:	ba 2f       	mov	r27, r26
    t <<= 16;
    4968:	dc 01       	movw	r26, r24
    496a:	99 27       	eor	r25, r25
    496c:	88 27       	eor	r24, r24
    t |= x2;
    writeRegister32(ILI9341_COLADDRSET, t);  // HX8357D uses same registers!
    496e:	a6 01       	movw	r20, r12
    4970:	66 27       	eor	r22, r22
    4972:	57 fd       	sbrc	r21, 7
    4974:	60 95       	com	r22
    4976:	76 2f       	mov	r23, r22
    4978:	48 2b       	or	r20, r24
    497a:	59 2b       	or	r21, r25
    497c:	6a 2b       	or	r22, r26
    497e:	7b 2b       	or	r23, r27
    4980:	8a e2       	ldi	r24, 0x2A	; 42
    4982:	0e 94 e3 23 	call	0x47c6	; 0x47c6 <writeRegister32>
    t = y1;
    4986:	c7 01       	movw	r24, r14
    4988:	aa 27       	eor	r26, r26
    498a:	97 fd       	sbrc	r25, 7
    498c:	a0 95       	com	r26
    498e:	ba 2f       	mov	r27, r26
    t <<= 16;
    4990:	dc 01       	movw	r26, r24
    4992:	99 27       	eor	r25, r25
    4994:	88 27       	eor	r24, r24
    t |= y2;
    writeRegister32(ILI9341_PAGEADDRSET, t); // HX8357D uses same registers!
    4996:	a5 01       	movw	r20, r10
    4998:	66 27       	eor	r22, r22
    499a:	57 fd       	sbrc	r21, 7
    499c:	60 95       	com	r22
    499e:	76 2f       	mov	r23, r22
    49a0:	48 2b       	or	r20, r24
    49a2:	59 2b       	or	r21, r25
    49a4:	6a 2b       	or	r22, r26
    49a6:	7b 2b       	or	r23, r27
    49a8:	8b e2       	ldi	r24, 0x2B	; 43
    49aa:	0e 94 e3 23 	call	0x47c6	; 0x47c6 <writeRegister32>
    49ae:	16 c0       	rjmp	.+44     	; 0x49dc <setAddrWindow+0x1c0>

  }
#ifdef ILI_AND_MORE
   else if(driver == ID_7575) {
    49b0:	41 30       	cpi	r20, 0x01	; 1
    49b2:	a1 f4       	brne	.+40     	; 0x49dc <setAddrWindow+0x1c0>

    writeRegisterPair(HX8347G_COLADDRSTART_HI, HX8347G_COLADDRSTART_LO, x1);
    49b4:	82 e0       	ldi	r24, 0x02	; 2
    49b6:	63 e0       	ldi	r22, 0x03	; 3
    49b8:	af 01       	movw	r20, r30
    49ba:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <writeRegisterPair>
    writeRegisterPair(HX8347G_ROWADDRSTART_HI, HX8347G_ROWADDRSTART_LO, y1);
    49be:	86 e0       	ldi	r24, 0x06	; 6
    49c0:	67 e0       	ldi	r22, 0x07	; 7
    49c2:	a7 01       	movw	r20, r14
    49c4:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <writeRegisterPair>
    writeRegisterPair(HX8347G_COLADDREND_HI  , HX8347G_COLADDREND_LO  , x2);
    49c8:	84 e0       	ldi	r24, 0x04	; 4
    49ca:	65 e0       	ldi	r22, 0x05	; 5
    49cc:	a6 01       	movw	r20, r12
    49ce:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <writeRegisterPair>
    writeRegisterPair(HX8347G_ROWADDREND_HI  , HX8347G_ROWADDREND_LO  , y2);
    49d2:	88 e0       	ldi	r24, 0x08	; 8
    49d4:	69 e0       	ldi	r22, 0x09	; 9
    49d6:	a5 01       	movw	r20, r10
    49d8:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <writeRegisterPair>
  }
#endif
  CS_IDLE;
    49dc:	aa 9a       	sbi	0x15, 2	; 21
}
    49de:	df 91       	pop	r29
    49e0:	cf 91       	pop	r28
    49e2:	1f 91       	pop	r17
    49e4:	0f 91       	pop	r16
    49e6:	ff 90       	pop	r15
    49e8:	ef 90       	pop	r14
    49ea:	df 90       	pop	r13
    49ec:	cf 90       	pop	r12
    49ee:	bf 90       	pop	r11
    49f0:	af 90       	pop	r10
    49f2:	9f 90       	pop	r9
    49f4:	8f 90       	pop	r8
    49f6:	08 95       	ret

000049f8 <setRotation>:
  }
  CS_IDLE;
}
//*****************************************************

void setRotation(uint8_t x) {
    49f8:	98 2f       	mov	r25, r24
         if( busy ) return;
    49fa:	80 91 8e 00 	lds	r24, 0x008E
    49fe:	88 23       	and	r24, r24
    4a00:	09 f0       	breq	.+2      	; 0x4a04 <setRotation+0xc>
    4a02:	f3 c0       	rjmp	.+486    	; 0x4bea <setRotation+0x1f2>

  // Call parent rotation func first -- sets up rotation flags, etc.
	rotation = (x & 3);
    4a04:	29 2f       	mov	r18, r25
    4a06:	23 70       	andi	r18, 0x03	; 3
    4a08:	20 93 47 01 	sts	0x0147, r18

    switch(rotation) {
    4a0c:	21 30       	cpi	r18, 0x01	; 1
    4a0e:	81 f0       	breq	.+32     	; 0x4a30 <setRotation+0x38>
    4a10:	21 30       	cpi	r18, 0x01	; 1
    4a12:	28 f0       	brcs	.+10     	; 0x4a1e <setRotation+0x26>
    4a14:	22 30       	cpi	r18, 0x02	; 2
    4a16:	19 f0       	breq	.+6      	; 0x4a1e <setRotation+0x26>
    4a18:	23 30       	cpi	r18, 0x03	; 3
    4a1a:	b1 f4       	brne	.+44     	; 0x4a48 <setRotation+0x50>
    4a1c:	09 c0       	rjmp	.+18     	; 0x4a30 <setRotation+0x38>
        case 0:
        case 2:

		    _width  = TFTWIDTH;
    4a1e:	80 ef       	ldi	r24, 0xF0	; 240
    4a20:	90 e0       	ldi	r25, 0x00	; 0
    4a22:	90 93 4a 01 	sts	0x014A, r25
    4a26:	80 93 49 01 	sts	0x0149, r24
            _height = TFTHEIGHT;
    4a2a:	80 e4       	ldi	r24, 0x40	; 64
    4a2c:	91 e0       	ldi	r25, 0x01	; 1
    4a2e:	08 c0       	rjmp	.+16     	; 0x4a40 <setRotation+0x48>
            break;
        case 1:
        case 3:

		    _width  = TFTHEIGHT;
    4a30:	80 e4       	ldi	r24, 0x40	; 64
    4a32:	91 e0       	ldi	r25, 0x01	; 1
    4a34:	90 93 4a 01 	sts	0x014A, r25
    4a38:	80 93 49 01 	sts	0x0149, r24
            _height = TFTWIDTH;
    4a3c:	80 ef       	ldi	r24, 0xF0	; 240
    4a3e:	90 e0       	ldi	r25, 0x00	; 0
    4a40:	90 93 50 01 	sts	0x0150, r25
    4a44:	80 93 4f 01 	sts	0x014F, r24

  // Then perform hardware-specific rotation operations...



  CS_ACTIVE;
    4a48:	aa 98       	cbi	0x15, 2	; 21
  if((driver == ID_932X) || (driver == ID_S6D0154)){
    4a4a:	80 91 89 00 	lds	r24, 0x0089
    4a4e:	88 23       	and	r24, r24
    4a50:	11 f0       	breq	.+4      	; 0x4a56 <setRotation+0x5e>
    4a52:	84 30       	cpi	r24, 0x04	; 4
    4a54:	39 f5       	brne	.+78     	; 0x4aa4 <setRotation+0xac>

    uint16_t t;
    switch(rotation) {
    4a56:	22 30       	cpi	r18, 0x02	; 2
    4a58:	51 f0       	breq	.+20     	; 0x4a6e <setRotation+0x76>
    4a5a:	23 30       	cpi	r18, 0x03	; 3
    4a5c:	59 f0       	breq	.+22     	; 0x4a74 <setRotation+0x7c>
    4a5e:	21 30       	cpi	r18, 0x01	; 1
    4a60:	19 f4       	brne	.+6      	; 0x4a68 <setRotation+0x70>
    4a62:	68 e2       	ldi	r22, 0x28	; 40
    4a64:	70 e1       	ldi	r23, 0x10	; 16
    4a66:	08 c0       	rjmp	.+16     	; 0x4a78 <setRotation+0x80>
    4a68:	60 e3       	ldi	r22, 0x30	; 48
    4a6a:	70 e1       	ldi	r23, 0x10	; 16
    4a6c:	05 c0       	rjmp	.+10     	; 0x4a78 <setRotation+0x80>
    4a6e:	60 e0       	ldi	r22, 0x00	; 0
    4a70:	70 e1       	ldi	r23, 0x10	; 16
    4a72:	02 c0       	rjmp	.+4      	; 0x4a78 <setRotation+0x80>
     default: t = 0x1030; break;
     case 1 : t = 0x1028; break;
     case 2 : t = 0x1000; break;
    4a74:	68 e1       	ldi	r22, 0x18	; 24
    4a76:	70 e1       	ldi	r23, 0x10	; 16
     case 3 : t = 0x1018; break;
    }
   writeRegister16(0x0003, t ); // MADCTL
    4a78:	83 e0       	ldi	r24, 0x03	; 3
    4a7a:	90 e0       	ldi	r25, 0x00	; 0
    4a7c:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <writeRegister16>
    // For 932X, init default full-screen address window:
    setAddrWindow(0, 0, _width - 1, _height - 1); // CS_IDLE happens here
    4a80:	40 91 49 01 	lds	r20, 0x0149
    4a84:	50 91 4a 01 	lds	r21, 0x014A
    4a88:	41 50       	subi	r20, 0x01	; 1
    4a8a:	50 40       	sbci	r21, 0x00	; 0
    4a8c:	20 91 4f 01 	lds	r18, 0x014F
    4a90:	30 91 50 01 	lds	r19, 0x0150
    4a94:	21 50       	subi	r18, 0x01	; 1
    4a96:	30 40       	sbci	r19, 0x00	; 0
    4a98:	80 e0       	ldi	r24, 0x00	; 0
    4a9a:	90 e0       	ldi	r25, 0x00	; 0
    4a9c:	60 e0       	ldi	r22, 0x00	; 0
    4a9e:	70 e0       	ldi	r23, 0x00	; 0
    4aa0:	0e 94 0e 24 	call	0x481c	; 0x481c <setAddrWindow>

  }

   if (driver == ID_9341) {
    4aa4:	80 91 89 00 	lds	r24, 0x0089
    4aa8:	82 30       	cpi	r24, 0x02	; 2
    4aaa:	49 f5       	brne	.+82     	; 0x4afe <setRotation+0x106>
   // MEME, HX8357D uses same registers as 9341 but different values
    uint16_t t= ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR;

    switch (rotation) {
    4aac:	80 91 47 01 	lds	r24, 0x0147
    4ab0:	82 30       	cpi	r24, 0x02	; 2
    4ab2:	29 f0       	breq	.+10     	; 0x4abe <setRotation+0xc6>
    4ab4:	83 30       	cpi	r24, 0x03	; 3
    4ab6:	49 f0       	breq	.+18     	; 0x4aca <setRotation+0xd2>
    4ab8:	81 30       	cpi	r24, 0x01	; 1
    4aba:	21 f4       	brne	.+8      	; 0x4ac4 <setRotation+0xcc>
    4abc:	09 c0       	rjmp	.+18     	; 0x4ad0 <setRotation+0xd8>
    4abe:	68 e4       	ldi	r22, 0x48	; 72
    4ac0:	70 e0       	ldi	r23, 0x00	; 0
    4ac2:	08 c0       	rjmp	.+16     	; 0x4ad4 <setRotation+0xdc>
    4ac4:	68 e8       	ldi	r22, 0x88	; 136
    4ac6:	70 e0       	ldi	r23, 0x00	; 0
    4ac8:	05 c0       	rjmp	.+10     	; 0x4ad4 <setRotation+0xdc>
    4aca:	68 e2       	ldi	r22, 0x28	; 40
    4acc:	70 e0       	ldi	r23, 0x00	; 0
    4ace:	02 c0       	rjmp	.+4      	; 0x4ad4 <setRotation+0xdc>
     case 2:
     t = ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR;
     break;
     case 3:
     t = ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR;
     break;
    4ad0:	68 ee       	ldi	r22, 0xE8	; 232
    4ad2:	70 e0       	ldi	r23, 0x00	; 0
     break;
     case 1:
     t = ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR;
     break;
  }
   writeRegister8(ILI9341_MADCTL, t ); // MADCTL
    4ad4:	86 e3       	ldi	r24, 0x36	; 54
    4ad6:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <writeRegister8>
   // For 9341, init default full-screen address window:
   setAddrWindow(0, 0, _width - 1, _height - 1); // CS_IDLE happens here
    4ada:	40 91 49 01 	lds	r20, 0x0149
    4ade:	50 91 4a 01 	lds	r21, 0x014A
    4ae2:	41 50       	subi	r20, 0x01	; 1
    4ae4:	50 40       	sbci	r21, 0x00	; 0
    4ae6:	20 91 4f 01 	lds	r18, 0x014F
    4aea:	30 91 50 01 	lds	r19, 0x0150
    4aee:	21 50       	subi	r18, 0x01	; 1
    4af0:	30 40       	sbci	r19, 0x00	; 0
    4af2:	80 e0       	ldi	r24, 0x00	; 0
    4af4:	90 e0       	ldi	r25, 0x00	; 0
    4af6:	60 e0       	ldi	r22, 0x00	; 0
    4af8:	70 e0       	ldi	r23, 0x00	; 0
    4afa:	0e 94 0e 24 	call	0x481c	; 0x481c <setAddrWindow>
  }

    if(driver == ID_7575) {
    4afe:	80 91 89 00 	lds	r24, 0x0089
    4b02:	81 30       	cpi	r24, 0x01	; 1
    4b04:	a1 f4       	brne	.+40     	; 0x4b2e <setRotation+0x136>

    uint8_t t;
    switch(rotation) {
    4b06:	80 91 47 01 	lds	r24, 0x0147
    4b0a:	82 30       	cpi	r24, 0x02	; 2
    4b0c:	41 f0       	breq	.+16     	; 0x4b1e <setRotation+0x126>
    4b0e:	83 30       	cpi	r24, 0x03	; 3
    4b10:	41 f0       	breq	.+16     	; 0x4b22 <setRotation+0x12a>
    4b12:	81 30       	cpi	r24, 0x01	; 1
    4b14:	11 f4       	brne	.+4      	; 0x4b1a <setRotation+0x122>
    4b16:	60 e6       	ldi	r22, 0x60	; 96
    4b18:	05 c0       	rjmp	.+10     	; 0x4b24 <setRotation+0x12c>
    4b1a:	60 e0       	ldi	r22, 0x00	; 0
    4b1c:	03 c0       	rjmp	.+6      	; 0x4b24 <setRotation+0x12c>
    4b1e:	60 ec       	ldi	r22, 0xC0	; 192
    4b20:	01 c0       	rjmp	.+2      	; 0x4b24 <setRotation+0x12c>
     default: t = 0   ; break;
     case 1 : t = 0x60; break;
     case 2 : t = 0xc0; break;
    4b22:	60 ea       	ldi	r22, 0xA0	; 160
     case 3 : t = 0xa0; break;
    }
    writeRegister8(HX8347G_MEMACCESS, t);
    4b24:	86 e1       	ldi	r24, 0x16	; 22
    4b26:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <writeRegister8>
    // 7575 has to set the address window on most drawing operations.
    // drawPixel() cheats by setting only the top left...by default,
    // the lower right is always reset to the corner.
    setLR(); // CS_IDLE happens here
    4b2a:	0e 94 25 22 	call	0x444a	; 0x444a <setLR>
  }
   if (driver == ID_HX8357D) {
    4b2e:	80 91 89 00 	lds	r24, 0x0089
    4b32:	83 30       	cpi	r24, 0x03	; 3
    4b34:	41 f5       	brne	.+80     	; 0x4b86 <setRotation+0x18e>
    // MEME, HX8357D uses same registers as 9341 but different values
    uint16_t t = 0;

    switch (rotation) {
    4b36:	80 91 47 01 	lds	r24, 0x0147
    4b3a:	81 30       	cpi	r24, 0x01	; 1
    4b3c:	69 f0       	breq	.+26     	; 0x4b58 <setRotation+0x160>
    4b3e:	81 30       	cpi	r24, 0x01	; 1
    4b40:	40 f0       	brcs	.+16     	; 0x4b52 <setRotation+0x15a>
    4b42:	83 30       	cpi	r24, 0x03	; 3
    4b44:	19 f4       	brne	.+6      	; 0x4b4c <setRotation+0x154>
    4b46:	60 e6       	ldi	r22, 0x60	; 96
    4b48:	70 e0       	ldi	r23, 0x00	; 0
    4b4a:	08 c0       	rjmp	.+16     	; 0x4b5c <setRotation+0x164>
    4b4c:	60 e0       	ldi	r22, 0x00	; 0
    4b4e:	70 e0       	ldi	r23, 0x00	; 0
    4b50:	05 c0       	rjmp	.+10     	; 0x4b5c <setRotation+0x164>
    4b52:	60 ec       	ldi	r22, 0xC0	; 192
    4b54:	70 e0       	ldi	r23, 0x00	; 0
    4b56:	02 c0       	rjmp	.+4      	; 0x4b5c <setRotation+0x164>
      case 3:
        t = HX8357B_MADCTL_MX | HX8357B_MADCTL_MV | HX8357B_MADCTL_RGB;
        break;
      case 0:
        t = HX8357B_MADCTL_MX | HX8357B_MADCTL_MY | HX8357B_MADCTL_RGB;
        break;
    4b58:	60 ea       	ldi	r22, 0xA0	; 160
    4b5a:	70 e0       	ldi	r23, 0x00	; 0
      case 1:
        t = HX8357B_MADCTL_MY | HX8357B_MADCTL_MV | HX8357B_MADCTL_RGB;
        break;
    }
    writeRegister8(ILI9341_MADCTL, t ); // MADCTL
    4b5c:	86 e3       	ldi	r24, 0x36	; 54
    4b5e:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <writeRegister8>
    // For 8357, init default full-screen address window:
    setAddrWindow(0, 0, _width - 1, _height - 1); // CS_IDLE happens here
    4b62:	40 91 49 01 	lds	r20, 0x0149
    4b66:	50 91 4a 01 	lds	r21, 0x014A
    4b6a:	41 50       	subi	r20, 0x01	; 1
    4b6c:	50 40       	sbci	r21, 0x00	; 0
    4b6e:	20 91 4f 01 	lds	r18, 0x014F
    4b72:	30 91 50 01 	lds	r19, 0x0150
    4b76:	21 50       	subi	r18, 0x01	; 1
    4b78:	30 40       	sbci	r19, 0x00	; 0
    4b7a:	80 e0       	ldi	r24, 0x00	; 0
    4b7c:	90 e0       	ldi	r25, 0x00	; 0
    4b7e:	60 e0       	ldi	r22, 0x00	; 0
    4b80:	70 e0       	ldi	r23, 0x00	; 0
    4b82:	0e 94 0e 24 	call	0x481c	; 0x481c <setAddrWindow>
  }

   if (driver ==ID_ILI9327) {
    4b86:	80 91 89 00 	lds	r24, 0x0089
    4b8a:	85 30       	cpi	r24, 0x05	; 5
    4b8c:	71 f5       	brne	.+92     	; 0x4bea <setRotation+0x1f2>
	   // MEME, HX8357D uses same registers as 9341 but different values
	   uint16_t t = 0;

	   switch (rotation) {
    4b8e:	80 91 47 01 	lds	r24, 0x0147
    4b92:	81 30       	cpi	r24, 0x01	; 1
    4b94:	99 f0       	breq	.+38     	; 0x4bbc <setRotation+0x1c4>
    4b96:	81 30       	cpi	r24, 0x01	; 1
    4b98:	70 f0       	brcs	.+28     	; 0x4bb6 <setRotation+0x1be>
    4b9a:	82 30       	cpi	r24, 0x02	; 2
    4b9c:	19 f0       	breq	.+6      	; 0x4ba4 <setRotation+0x1ac>
    4b9e:	83 30       	cpi	r24, 0x03	; 3
    4ba0:	21 f4       	brne	.+8      	; 0x4baa <setRotation+0x1b2>
    4ba2:	06 c0       	rjmp	.+12     	; 0x4bb0 <setRotation+0x1b8>
    4ba4:	68 e8       	ldi	r22, 0x88	; 136
    4ba6:	70 e0       	ldi	r23, 0x00	; 0
    4ba8:	0b c0       	rjmp	.+22     	; 0x4bc0 <setRotation+0x1c8>
    4baa:	60 e0       	ldi	r22, 0x00	; 0
    4bac:	70 e0       	ldi	r23, 0x00	; 0
    4bae:	08 c0       	rjmp	.+16     	; 0x4bc0 <setRotation+0x1c8>
    4bb0:	68 ee       	ldi	r22, 0xE8	; 232
    4bb2:	70 e0       	ldi	r23, 0x00	; 0
    4bb4:	05 c0       	rjmp	.+10     	; 0x4bc0 <setRotation+0x1c8>
		   case 2:
		   t =  ILI9341_MADCTL_BGR | 0x80;
		   break;
		   case 3:
		   t =  ILI9341_MADCTL_BGR | 0xE0;
		   break;
    4bb6:	6a e0       	ldi	r22, 0x0A	; 10
    4bb8:	70 e0       	ldi	r23, 0x00	; 0
    4bba:	02 c0       	rjmp	.+4      	; 0x4bc0 <setRotation+0x1c8>
		   case 0:
		   t =  ILI9341_MADCTL_BGR | 0x02;
		   break;
    4bbc:	68 e2       	ldi	r22, 0x28	; 40
    4bbe:	70 e0       	ldi	r23, 0x00	; 0
		   case 1:
		   t =  ILI9341_MADCTL_BGR | 0x20;
		   break;
	   }
	   writeRegister8(ILI9341_MADCTL, t); // MADCTL
    4bc0:	86 e3       	ldi	r24, 0x36	; 54
    4bc2:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <writeRegister8>
	   // For 9341, init default full-screen address window:
	   setAddrWindow(0, 0, _width - 1, _height - 1); // CS_IDLE happens here
    4bc6:	40 91 49 01 	lds	r20, 0x0149
    4bca:	50 91 4a 01 	lds	r21, 0x014A
    4bce:	41 50       	subi	r20, 0x01	; 1
    4bd0:	50 40       	sbci	r21, 0x00	; 0
    4bd2:	20 91 4f 01 	lds	r18, 0x014F
    4bd6:	30 91 50 01 	lds	r19, 0x0150
    4bda:	21 50       	subi	r18, 0x01	; 1
    4bdc:	30 40       	sbci	r19, 0x00	; 0
    4bde:	80 e0       	ldi	r24, 0x00	; 0
    4be0:	90 e0       	ldi	r25, 0x00	; 0
    4be2:	60 e0       	ldi	r22, 0x00	; 0
    4be4:	70 e0       	ldi	r23, 0x00	; 0
    4be6:	0e 94 0e 24 	call	0x481c	; 0x481c <setAddrWindow>
    4bea:	08 95       	ret

00004bec <drawPixel>:
  else
	  setLR();
}
//*****************************************************

void drawPixel(int16_t x, int16_t y, uint16_t color) {
    4bec:	ef 92       	push	r14
    4bee:	ff 92       	push	r15
    4bf0:	0f 93       	push	r16
    4bf2:	1f 93       	push	r17
    4bf4:	cf 93       	push	r28
    4bf6:	df 93       	push	r29
    4bf8:	ec 01       	movw	r28, r24
    4bfa:	8b 01       	movw	r16, r22
    4bfc:	7a 01       	movw	r14, r20
  if( busy ) return;
    4bfe:	80 91 8e 00 	lds	r24, 0x008E
    4c02:	88 23       	and	r24, r24
    4c04:	09 f0       	breq	.+2      	; 0x4c08 <drawPixel+0x1c>
    4c06:	8c c0       	rjmp	.+280    	; 0x4d20 <drawPixel+0x134>
  // Clip
  if((x < 0) || (y < 0) || (x >= _width) || (y >= _height)) return;
    4c08:	d7 fd       	sbrc	r29, 7
    4c0a:	8a c0       	rjmp	.+276    	; 0x4d20 <drawPixel+0x134>
    4c0c:	77 fd       	sbrc	r23, 7
    4c0e:	88 c0       	rjmp	.+272    	; 0x4d20 <drawPixel+0x134>
    4c10:	40 91 49 01 	lds	r20, 0x0149
    4c14:	50 91 4a 01 	lds	r21, 0x014A
    4c18:	c4 17       	cp	r28, r20
    4c1a:	d5 07       	cpc	r29, r21
    4c1c:	0c f0       	brlt	.+2      	; 0x4c20 <drawPixel+0x34>
    4c1e:	80 c0       	rjmp	.+256    	; 0x4d20 <drawPixel+0x134>
    4c20:	20 91 4f 01 	lds	r18, 0x014F
    4c24:	30 91 50 01 	lds	r19, 0x0150
    4c28:	62 17       	cp	r22, r18
    4c2a:	73 07       	cpc	r23, r19
    4c2c:	0c f0       	brlt	.+2      	; 0x4c30 <drawPixel+0x44>
    4c2e:	78 c0       	rjmp	.+240    	; 0x4d20 <drawPixel+0x134>

  CS_ACTIVE;
    4c30:	aa 98       	cbi	0x15, 2	; 21
  if((driver == ID_932X) || (driver == ID_S6D0154)) {
    4c32:	90 91 89 00 	lds	r25, 0x0089
    4c36:	99 23       	and	r25, r25
    4c38:	11 f0       	breq	.+4      	; 0x4c3e <drawPixel+0x52>
    4c3a:	94 30       	cpi	r25, 0x04	; 4
    4c3c:	91 f5       	brne	.+100    	; 0x4ca2 <drawPixel+0xb6>
    int16_t t;
    switch(rotation) {
    4c3e:	80 91 47 01 	lds	r24, 0x0147
    4c42:	82 30       	cpi	r24, 0x02	; 2
    4c44:	59 f0       	breq	.+22     	; 0x4c5c <drawPixel+0x70>
    4c46:	83 30       	cpi	r24, 0x03	; 3
    4c48:	b1 f0       	breq	.+44     	; 0x4c76 <drawPixel+0x8a>
    4c4a:	81 30       	cpi	r24, 0x01	; 1
    4c4c:	d1 f4       	brne	.+52     	; 0x4c82 <drawPixel+0x96>
     case 1:
      t = x;
      x = TFTWIDTH  - 1 - y;
    4c4e:	8f ee       	ldi	r24, 0xEF	; 239
    4c50:	90 e0       	ldi	r25, 0x00	; 0
    4c52:	80 1b       	sub	r24, r16
    4c54:	91 0b       	sbc	r25, r17
    4c56:	8e 01       	movw	r16, r28
    4c58:	ec 01       	movw	r28, r24
    4c5a:	13 c0       	rjmp	.+38     	; 0x4c82 <drawPixel+0x96>
      y = t;
      break;
     case 2:
      x = TFTWIDTH  - 1 - x;
    4c5c:	8f ee       	ldi	r24, 0xEF	; 239
    4c5e:	90 e0       	ldi	r25, 0x00	; 0
    4c60:	9c 01       	movw	r18, r24
    4c62:	2c 1b       	sub	r18, r28
    4c64:	3d 0b       	sbc	r19, r29
    4c66:	e9 01       	movw	r28, r18
      y = TFTHEIGHT - 1 - y;
    4c68:	8f e3       	ldi	r24, 0x3F	; 63
    4c6a:	91 e0       	ldi	r25, 0x01	; 1
    4c6c:	9c 01       	movw	r18, r24
    4c6e:	20 1b       	sub	r18, r16
    4c70:	31 0b       	sbc	r19, r17
    4c72:	89 01       	movw	r16, r18
    4c74:	06 c0       	rjmp	.+12     	; 0x4c82 <drawPixel+0x96>
      break;
     case 3:
      t = x;
      x = y;
      y = TFTHEIGHT - 1 - t;
    4c76:	8f e3       	ldi	r24, 0x3F	; 63
    4c78:	91 e0       	ldi	r25, 0x01	; 1
    4c7a:	8c 1b       	sub	r24, r28
    4c7c:	9d 0b       	sbc	r25, r29
    4c7e:	e8 01       	movw	r28, r16
    4c80:	8c 01       	movw	r16, r24
      break;
    }
    writeRegister16(0x0020, x);
    4c82:	80 e2       	ldi	r24, 0x20	; 32
    4c84:	90 e0       	ldi	r25, 0x00	; 0
    4c86:	be 01       	movw	r22, r28
    4c88:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <writeRegister16>
    writeRegister16(0x0021, y);
    4c8c:	81 e2       	ldi	r24, 0x21	; 33
    4c8e:	90 e0       	ldi	r25, 0x00	; 0
    4c90:	b8 01       	movw	r22, r16
    4c92:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <writeRegister16>
    writeRegister16(0x0022, color);
    4c96:	82 e2       	ldi	r24, 0x22	; 34
    4c98:	90 e0       	ldi	r25, 0x00	; 0
    4c9a:	b7 01       	movw	r22, r14
    4c9c:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <writeRegister16>
    4ca0:	3e c0       	rjmp	.+124    	; 0x4d1e <drawPixel+0x132>

  } else if(driver == ID_7575) {
    4ca2:	91 30       	cpi	r25, 0x01	; 1
    4ca4:	f9 f4       	brne	.+62     	; 0x4ce4 <drawPixel+0xf8>

    uint8_t hi, lo;
    switch(rotation) {
    4ca6:	80 91 47 01 	lds	r24, 0x0147
    4caa:	82 30       	cpi	r24, 0x02	; 2
    4cac:	41 f0       	breq	.+16     	; 0x4cbe <drawPixel+0xd2>
    4cae:	83 30       	cpi	r24, 0x03	; 3
    4cb0:	41 f0       	breq	.+16     	; 0x4cc2 <drawPixel+0xd6>
    4cb2:	81 30       	cpi	r24, 0x01	; 1
    4cb4:	11 f4       	brne	.+4      	; 0x4cba <drawPixel+0xce>
    4cb6:	60 e6       	ldi	r22, 0x60	; 96
    4cb8:	05 c0       	rjmp	.+10     	; 0x4cc4 <drawPixel+0xd8>
    4cba:	60 e0       	ldi	r22, 0x00	; 0
    4cbc:	03 c0       	rjmp	.+6      	; 0x4cc4 <drawPixel+0xd8>
    4cbe:	60 ec       	ldi	r22, 0xC0	; 192
    4cc0:	01 c0       	rjmp	.+2      	; 0x4cc4 <drawPixel+0xd8>
     default: lo = 0   ; break;
     case 1 : lo = 0x60; break;
     case 2 : lo = 0xc0; break;
    4cc2:	60 ea       	ldi	r22, 0xA0	; 160
     case 3 : lo = 0xa0; break;
    }
    writeRegister8(   HX8347G_MEMACCESS      , lo);
    4cc4:	86 e1       	ldi	r24, 0x16	; 22
    4cc6:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <writeRegister8>
    // Only upper-left is set -- bottom-right is full screen default
    writeRegisterPair(HX8347G_COLADDRSTART_HI, HX8347G_COLADDRSTART_LO, x);
    4cca:	82 e0       	ldi	r24, 0x02	; 2
    4ccc:	63 e0       	ldi	r22, 0x03	; 3
    4cce:	ae 01       	movw	r20, r28
    4cd0:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <writeRegisterPair>
    writeRegisterPair(HX8347G_ROWADDRSTART_HI, HX8347G_ROWADDRSTART_LO, y);
    4cd4:	86 e0       	ldi	r24, 0x06	; 6
    4cd6:	67 e0       	ldi	r22, 0x07	; 7
    4cd8:	a8 01       	movw	r20, r16
    4cda:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <writeRegisterPair>
    hi = color >> 8; lo = color;
    CD_COMMAND; write8(0x22); CD_DATA; write8(hi); write8(lo);
    4cde:	ab 98       	cbi	0x15, 3	; 21
    4ce0:	82 e2       	ldi	r24, 0x22	; 34
    4ce2:	13 c0       	rjmp	.+38     	; 0x4d0a <drawPixel+0x11e>

  } else if ((driver == ID_9341) || (driver == ID_HX8357D) || (driver == ID_ILI9327) || (driver == ID_ILI9488)) {
    4ce4:	89 2f       	mov	r24, r25
    4ce6:	82 50       	subi	r24, 0x02	; 2
    4ce8:	82 30       	cpi	r24, 0x02	; 2
    4cea:	20 f0       	brcs	.+8      	; 0x4cf4 <drawPixel+0x108>
    4cec:	95 30       	cpi	r25, 0x05	; 5
    4cee:	11 f0       	breq	.+4      	; 0x4cf4 <drawPixel+0x108>
    4cf0:	96 30       	cpi	r25, 0x06	; 6
    4cf2:	a9 f4       	brne	.+42     	; 0x4d1e <drawPixel+0x132>
    setAddrWindow(x, y, _width-1, _height-1);
    4cf4:	41 50       	subi	r20, 0x01	; 1
    4cf6:	50 40       	sbci	r21, 0x00	; 0
    4cf8:	21 50       	subi	r18, 0x01	; 1
    4cfa:	30 40       	sbci	r19, 0x00	; 0
    4cfc:	ce 01       	movw	r24, r28
    4cfe:	b8 01       	movw	r22, r16
    4d00:	0e 94 0e 24 	call	0x481c	; 0x481c <setAddrWindow>
    CS_ACTIVE;
    4d04:	aa 98       	cbi	0x15, 2	; 21
    CD_COMMAND;
    4d06:	ab 98       	cbi	0x15, 3	; 21
    write8(0x2C);
    4d08:	8c e2       	ldi	r24, 0x2C	; 44
    4d0a:	8b bb       	out	0x1b, r24	; 27
    4d0c:	ac 98       	cbi	0x15, 4	; 21
    4d0e:	ac 9a       	sbi	0x15, 4	; 21
    CD_DATA;
    4d10:	ab 9a       	sbi	0x15, 3	; 21
    write8(color >> 8); write8(color);
    4d12:	fb ba       	out	0x1b, r15	; 27
    4d14:	ac 98       	cbi	0x15, 4	; 21
    4d16:	ac 9a       	sbi	0x15, 4	; 21
    4d18:	eb ba       	out	0x1b, r14	; 27
    4d1a:	ac 98       	cbi	0x15, 4	; 21
    4d1c:	ac 9a       	sbi	0x15, 4	; 21
	//write8(0x22);
	//CD_DATA;
	//write8(color >> 8); write8(color);
 // }

  CS_IDLE;
    4d1e:	aa 9a       	sbi	0x15, 2	; 21
}
    4d20:	df 91       	pop	r29
    4d22:	cf 91       	pop	r28
    4d24:	1f 91       	pop	r17
    4d26:	0f 91       	pop	r16
    4d28:	ff 90       	pop	r15
    4d2a:	ef 90       	pop	r14
    4d2c:	08 95       	ret

00004d2e <fillRect>:
}
//*****************************************************


void fillRect(int16_t x1, int16_t y1, int16_t w, int16_t h,
  uint16_t fillcolor) {
    4d2e:	af 92       	push	r10
    4d30:	bf 92       	push	r11
    4d32:	cf 92       	push	r12
    4d34:	df 92       	push	r13
    4d36:	ef 92       	push	r14
    4d38:	ff 92       	push	r15
    4d3a:	0f 93       	push	r16
    4d3c:	1f 93       	push	r17
    4d3e:	cf 93       	push	r28
    4d40:	df 93       	push	r29
    4d42:	7a 01       	movw	r14, r20
    4d44:	69 01       	movw	r12, r18
    4d46:	58 01       	movw	r10, r16
  int16_t  x2, y2;
  // Initial off-screen clipping
  if( (w            <= 0     ) ||  (h             <= 0      ) ||
    4d48:	14 16       	cp	r1, r20
    4d4a:	15 06       	cpc	r1, r21
    4d4c:	0c f0       	brlt	.+2      	; 0x4d50 <fillRect+0x22>
    4d4e:	6e c0       	rjmp	.+220    	; 0x4e2c <fillRect+0xfe>
    4d50:	12 16       	cp	r1, r18
    4d52:	13 06       	cpc	r1, r19
    4d54:	0c f0       	brlt	.+2      	; 0x4d58 <fillRect+0x2a>
    4d56:	6a c0       	rjmp	.+212    	; 0x4e2c <fillRect+0xfe>
    4d58:	e0 91 49 01 	lds	r30, 0x0149
    4d5c:	f0 91 4a 01 	lds	r31, 0x014A
    4d60:	8e 17       	cp	r24, r30
    4d62:	9f 07       	cpc	r25, r31
    4d64:	0c f0       	brlt	.+2      	; 0x4d68 <fillRect+0x3a>
    4d66:	62 c0       	rjmp	.+196    	; 0x4e2c <fillRect+0xfe>
    4d68:	a0 91 4f 01 	lds	r26, 0x014F
    4d6c:	b0 91 50 01 	lds	r27, 0x0150
    4d70:	6a 17       	cp	r22, r26
    4d72:	7b 07       	cpc	r23, r27
    4d74:	0c f0       	brlt	.+2      	; 0x4d78 <fillRect+0x4a>
    4d76:	5a c0       	rjmp	.+180    	; 0x4e2c <fillRect+0xfe>
    4d78:	8a 01       	movw	r16, r20
    4d7a:	08 0f       	add	r16, r24
    4d7c:	19 1f       	adc	r17, r25
    4d7e:	a8 01       	movw	r20, r16
    4d80:	41 50       	subi	r20, 0x01	; 1
    4d82:	50 40       	sbci	r21, 0x00	; 0
    4d84:	57 fd       	sbrc	r21, 7
    4d86:	52 c0       	rjmp	.+164    	; 0x4e2c <fillRect+0xfe>
    4d88:	e9 01       	movw	r28, r18
    4d8a:	c6 0f       	add	r28, r22
    4d8c:	d7 1f       	adc	r29, r23
    4d8e:	9e 01       	movw	r18, r28
    4d90:	21 50       	subi	r18, 0x01	; 1
    4d92:	30 40       	sbci	r19, 0x00	; 0
    4d94:	37 fd       	sbrc	r19, 7
    4d96:	4a c0       	rjmp	.+148    	; 0x4e2c <fillRect+0xfe>
      (x1           >= _width) ||  (y1            >= _height) ||
     ((x2 = x1+w-1) <  0     ) || ((y2  = y1+h-1) <  0      )) return;
  if(x1 < 0) { // Clip left
    4d98:	97 fd       	sbrc	r25, 7
    4d9a:	02 c0       	rjmp	.+4      	; 0x4da0 <fillRect+0x72>
    4d9c:	87 01       	movw	r16, r14
    4d9e:	02 c0       	rjmp	.+4      	; 0x4da4 <fillRect+0x76>
    4da0:	80 e0       	ldi	r24, 0x00	; 0
    4da2:	90 e0       	ldi	r25, 0x00	; 0
    w += x1;
    x1 = 0;
  }
  if(y1 < 0) { // Clip top
    4da4:	77 fd       	sbrc	r23, 7
    4da6:	02 c0       	rjmp	.+4      	; 0x4dac <fillRect+0x7e>
    4da8:	e6 01       	movw	r28, r12
    4daa:	02 c0       	rjmp	.+4      	; 0x4db0 <fillRect+0x82>
    4dac:	60 e0       	ldi	r22, 0x00	; 0
    4dae:	70 e0       	ldi	r23, 0x00	; 0
    h += y1;
    y1 = 0;
  }
  if(x2 >= _width) { // Clip right
    4db0:	4e 17       	cp	r20, r30
    4db2:	5f 07       	cpc	r21, r31
    4db4:	34 f0       	brlt	.+12     	; 0x4dc2 <fillRect+0x94>
    x2 = _width - 1;
    4db6:	af 01       	movw	r20, r30
    4db8:	41 50       	subi	r20, 0x01	; 1
    4dba:	50 40       	sbci	r21, 0x00	; 0
    w  = x2 - x1 + 1;
    4dbc:	8f 01       	movw	r16, r30
    4dbe:	08 1b       	sub	r16, r24
    4dc0:	19 0b       	sbc	r17, r25
  }
  if(y2 >= _height) { // Clip bottom
    4dc2:	2a 17       	cp	r18, r26
    4dc4:	3b 07       	cpc	r19, r27
    4dc6:	34 f0       	brlt	.+12     	; 0x4dd4 <fillRect+0xa6>
    y2 = _height - 1;
    4dc8:	9d 01       	movw	r18, r26
    4dca:	21 50       	subi	r18, 0x01	; 1
    4dcc:	30 40       	sbci	r19, 0x00	; 0
    h  = y2 - y1 + 1;
    4dce:	ed 01       	movw	r28, r26
    4dd0:	c6 1b       	sub	r28, r22
    4dd2:	d7 0b       	sbc	r29, r23
  }

  setAddrWindow(x1, y1, x2, y2);
    4dd4:	0e 94 0e 24 	call	0x481c	; 0x481c <setAddrWindow>
  flood(fillcolor, (uint32_t)w * (uint32_t)h);
    4dd8:	be 01       	movw	r22, r28
    4dda:	88 27       	eor	r24, r24
    4ddc:	77 fd       	sbrc	r23, 7
    4dde:	80 95       	com	r24
    4de0:	98 2f       	mov	r25, r24
    4de2:	98 01       	movw	r18, r16
    4de4:	44 27       	eor	r20, r20
    4de6:	37 fd       	sbrc	r19, 7
    4de8:	40 95       	com	r20
    4dea:	54 2f       	mov	r21, r20
    4dec:	0e 94 0f 29 	call	0x521e	; 0x521e <__mulsi3>
    4df0:	ab 01       	movw	r20, r22
    4df2:	bc 01       	movw	r22, r24
    4df4:	c5 01       	movw	r24, r10
    4df6:	0e 94 40 22 	call	0x4480	; 0x4480 <flood>
  if(driver == ID_932X) setAddrWindow(0, 0, _width - 1, _height - 1);
    4dfa:	80 91 89 00 	lds	r24, 0x0089
    4dfe:	88 23       	and	r24, r24
    4e00:	99 f4       	brne	.+38     	; 0x4e28 <fillRect+0xfa>
    4e02:	40 91 49 01 	lds	r20, 0x0149
    4e06:	50 91 4a 01 	lds	r21, 0x014A
    4e0a:	41 50       	subi	r20, 0x01	; 1
    4e0c:	50 40       	sbci	r21, 0x00	; 0
    4e0e:	20 91 4f 01 	lds	r18, 0x014F
    4e12:	30 91 50 01 	lds	r19, 0x0150
    4e16:	21 50       	subi	r18, 0x01	; 1
    4e18:	30 40       	sbci	r19, 0x00	; 0
    4e1a:	80 e0       	ldi	r24, 0x00	; 0
    4e1c:	90 e0       	ldi	r25, 0x00	; 0
    4e1e:	60 e0       	ldi	r22, 0x00	; 0
    4e20:	70 e0       	ldi	r23, 0x00	; 0
    4e22:	0e 94 0e 24 	call	0x481c	; 0x481c <setAddrWindow>
    4e26:	02 c0       	rjmp	.+4      	; 0x4e2c <fillRect+0xfe>
  else
	  setLR();
    4e28:	0e 94 25 22 	call	0x444a	; 0x444a <setLR>
}
    4e2c:	df 91       	pop	r29
    4e2e:	cf 91       	pop	r28
    4e30:	1f 91       	pop	r17
    4e32:	0f 91       	pop	r16
    4e34:	ff 90       	pop	r15
    4e36:	ef 90       	pop	r14
    4e38:	df 90       	pop	r13
    4e3a:	cf 90       	pop	r12
    4e3c:	bf 90       	pop	r11
    4e3e:	af 90       	pop	r10
    4e40:	08 95       	ret

00004e42 <fillScreen>:
  flood(color, (long)TFTWIDTH * (long)TFTHEIGHT);
}
#endif
//*****************************************************

void fillScreen(uint16_t color) {
    4e42:	0f 93       	push	r16
    4e44:	1f 93       	push	r17
    4e46:	8c 01       	movw	r16, r24
    // Update in subclasses if desired!
fillRect(0, 0, _width, _height, color);
    4e48:	40 91 49 01 	lds	r20, 0x0149
    4e4c:	50 91 4a 01 	lds	r21, 0x014A
    4e50:	20 91 4f 01 	lds	r18, 0x014F
    4e54:	30 91 50 01 	lds	r19, 0x0150
    4e58:	80 e0       	ldi	r24, 0x00	; 0
    4e5a:	90 e0       	ldi	r25, 0x00	; 0
    4e5c:	60 e0       	ldi	r22, 0x00	; 0
    4e5e:	70 e0       	ldi	r23, 0x00	; 0
    4e60:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <fillRect>
//	fillRect(_width, _height, 0, 0,  color);
}
    4e64:	1f 91       	pop	r17
    4e66:	0f 91       	pop	r16
    4e68:	08 95       	ret

00004e6a <drawFastVLine>:
}
//*****************************************************


void drawFastVLine(int16_t x, int16_t y, int16_t length,   uint16_t color)
{
    4e6a:	0f 93       	push	r16
    4e6c:	1f 93       	push	r17
    4e6e:	cf 93       	push	r28
    4e70:	df 93       	push	r29
    4e72:	fc 01       	movw	r30, r24
    4e74:	89 01       	movw	r16, r18
  int16_t y2;
  // Initial off-screen clipping
  if((length <= 0      ) ||
    4e76:	14 16       	cp	r1, r20
    4e78:	15 06       	cpc	r1, r21
    4e7a:	0c f0       	brlt	.+2      	; 0x4e7e <drawFastVLine+0x14>
    4e7c:	4d c0       	rjmp	.+154    	; 0x4f18 <drawFastVLine+0xae>
    4e7e:	97 fd       	sbrc	r25, 7
    4e80:	4b c0       	rjmp	.+150    	; 0x4f18 <drawFastVLine+0xae>
    4e82:	80 91 49 01 	lds	r24, 0x0149
    4e86:	90 91 4a 01 	lds	r25, 0x014A
    4e8a:	e8 17       	cp	r30, r24
    4e8c:	f9 07       	cpc	r31, r25
    4e8e:	0c f0       	brlt	.+2      	; 0x4e92 <drawFastVLine+0x28>
    4e90:	43 c0       	rjmp	.+134    	; 0x4f18 <drawFastVLine+0xae>
    4e92:	80 91 4f 01 	lds	r24, 0x014F
    4e96:	90 91 50 01 	lds	r25, 0x0150
    4e9a:	68 17       	cp	r22, r24
    4e9c:	79 07       	cpc	r23, r25
    4e9e:	e4 f5       	brge	.+120    	; 0x4f18 <drawFastVLine+0xae>
    4ea0:	ea 01       	movw	r28, r20
    4ea2:	c6 0f       	add	r28, r22
    4ea4:	d7 1f       	adc	r29, r23
    4ea6:	9e 01       	movw	r18, r28
    4ea8:	21 50       	subi	r18, 0x01	; 1
    4eaa:	30 40       	sbci	r19, 0x00	; 0
    4eac:	37 fd       	sbrc	r19, 7
    4eae:	34 c0       	rjmp	.+104    	; 0x4f18 <drawFastVLine+0xae>
     (x      <  0      ) || ( x                  >= _width) ||
     (y      >= _height) || ((y2 = (y+length-1)) <  0     )) return;
  if(y < 0) {         // Clip top
    4eb0:	77 fd       	sbrc	r23, 7
    4eb2:	02 c0       	rjmp	.+4      	; 0x4eb8 <drawFastVLine+0x4e>
    4eb4:	ea 01       	movw	r28, r20
    4eb6:	02 c0       	rjmp	.+4      	; 0x4ebc <drawFastVLine+0x52>
    4eb8:	60 e0       	ldi	r22, 0x00	; 0
    4eba:	70 e0       	ldi	r23, 0x00	; 0
    length += y;
    y       = 0;
  }
  if(y2 >= _height) { // Clip bottom
    4ebc:	28 17       	cp	r18, r24
    4ebe:	39 07       	cpc	r19, r25
    4ec0:	34 f0       	brlt	.+12     	; 0x4ece <drawFastVLine+0x64>
    y2      = _height - 1;
    4ec2:	9c 01       	movw	r18, r24
    4ec4:	21 50       	subi	r18, 0x01	; 1
    4ec6:	30 40       	sbci	r19, 0x00	; 0
    length  = y2 - y + 1;
    4ec8:	ec 01       	movw	r28, r24
    4eca:	c6 1b       	sub	r28, r22
    4ecc:	d7 0b       	sbc	r29, r23
  }

  setAddrWindow(x, y, x, y2);
    4ece:	cf 01       	movw	r24, r30
    4ed0:	af 01       	movw	r20, r30
    4ed2:	0e 94 0e 24 	call	0x481c	; 0x481c <setAddrWindow>
  flood(color, length);
    4ed6:	ae 01       	movw	r20, r28
    4ed8:	66 27       	eor	r22, r22
    4eda:	57 fd       	sbrc	r21, 7
    4edc:	60 95       	com	r22
    4ede:	76 2f       	mov	r23, r22
    4ee0:	c8 01       	movw	r24, r16
    4ee2:	0e 94 40 22 	call	0x4480	; 0x4480 <flood>
  if(driver == ID_932X) setAddrWindow(0, 0, _width - 1, _height - 1);
    4ee6:	80 91 89 00 	lds	r24, 0x0089
    4eea:	88 23       	and	r24, r24
    4eec:	99 f4       	brne	.+38     	; 0x4f14 <drawFastVLine+0xaa>
    4eee:	40 91 49 01 	lds	r20, 0x0149
    4ef2:	50 91 4a 01 	lds	r21, 0x014A
    4ef6:	41 50       	subi	r20, 0x01	; 1
    4ef8:	50 40       	sbci	r21, 0x00	; 0
    4efa:	20 91 4f 01 	lds	r18, 0x014F
    4efe:	30 91 50 01 	lds	r19, 0x0150
    4f02:	21 50       	subi	r18, 0x01	; 1
    4f04:	30 40       	sbci	r19, 0x00	; 0
    4f06:	80 e0       	ldi	r24, 0x00	; 0
    4f08:	90 e0       	ldi	r25, 0x00	; 0
    4f0a:	60 e0       	ldi	r22, 0x00	; 0
    4f0c:	70 e0       	ldi	r23, 0x00	; 0
    4f0e:	0e 94 0e 24 	call	0x481c	; 0x481c <setAddrWindow>
    4f12:	02 c0       	rjmp	.+4      	; 0x4f18 <drawFastVLine+0xae>
  else                  setLR();
    4f14:	0e 94 25 22 	call	0x444a	; 0x444a <setLR>
}
    4f18:	df 91       	pop	r29
    4f1a:	cf 91       	pop	r28
    4f1c:	1f 91       	pop	r17
    4f1e:	0f 91       	pop	r16
    4f20:	08 95       	ret

00004f22 <drawFastHLine>:
  CS_IDLE;
}
//*****************************************************

void drawFastHLine(int16_t x, int16_t y, int16_t length,  uint16_t color)
{
    4f22:	0f 93       	push	r16
    4f24:	1f 93       	push	r17
    4f26:	cf 93       	push	r28
    4f28:	df 93       	push	r29
    4f2a:	fc 01       	movw	r30, r24
    4f2c:	db 01       	movw	r26, r22
    4f2e:	ba 01       	movw	r22, r20
    4f30:	89 01       	movw	r16, r18
  int16_t x2;

  // Initial off-screen clipping
  if((length <= 0     ) ||
    4f32:	14 16       	cp	r1, r20
    4f34:	15 06       	cpc	r1, r21
    4f36:	0c f0       	brlt	.+2      	; 0x4f3a <drawFastHLine+0x18>
    4f38:	4e c0       	rjmp	.+156    	; 0x4fd6 <drawFastHLine+0xb4>
    4f3a:	b7 fd       	sbrc	r27, 7
    4f3c:	4c c0       	rjmp	.+152    	; 0x4fd6 <drawFastHLine+0xb4>
    4f3e:	80 91 4f 01 	lds	r24, 0x014F
    4f42:	90 91 50 01 	lds	r25, 0x0150
    4f46:	a8 17       	cp	r26, r24
    4f48:	b9 07       	cpc	r27, r25
    4f4a:	0c f0       	brlt	.+2      	; 0x4f4e <drawFastHLine+0x2c>
    4f4c:	44 c0       	rjmp	.+136    	; 0x4fd6 <drawFastHLine+0xb4>
    4f4e:	80 91 49 01 	lds	r24, 0x0149
    4f52:	90 91 4a 01 	lds	r25, 0x014A
    4f56:	e8 17       	cp	r30, r24
    4f58:	f9 07       	cpc	r31, r25
    4f5a:	ec f5       	brge	.+122    	; 0x4fd6 <drawFastHLine+0xb4>
    4f5c:	ea 01       	movw	r28, r20
    4f5e:	ce 0f       	add	r28, r30
    4f60:	df 1f       	adc	r29, r31
    4f62:	ae 01       	movw	r20, r28
    4f64:	41 50       	subi	r20, 0x01	; 1
    4f66:	50 40       	sbci	r21, 0x00	; 0
    4f68:	57 fd       	sbrc	r21, 7
    4f6a:	35 c0       	rjmp	.+106    	; 0x4fd6 <drawFastHLine+0xb4>
     (y      <  0     ) || ( y                  >= _height) ||
     (x      >= _width) || ((x2 = (x+length-1)) <  0      )) return;

  if(x < 0) {        // Clip left
    4f6c:	f7 fd       	sbrc	r31, 7
    4f6e:	02 c0       	rjmp	.+4      	; 0x4f74 <drawFastHLine+0x52>
    4f70:	eb 01       	movw	r28, r22
    4f72:	02 c0       	rjmp	.+4      	; 0x4f78 <drawFastHLine+0x56>
    4f74:	e0 e0       	ldi	r30, 0x00	; 0
    4f76:	f0 e0       	ldi	r31, 0x00	; 0
    length += x;
    x       = 0;
  }
  if(x2 >= _width) { // Clip right
    4f78:	48 17       	cp	r20, r24
    4f7a:	59 07       	cpc	r21, r25
    4f7c:	34 f0       	brlt	.+12     	; 0x4f8a <drawFastHLine+0x68>
    x2      = _width - 1;
    4f7e:	ac 01       	movw	r20, r24
    4f80:	41 50       	subi	r20, 0x01	; 1
    4f82:	50 40       	sbci	r21, 0x00	; 0
    length  = x2 - x + 1;
    4f84:	ec 01       	movw	r28, r24
    4f86:	ce 1b       	sub	r28, r30
    4f88:	df 0b       	sbc	r29, r31
  }

  setAddrWindow(x, y, x2, y);
    4f8a:	cf 01       	movw	r24, r30
    4f8c:	bd 01       	movw	r22, r26
    4f8e:	9d 01       	movw	r18, r26
    4f90:	0e 94 0e 24 	call	0x481c	; 0x481c <setAddrWindow>
  flood(color, length);
    4f94:	ae 01       	movw	r20, r28
    4f96:	66 27       	eor	r22, r22
    4f98:	57 fd       	sbrc	r21, 7
    4f9a:	60 95       	com	r22
    4f9c:	76 2f       	mov	r23, r22
    4f9e:	c8 01       	movw	r24, r16
    4fa0:	0e 94 40 22 	call	0x4480	; 0x4480 <flood>
  if(driver == ID_932X) setAddrWindow(0, 0, _width - 1, _height - 1);
    4fa4:	80 91 89 00 	lds	r24, 0x0089
    4fa8:	88 23       	and	r24, r24
    4faa:	99 f4       	brne	.+38     	; 0x4fd2 <drawFastHLine+0xb0>
    4fac:	40 91 49 01 	lds	r20, 0x0149
    4fb0:	50 91 4a 01 	lds	r21, 0x014A
    4fb4:	41 50       	subi	r20, 0x01	; 1
    4fb6:	50 40       	sbci	r21, 0x00	; 0
    4fb8:	20 91 4f 01 	lds	r18, 0x014F
    4fbc:	30 91 50 01 	lds	r19, 0x0150
    4fc0:	21 50       	subi	r18, 0x01	; 1
    4fc2:	30 40       	sbci	r19, 0x00	; 0
    4fc4:	80 e0       	ldi	r24, 0x00	; 0
    4fc6:	90 e0       	ldi	r25, 0x00	; 0
    4fc8:	60 e0       	ldi	r22, 0x00	; 0
    4fca:	70 e0       	ldi	r23, 0x00	; 0
    4fcc:	0e 94 0e 24 	call	0x481c	; 0x481c <setAddrWindow>
    4fd0:	02 c0       	rjmp	.+4      	; 0x4fd6 <drawFastHLine+0xb4>
  else
      setLR();
    4fd2:	0e 94 25 22 	call	0x444a	; 0x444a <setLR>
}
    4fd6:	df 91       	pop	r29
    4fd8:	cf 91       	pop	r28
    4fda:	1f 91       	pop	r17
    4fdc:	0f 91       	pop	r16
    4fde:	08 95       	ret

00004fe0 <begin>:
#endif
#endif
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void begin(void)  {
    4fe0:	1f 93       	push	r17
    4fe2:	cf 93       	push	r28
    4fe4:	df 93       	push	r29
#ifdef ID_CHK
     delay(100);
    4fe6:	84 e6       	ldi	r24, 0x64	; 100
    4fe8:	90 e0       	ldi	r25, 0x00	; 0
    4fea:	0e 94 ae 21 	call	0x435c	; 0x435c <delay>
 	 id = readID();
    4fee:	0e 94 77 23 	call	0x46ee	; 0x46ee <readID>
    4ff2:	a0 e0       	ldi	r26, 0x00	; 0
    4ff4:	b0 e0       	ldi	r27, 0x00	; 0
    4ff6:	80 93 8a 00 	sts	0x008A, r24
    4ffa:	90 93 8b 00 	sts	0x008B, r25
    4ffe:	a0 93 8c 00 	sts	0x008C, r26
    5002:	b0 93 8d 00 	sts	0x008D, r27
#endif

  uint8_t i = 0;
  reset();
    5006:	0e 94 0c 22 	call	0x4418	; 0x4418 <reset>
  delay(200);
    500a:	88 ec       	ldi	r24, 0xC8	; 200
    500c:	90 e0       	ldi	r25, 0x00	; 0
    500e:	0e 94 ae 21 	call	0x435c	; 0x435c <delay>

   if((id == 0x9325) || (id == 0x9328)) {
    5012:	80 91 8a 00 	lds	r24, 0x008A
    5016:	90 91 8b 00 	lds	r25, 0x008B
    501a:	a0 91 8c 00 	lds	r26, 0x008C
    501e:	b0 91 8d 00 	lds	r27, 0x008D
    5022:	85 32       	cpi	r24, 0x25	; 37
    5024:	23 e9       	ldi	r18, 0x93	; 147
    5026:	92 07       	cpc	r25, r18
    5028:	20 e0       	ldi	r18, 0x00	; 0
    502a:	a2 07       	cpc	r26, r18
    502c:	20 e0       	ldi	r18, 0x00	; 0
    502e:	b2 07       	cpc	r27, r18
    5030:	41 f0       	breq	.+16     	; 0x5042 <begin+0x62>
    5032:	88 32       	cpi	r24, 0x28	; 40
    5034:	e3 e9       	ldi	r30, 0x93	; 147
    5036:	9e 07       	cpc	r25, r30
    5038:	e0 e0       	ldi	r30, 0x00	; 0
    503a:	ae 07       	cpc	r26, r30
    503c:	e0 e0       	ldi	r30, 0x00	; 0
    503e:	be 07       	cpc	r27, r30
    5040:	f9 f4       	brne	.+62     	; 0x5080 <begin+0xa0>
    uint16_t a, d;
    driver = ID_932X;
    5042:	10 92 89 00 	sts	0x0089, r1
    CS_ACTIVE;
    5046:	aa 98       	cbi	0x15, 2	; 21
    5048:	ca e1       	ldi	r28, 0x1A	; 26
    504a:	de e1       	ldi	r29, 0x1E	; 30
    while(i < sizeof(ILI932x_regValues) / sizeof(uint16_t)) {
      a = pgm_read_word(&ILI932x_regValues[i++]);
    504c:	fe 01       	movw	r30, r28
    504e:	85 91       	lpm	r24, Z+
    5050:	94 91       	lpm	r25, Z+
    5052:	fe 01       	movw	r30, r28
    5054:	32 96       	adiw	r30, 0x02	; 2
      d = pgm_read_word(&ILI932x_regValues[i++]);
    5056:	65 91       	lpm	r22, Z+
    5058:	74 91       	lpm	r23, Z+
      if(a == TFTLCD_DELAY) delay(d);
    505a:	8f 3f       	cpi	r24, 0xFF	; 255
    505c:	91 05       	cpc	r25, r1
    505e:	21 f4       	brne	.+8      	; 0x5068 <begin+0x88>
    5060:	cb 01       	movw	r24, r22
    5062:	0e 94 ae 21 	call	0x435c	; 0x435c <delay>
    5066:	02 c0       	rjmp	.+4      	; 0x506c <begin+0x8c>
      else
          writeRegister16(a, d);
    5068:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <writeRegister16>
    506c:	24 96       	adiw	r28, 0x04	; 4

   if((id == 0x9325) || (id == 0x9328)) {
    uint16_t a, d;
    driver = ID_932X;
    CS_ACTIVE;
    while(i < sizeof(ILI932x_regValues) / sizeof(uint16_t)) {
    506e:	fe e1       	ldi	r31, 0x1E	; 30
    5070:	c6 3e       	cpi	r28, 0xE6	; 230
    5072:	df 07       	cpc	r29, r31
    5074:	59 f7       	brne	.-42     	; 0x504c <begin+0x6c>
      d = pgm_read_word(&ILI932x_regValues[i++]);
      if(a == TFTLCD_DELAY) delay(d);
      else
          writeRegister16(a, d);
    }
    setRotation(rotation);
    5076:	80 91 47 01 	lds	r24, 0x0147
    507a:	0e 94 fc 24 	call	0x49f8	; 0x49f8 <setRotation>
    507e:	bd c0       	rjmp	.+378    	; 0x51fa <begin+0x21a>
    setAddrWindow(0, 0, TFTWIDTH-1, TFTHEIGHT-1);

  } else
      if (id == 0x9341) {
    5080:	81 34       	cpi	r24, 0x41	; 65
    5082:	23 e9       	ldi	r18, 0x93	; 147
    5084:	92 07       	cpc	r25, r18
    5086:	20 e0       	ldi	r18, 0x00	; 0
    5088:	a2 07       	cpc	r26, r18
    508a:	20 e0       	ldi	r18, 0x00	; 0
    508c:	b2 07       	cpc	r27, r18
    508e:	91 f5       	brne	.+100    	; 0x50f4 <begin+0x114>
    delay(500);
    setAddrWindow(0, 0, TFTWIDTH-1, TFTHEIGHT-1);
    return;
#else
// ILI9341 mcufriend (8bit)
	driver = ID_9341;
    5090:	82 e0       	ldi	r24, 0x02	; 2
    5092:	80 93 89 00 	sts	0x0089, r24
	CS_ACTIVE;
    5096:	aa 98       	cbi	0x15, 2	; 21
    5098:	10 e0       	ldi	r17, 0x00	; 0
	while(i < sizeof(ILI9341_regValues)) {
		uint8_t r = pgm_read_byte(&ILI9341_regValues[i++]);
    509a:	81 2f       	mov	r24, r17
    509c:	8f 5f       	subi	r24, 0xFF	; 255
    509e:	e1 2f       	mov	r30, r17
    50a0:	f0 e0       	ldi	r31, 0x00	; 0
    50a2:	ea 51       	subi	r30, 0x1A	; 26
    50a4:	f1 4e       	sbci	r31, 0xE1	; 225
    50a6:	94 91       	lpm	r25, Z+
		uint8_t len = pgm_read_byte(&ILI9341_regValues[i++]);
    50a8:	1e 5f       	subi	r17, 0xFE	; 254
    50aa:	e8 2f       	mov	r30, r24
    50ac:	f0 e0       	ldi	r31, 0x00	; 0
    50ae:	ea 51       	subi	r30, 0x1A	; 26
    50b0:	f1 4e       	sbci	r31, 0xE1	; 225
    50b2:	84 91       	lpm	r24, Z+
		if(r == TFTLCD_DELAY) {
    50b4:	9f 3f       	cpi	r25, 0xFF	; 255
    50b6:	21 f4       	brne	.+8      	; 0x50c0 <begin+0xe0>
			delay(len);
    50b8:	90 e0       	ldi	r25, 0x00	; 0
    50ba:	0e 94 ae 21 	call	0x435c	; 0x435c <delay>
    50be:	17 c0       	rjmp	.+46     	; 0x50ee <begin+0x10e>
			} else {
			CS_ACTIVE;
    50c0:	aa 98       	cbi	0x15, 2	; 21
			CD_COMMAND;
    50c2:	ab 98       	cbi	0x15, 3	; 21
			write8(r);
    50c4:	9b bb       	out	0x1b, r25	; 27
    50c6:	ac 98       	cbi	0x15, 4	; 21
    50c8:	ac 9a       	sbi	0x15, 4	; 21
			CD_DATA;
    50ca:	ab 9a       	sbi	0x15, 3	; 21
    50cc:	21 2f       	mov	r18, r17
    50ce:	90 e0       	ldi	r25, 0x00	; 0
    50d0:	0a c0       	rjmp	.+20     	; 0x50e6 <begin+0x106>
			for (uint8_t d=0; d<len; d++) {
				uint8_t x = pgm_read_byte(&ILI9341_regValues[i++]);
    50d2:	e2 2f       	mov	r30, r18
    50d4:	f0 e0       	ldi	r31, 0x00	; 0
    50d6:	ea 51       	subi	r30, 0x1A	; 26
    50d8:	f1 4e       	sbci	r31, 0xE1	; 225
    50da:	2f 5f       	subi	r18, 0xFF	; 255
    50dc:	e4 91       	lpm	r30, Z+
				write8(x);
    50de:	eb bb       	out	0x1b, r30	; 27
    50e0:	ac 98       	cbi	0x15, 4	; 21
    50e2:	ac 9a       	sbi	0x15, 4	; 21
			} else {
			CS_ACTIVE;
			CD_COMMAND;
			write8(r);
			CD_DATA;
			for (uint8_t d=0; d<len; d++) {
    50e4:	9f 5f       	subi	r25, 0xFF	; 255
    50e6:	98 17       	cp	r25, r24
    50e8:	a0 f3       	brcs	.-24     	; 0x50d2 <begin+0xf2>
    50ea:	18 0f       	add	r17, r24
				uint8_t x = pgm_read_byte(&ILI9341_regValues[i++]);
				write8(x);
			    }
			CS_IDLE;
    50ec:	aa 9a       	sbi	0x15, 2	; 21
    return;
#else
// ILI9341 mcufriend (8bit)
	driver = ID_9341;
	CS_ACTIVE;
	while(i < sizeof(ILI9341_regValues)) {
    50ee:	1c 36       	cpi	r17, 0x6C	; 108
    50f0:	a0 f2       	brcs	.-88     	; 0x509a <begin+0xba>
    50f2:	91 c0       	rjmp	.+290    	; 0x5216 <begin+0x236>

      return;
#endif
  }
#ifdef  ILI_AND_MORE
   else if (id == 0x8357) {
    50f4:	87 35       	cpi	r24, 0x57	; 87
    50f6:	e3 e8       	ldi	r30, 0x83	; 131
    50f8:	9e 07       	cpc	r25, r30
    50fa:	e0 e0       	ldi	r30, 0x00	; 0
    50fc:	ae 07       	cpc	r26, r30
    50fe:	e0 e0       	ldi	r30, 0x00	; 0
    5100:	be 07       	cpc	r27, r30
    5102:	91 f5       	brne	.+100    	; 0x5168 <begin+0x188>
    // HX8357D
    driver = ID_HX8357D;
    5104:	83 e0       	ldi	r24, 0x03	; 3
    5106:	80 93 89 00 	sts	0x0089, r24
    CS_ACTIVE;
    510a:	aa 98       	cbi	0x15, 2	; 21
    510c:	10 e0       	ldi	r17, 0x00	; 0
     while(i < sizeof(HX8357D_regValues)) {
      uint8_t r = pgm_read_byte(&HX8357D_regValues[i++]);
    510e:	81 2f       	mov	r24, r17
    5110:	8f 5f       	subi	r24, 0xFF	; 255
    5112:	e1 2f       	mov	r30, r17
    5114:	f0 e0       	ldi	r31, 0x00	; 0
    5116:	e8 55       	subi	r30, 0x58	; 88
    5118:	f0 4e       	sbci	r31, 0xE0	; 224
    511a:	94 91       	lpm	r25, Z+
      uint8_t len = pgm_read_byte(&HX8357D_regValues[i++]);
    511c:	1e 5f       	subi	r17, 0xFE	; 254
    511e:	e8 2f       	mov	r30, r24
    5120:	f0 e0       	ldi	r31, 0x00	; 0
    5122:	e8 55       	subi	r30, 0x58	; 88
    5124:	f0 4e       	sbci	r31, 0xE0	; 224
    5126:	84 91       	lpm	r24, Z+
      if(r == TFTLCD_DELAY) {
    5128:	9f 3f       	cpi	r25, 0xFF	; 255
    512a:	21 f4       	brne	.+8      	; 0x5134 <begin+0x154>
	delay(len);
    512c:	90 e0       	ldi	r25, 0x00	; 0
    512e:	0e 94 ae 21 	call	0x435c	; 0x435c <delay>
    5132:	17 c0       	rjmp	.+46     	; 0x5162 <begin+0x182>
      } else {
	CS_ACTIVE;
    5134:	aa 98       	cbi	0x15, 2	; 21
	CD_COMMAND;
    5136:	ab 98       	cbi	0x15, 3	; 21
	write8(r);
    5138:	9b bb       	out	0x1b, r25	; 27
    513a:	ac 98       	cbi	0x15, 4	; 21
    513c:	ac 9a       	sbi	0x15, 4	; 21
	CD_DATA;
    513e:	ab 9a       	sbi	0x15, 3	; 21
    5140:	21 2f       	mov	r18, r17
    5142:	90 e0       	ldi	r25, 0x00	; 0
    5144:	0a c0       	rjmp	.+20     	; 0x515a <begin+0x17a>
	for (uint8_t d=0; d<len; d++) {
	  uint8_t x = pgm_read_byte(&HX8357D_regValues[i++]);
    5146:	e2 2f       	mov	r30, r18
    5148:	f0 e0       	ldi	r31, 0x00	; 0
    514a:	e8 55       	subi	r30, 0x58	; 88
    514c:	f0 4e       	sbci	r31, 0xE0	; 224
    514e:	2f 5f       	subi	r18, 0xFF	; 255
    5150:	e4 91       	lpm	r30, Z+
	  write8(x);
    5152:	eb bb       	out	0x1b, r30	; 27
    5154:	ac 98       	cbi	0x15, 4	; 21
    5156:	ac 9a       	sbi	0x15, 4	; 21
      } else {
	CS_ACTIVE;
	CD_COMMAND;
	write8(r);
	CD_DATA;
	for (uint8_t d=0; d<len; d++) {
    5158:	9f 5f       	subi	r25, 0xFF	; 255
    515a:	98 17       	cp	r25, r24
    515c:	a0 f3       	brcs	.-24     	; 0x5146 <begin+0x166>
    515e:	18 0f       	add	r17, r24
	  uint8_t x = pgm_read_byte(&HX8357D_regValues[i++]);
	  write8(x);
	}
	CS_IDLE;
    5160:	aa 9a       	sbi	0x15, 2	; 21
#ifdef  ILI_AND_MORE
   else if (id == 0x8357) {
    // HX8357D
    driver = ID_HX8357D;
    CS_ACTIVE;
     while(i < sizeof(HX8357D_regValues)) {
    5162:	16 34       	cpi	r17, 0x46	; 70
    5164:	a0 f2       	brcs	.-88     	; 0x510e <begin+0x12e>
    5166:	57 c0       	rjmp	.+174    	; 0x5216 <begin+0x236>
      }
    }
     return;

  } else
      if(id == 0x7575) {
    5168:	85 37       	cpi	r24, 0x75	; 117
    516a:	f5 e7       	ldi	r31, 0x75	; 117
    516c:	9f 07       	cpc	r25, r31
    516e:	f0 e0       	ldi	r31, 0x00	; 0
    5170:	af 07       	cpc	r26, r31
    5172:	f0 e0       	ldi	r31, 0x00	; 0
    5174:	bf 07       	cpc	r27, r31
    5176:	09 f5       	brne	.+66     	; 0x51ba <begin+0x1da>
    uint8_t a, d;
    driver = ID_7575;
    5178:	81 e0       	ldi	r24, 0x01	; 1
    517a:	80 93 89 00 	sts	0x0089, r24
    CS_ACTIVE;
    517e:	aa 98       	cbi	0x15, 2	; 21
    5180:	c2 e5       	ldi	r28, 0x52	; 82
    5182:	df e1       	ldi	r29, 0x1F	; 31
      while(i < sizeof(HX8347G_regValues)) {
      a = pgm_read_byte(&HX8347G_regValues[i++]);
    5184:	fe 01       	movw	r30, r28
    5186:	84 91       	lpm	r24, Z+
      d = pgm_read_byte(&HX8347G_regValues[i++]);
    5188:	21 96       	adiw	r28, 0x01	; 1
    518a:	fe 01       	movw	r30, r28
    518c:	64 91       	lpm	r22, Z+
    518e:	21 97       	sbiw	r28, 0x01	; 1
      if(a == TFTLCD_DELAY) delay(d);
    5190:	8f 3f       	cpi	r24, 0xFF	; 255
    5192:	29 f4       	brne	.+10     	; 0x519e <begin+0x1be>
    5194:	86 2f       	mov	r24, r22
    5196:	90 e0       	ldi	r25, 0x00	; 0
    5198:	0e 94 ae 21 	call	0x435c	; 0x435c <delay>
    519c:	02 c0       	rjmp	.+4      	; 0x51a2 <begin+0x1c2>
      else
      writeRegister8(a, d);
    519e:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <writeRegister8>
    51a2:	22 96       	adiw	r28, 0x02	; 2
  } else
      if(id == 0x7575) {
    uint8_t a, d;
    driver = ID_7575;
    CS_ACTIVE;
      while(i < sizeof(HX8347G_regValues)) {
    51a4:	ff e1       	ldi	r31, 0x1F	; 31
    51a6:	c8 3a       	cpi	r28, 0xA8	; 168
    51a8:	df 07       	cpc	r29, r31
    51aa:	61 f7       	brne	.-40     	; 0x5184 <begin+0x1a4>
      d = pgm_read_byte(&HX8347G_regValues[i++]);
      if(a == TFTLCD_DELAY) delay(d);
      else
      writeRegister8(a, d);
      }
    setRotation(rotation);
    51ac:	80 91 47 01 	lds	r24, 0x0147
    51b0:	0e 94 fc 24 	call	0x49f8	; 0x49f8 <setRotation>
    setLR(); // Lower-right corner of address window
    51b4:	0e 94 25 22 	call	0x444a	; 0x444a <setLR>
    51b8:	2e c0       	rjmp	.+92     	; 0x5216 <begin+0x236>
    }
   else if(id == 0x0154) {
    51ba:	84 55       	subi	r24, 0x54	; 84
    51bc:	91 40       	sbci	r25, 0x01	; 1
    51be:	a0 40       	sbci	r26, 0x00	; 0
    51c0:	b0 40       	sbci	r27, 0x00	; 0
    51c2:	31 f5       	brne	.+76     	; 0x5210 <begin+0x230>
  //S6D0154
   uint16_t a, d;
   driver = ID_S6D0154;
    51c4:	84 e0       	ldi	r24, 0x04	; 4
    51c6:	80 93 89 00 	sts	0x0089, r24
   CS_ACTIVE;
    51ca:	aa 98       	cbi	0x15, 2	; 21
    51cc:	cc e8       	ldi	r28, 0x8C	; 140
    51ce:	d0 e2       	ldi	r29, 0x20	; 32
      while(i < sizeof(S6D0154_regValues) / sizeof(uint16_t)) {
      a = pgm_read_word(&S6D0154_regValues[i++]);
    51d0:	fe 01       	movw	r30, r28
    51d2:	85 91       	lpm	r24, Z+
    51d4:	94 91       	lpm	r25, Z+
    51d6:	fe 01       	movw	r30, r28
    51d8:	32 96       	adiw	r30, 0x02	; 2
      d = pgm_read_word(&S6D0154_regValues[i++]);
    51da:	65 91       	lpm	r22, Z+
    51dc:	74 91       	lpm	r23, Z+
      if(a == TFTLCD_DELAY) delay(d);
    51de:	8f 3f       	cpi	r24, 0xFF	; 255
    51e0:	91 05       	cpc	r25, r1
    51e2:	21 f4       	brne	.+8      	; 0x51ec <begin+0x20c>
    51e4:	cb 01       	movw	r24, r22
    51e6:	0e 94 ae 21 	call	0x435c	; 0x435c <delay>
    51ea:	02 c0       	rjmp	.+4      	; 0x51f0 <begin+0x210>
      else
      writeRegister16(a, d);
    51ec:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <writeRegister16>
    51f0:	24 96       	adiw	r28, 0x04	; 4
   else if(id == 0x0154) {
  //S6D0154
   uint16_t a, d;
   driver = ID_S6D0154;
   CS_ACTIVE;
      while(i < sizeof(S6D0154_regValues) / sizeof(uint16_t)) {
    51f2:	81 e2       	ldi	r24, 0x21	; 33
    51f4:	c0 30       	cpi	r28, 0x00	; 0
    51f6:	d8 07       	cpc	r29, r24
    51f8:	59 f7       	brne	.-42     	; 0x51d0 <begin+0x1f0>
      d = pgm_read_word(&S6D0154_regValues[i++]);
      if(a == TFTLCD_DELAY) delay(d);
      else
      writeRegister16(a, d);
    }
   setAddrWindow(0, 0, TFTWIDTH-1, TFTHEIGHT-1);
    51fa:	80 e0       	ldi	r24, 0x00	; 0
    51fc:	90 e0       	ldi	r25, 0x00	; 0
    51fe:	60 e0       	ldi	r22, 0x00	; 0
    5200:	70 e0       	ldi	r23, 0x00	; 0
    5202:	4f ee       	ldi	r20, 0xEF	; 239
    5204:	50 e0       	ldi	r21, 0x00	; 0
    5206:	2f e3       	ldi	r18, 0x3F	; 63
    5208:	31 e0       	ldi	r19, 0x01	; 1
    520a:	0e 94 0e 24 	call	0x481c	; 0x481c <setAddrWindow>
    520e:	03 c0       	rjmp	.+6      	; 0x5216 <begin+0x236>
   setAddrWindow(0, 0, TFTWIDTH-1, TFTHEIGHT-1);
  }
#endif
#endif
    else {
    driver = ID_UNKNOWN;
    5210:	8f ef       	ldi	r24, 0xFF	; 255
    5212:	80 93 89 00 	sts	0x0089, r24
    return;
    }
}
    5216:	df 91       	pop	r29
    5218:	cf 91       	pop	r28
    521a:	1f 91       	pop	r17
    521c:	08 95       	ret

0000521e <__mulsi3>:
    521e:	62 9f       	mul	r22, r18
    5220:	d0 01       	movw	r26, r0
    5222:	73 9f       	mul	r23, r19
    5224:	f0 01       	movw	r30, r0
    5226:	82 9f       	mul	r24, r18
    5228:	e0 0d       	add	r30, r0
    522a:	f1 1d       	adc	r31, r1
    522c:	64 9f       	mul	r22, r20
    522e:	e0 0d       	add	r30, r0
    5230:	f1 1d       	adc	r31, r1
    5232:	92 9f       	mul	r25, r18
    5234:	f0 0d       	add	r31, r0
    5236:	83 9f       	mul	r24, r19
    5238:	f0 0d       	add	r31, r0
    523a:	74 9f       	mul	r23, r20
    523c:	f0 0d       	add	r31, r0
    523e:	65 9f       	mul	r22, r21
    5240:	f0 0d       	add	r31, r0
    5242:	99 27       	eor	r25, r25
    5244:	72 9f       	mul	r23, r18
    5246:	b0 0d       	add	r27, r0
    5248:	e1 1d       	adc	r30, r1
    524a:	f9 1f       	adc	r31, r25
    524c:	63 9f       	mul	r22, r19
    524e:	b0 0d       	add	r27, r0
    5250:	e1 1d       	adc	r30, r1
    5252:	f9 1f       	adc	r31, r25
    5254:	bd 01       	movw	r22, r26
    5256:	cf 01       	movw	r24, r30
    5258:	11 24       	eor	r1, r1
    525a:	08 95       	ret

0000525c <__udivmodhi4>:
    525c:	aa 1b       	sub	r26, r26
    525e:	bb 1b       	sub	r27, r27
    5260:	51 e1       	ldi	r21, 0x11	; 17
    5262:	07 c0       	rjmp	.+14     	; 0x5272 <__udivmodhi4_ep>

00005264 <__udivmodhi4_loop>:
    5264:	aa 1f       	adc	r26, r26
    5266:	bb 1f       	adc	r27, r27
    5268:	a6 17       	cp	r26, r22
    526a:	b7 07       	cpc	r27, r23
    526c:	10 f0       	brcs	.+4      	; 0x5272 <__udivmodhi4_ep>
    526e:	a6 1b       	sub	r26, r22
    5270:	b7 0b       	sbc	r27, r23

00005272 <__udivmodhi4_ep>:
    5272:	88 1f       	adc	r24, r24
    5274:	99 1f       	adc	r25, r25
    5276:	5a 95       	dec	r21
    5278:	a9 f7       	brne	.-22     	; 0x5264 <__udivmodhi4_loop>
    527a:	80 95       	com	r24
    527c:	90 95       	com	r25
    527e:	bc 01       	movw	r22, r24
    5280:	cd 01       	movw	r24, r26
    5282:	08 95       	ret

00005284 <__divmodhi4>:
    5284:	97 fb       	bst	r25, 7
    5286:	09 2e       	mov	r0, r25
    5288:	07 26       	eor	r0, r23
    528a:	0a d0       	rcall	.+20     	; 0x52a0 <__divmodhi4_neg1>
    528c:	77 fd       	sbrc	r23, 7
    528e:	04 d0       	rcall	.+8      	; 0x5298 <__divmodhi4_neg2>
    5290:	e5 df       	rcall	.-54     	; 0x525c <__udivmodhi4>
    5292:	06 d0       	rcall	.+12     	; 0x52a0 <__divmodhi4_neg1>
    5294:	00 20       	and	r0, r0
    5296:	1a f4       	brpl	.+6      	; 0x529e <__divmodhi4_exit>

00005298 <__divmodhi4_neg2>:
    5298:	70 95       	com	r23
    529a:	61 95       	neg	r22
    529c:	7f 4f       	sbci	r23, 0xFF	; 255

0000529e <__divmodhi4_exit>:
    529e:	08 95       	ret

000052a0 <__divmodhi4_neg1>:
    52a0:	f6 f7       	brtc	.-4      	; 0x529e <__divmodhi4_exit>
    52a2:	90 95       	com	r25
    52a4:	81 95       	neg	r24
    52a6:	9f 4f       	sbci	r25, 0xFF	; 255
    52a8:	08 95       	ret

000052aa <__divmodsi4>:
    52aa:	97 fb       	bst	r25, 7
    52ac:	09 2e       	mov	r0, r25
    52ae:	05 26       	eor	r0, r21
    52b0:	0e d0       	rcall	.+28     	; 0x52ce <__divmodsi4_neg1>
    52b2:	57 fd       	sbrc	r21, 7
    52b4:	04 d0       	rcall	.+8      	; 0x52be <__divmodsi4_neg2>
    52b6:	14 d0       	rcall	.+40     	; 0x52e0 <__udivmodsi4>
    52b8:	0a d0       	rcall	.+20     	; 0x52ce <__divmodsi4_neg1>
    52ba:	00 1c       	adc	r0, r0
    52bc:	38 f4       	brcc	.+14     	; 0x52cc <__divmodsi4_exit>

000052be <__divmodsi4_neg2>:
    52be:	50 95       	com	r21
    52c0:	40 95       	com	r20
    52c2:	30 95       	com	r19
    52c4:	21 95       	neg	r18
    52c6:	3f 4f       	sbci	r19, 0xFF	; 255
    52c8:	4f 4f       	sbci	r20, 0xFF	; 255
    52ca:	5f 4f       	sbci	r21, 0xFF	; 255

000052cc <__divmodsi4_exit>:
    52cc:	08 95       	ret

000052ce <__divmodsi4_neg1>:
    52ce:	f6 f7       	brtc	.-4      	; 0x52cc <__divmodsi4_exit>
    52d0:	90 95       	com	r25
    52d2:	80 95       	com	r24
    52d4:	70 95       	com	r23
    52d6:	61 95       	neg	r22
    52d8:	7f 4f       	sbci	r23, 0xFF	; 255
    52da:	8f 4f       	sbci	r24, 0xFF	; 255
    52dc:	9f 4f       	sbci	r25, 0xFF	; 255
    52de:	08 95       	ret

000052e0 <__udivmodsi4>:
    52e0:	a1 e2       	ldi	r26, 0x21	; 33
    52e2:	1a 2e       	mov	r1, r26
    52e4:	aa 1b       	sub	r26, r26
    52e6:	bb 1b       	sub	r27, r27
    52e8:	fd 01       	movw	r30, r26
    52ea:	0d c0       	rjmp	.+26     	; 0x5306 <__udivmodsi4_ep>

000052ec <__udivmodsi4_loop>:
    52ec:	aa 1f       	adc	r26, r26
    52ee:	bb 1f       	adc	r27, r27
    52f0:	ee 1f       	adc	r30, r30
    52f2:	ff 1f       	adc	r31, r31
    52f4:	a2 17       	cp	r26, r18
    52f6:	b3 07       	cpc	r27, r19
    52f8:	e4 07       	cpc	r30, r20
    52fa:	f5 07       	cpc	r31, r21
    52fc:	20 f0       	brcs	.+8      	; 0x5306 <__udivmodsi4_ep>
    52fe:	a2 1b       	sub	r26, r18
    5300:	b3 0b       	sbc	r27, r19
    5302:	e4 0b       	sbc	r30, r20
    5304:	f5 0b       	sbc	r31, r21

00005306 <__udivmodsi4_ep>:
    5306:	66 1f       	adc	r22, r22
    5308:	77 1f       	adc	r23, r23
    530a:	88 1f       	adc	r24, r24
    530c:	99 1f       	adc	r25, r25
    530e:	1a 94       	dec	r1
    5310:	69 f7       	brne	.-38     	; 0x52ec <__udivmodsi4_loop>
    5312:	60 95       	com	r22
    5314:	70 95       	com	r23
    5316:	80 95       	com	r24
    5318:	90 95       	com	r25
    531a:	9b 01       	movw	r18, r22
    531c:	ac 01       	movw	r20, r24
    531e:	bd 01       	movw	r22, r26
    5320:	cf 01       	movw	r24, r30
    5322:	08 95       	ret

00005324 <itoa>:
    5324:	fb 01       	movw	r30, r22
    5326:	9f 01       	movw	r18, r30
    5328:	e8 94       	clt
    532a:	42 30       	cpi	r20, 0x02	; 2
    532c:	c4 f0       	brlt	.+48     	; 0x535e <itoa+0x3a>
    532e:	45 32       	cpi	r20, 0x25	; 37
    5330:	b4 f4       	brge	.+44     	; 0x535e <itoa+0x3a>
    5332:	4a 30       	cpi	r20, 0x0A	; 10
    5334:	29 f4       	brne	.+10     	; 0x5340 <itoa+0x1c>
    5336:	97 fb       	bst	r25, 7
    5338:	1e f4       	brtc	.+6      	; 0x5340 <itoa+0x1c>
    533a:	90 95       	com	r25
    533c:	81 95       	neg	r24
    533e:	9f 4f       	sbci	r25, 0xFF	; 255
    5340:	64 2f       	mov	r22, r20
    5342:	77 27       	eor	r23, r23
    5344:	0e 94 2e 29 	call	0x525c	; 0x525c <__udivmodhi4>
    5348:	80 5d       	subi	r24, 0xD0	; 208
    534a:	8a 33       	cpi	r24, 0x3A	; 58
    534c:	0c f0       	brlt	.+2      	; 0x5350 <itoa+0x2c>
    534e:	89 5d       	subi	r24, 0xD9	; 217
    5350:	81 93       	st	Z+, r24
    5352:	cb 01       	movw	r24, r22
    5354:	00 97       	sbiw	r24, 0x00	; 0
    5356:	a1 f7       	brne	.-24     	; 0x5340 <itoa+0x1c>
    5358:	16 f4       	brtc	.+4      	; 0x535e <itoa+0x3a>
    535a:	5d e2       	ldi	r21, 0x2D	; 45
    535c:	51 93       	st	Z+, r21
    535e:	10 82       	st	Z, r1
    5360:	c9 01       	movw	r24, r18
    5362:	0c 94 b3 29 	jmp	0x5366	; 0x5366 <strrev>

00005366 <strrev>:
    5366:	dc 01       	movw	r26, r24
    5368:	fc 01       	movw	r30, r24
    536a:	67 2f       	mov	r22, r23
    536c:	71 91       	ld	r23, Z+
    536e:	77 23       	and	r23, r23
    5370:	e1 f7       	brne	.-8      	; 0x536a <strrev+0x4>
    5372:	32 97       	sbiw	r30, 0x02	; 2
    5374:	04 c0       	rjmp	.+8      	; 0x537e <strrev+0x18>
    5376:	7c 91       	ld	r23, X
    5378:	6d 93       	st	X+, r22
    537a:	70 83       	st	Z, r23
    537c:	62 91       	ld	r22, -Z
    537e:	ae 17       	cp	r26, r30
    5380:	bf 07       	cpc	r27, r31
    5382:	c8 f3       	brcs	.-14     	; 0x5376 <strrev+0x10>
    5384:	08 95       	ret

00005386 <_exit>:
    5386:	f8 94       	cli

00005388 <__stop_program>:
    5388:	ff cf       	rjmp	.-2      	; 0x5388 <__stop_program>
